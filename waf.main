#!/bin/bash
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# script alias to the waf engine script

set_prefix() {
    local this=$(readlink -n -f "$1")
    prefix=$(dirname "${this}")
}

set_prefix "${0}"

export ASTER_REQS_USE_DEBUG=${ASTER_REQS_USE_DEBUG:-0}

waf_main()
{
    # source the environment only if DEVTOOLS_COMPUTER_ID is not already defined
    printf "checking environment... "
    if [ -z "${DEVTOOLS_COMPUTER_ID}" ]; then
        host=$(detect_host)
        if [ -z "${host}" ]; then
            echo "no preset configuration found"
            source ${prefix}/env.d/version.sh
            # FIXME: set manually during beta tests
            export VERSION=20240327b
            args=( "-v" )
            [ ${ASTER_REQS_USE_DEBUG} -eq 1 ] && args=()
            ${prefix}/.devhelper/check_requirements.sh
            iret=$?
            [ ${iret} -eq 4 ] && exit ${iret}
            if [ ${iret} -eq 0 ]; then
                export ASTER_CONFIG=$(ls ${prefix}/build/codeaster-prerequisites-${VERSION}-*/*.sh | grep ${args[@]} debug | head -1)
            else
                printf "⚠️  code_aster requirements not found, configuration may fail!\n\n"
            fi
            host=$(detect_host)
        fi
        if [ ! -z "${host}" ]; then
            export WAFBUILD_ENV="$(get_wafbuild_env ${host})"
            if [ -e "${WAFBUILD_ENV}" ]; then
                . "${WAFBUILD_ENV}"
                echo "loading ${WAFBUILD_ENV}"
            else
                echo "no found: ${WAFBUILD_ENV}"
                unset WAFBUILD_ENV
            fi
        fi
    else
        if [ -z "${WAFBUILD_ENV}" ]; then
            export WAFBUILD_ENV="$(get_wafbuild_env ${DEVTOOLS_COMPUTER_ID})"
        fi
        if [ -e "${WAFBUILD_ENV}" ]; then
            echo "already set: ${WAFBUILD_ENV}"
        else
            echo "no found: ${WAFBUILD_ENV}"
            unset WAFBUILD_ENV
        fi
    fi

    # really execute waf
    engine=$(echo ${0} | sed -e 's/\main$/engine/g')
    echo "executing: ${engine} ${@}"
    "${engine}" "${@}"
    return $?
}

# detect for supported host for automatic configuration
detect_host()
{
    if [ ! -z "${ASTER_CONFIG}" ]; then
        printf aster_config
        return
    fi
    if [ "${PIXI_PROJECT_NAME}" = "codeaster-src" ]; then
        printf ${PIXI_PROJECT_NAME}
        return
    fi
    if [ ! -z "${SINGULARITY_NAME}" ] || [ -f /.dockerenv ]; then
        local wbe=$(ls /opt/public/*_${WAF_SUFFIX}.sh 2> /dev/null)
        if [ ! -z "${wbe}" ]; then
            plt=$(basename "${wbe}" | sed -e "s%_${WAF_SUFFIX}\.sh$%%")
            printf "${plt}"
            return
        fi
    fi
    if [ -f /software/shared/simumeca/aster/selena ]; then
        printf selena
    elif [ -f /software/restricted/simumeca/aster/cronos ]; then
        printf cronos
    elif [ -f /software/simumeca/aster/cirrus ]; then
        printf cirrus
    elif [ -f /projets/simumeca/gaia ]; then
        printf gaia
    elif egrep -q "Scibian 10.0" /etc/issue; then
        printf scibian10
    elif egrep -q "Scibian 9.0" /etc/issue; then
        printf scibian9
    elif egrep -q "Calibre 9|Debian GNU/Linux 8" /etc/issue; then
        printf calibre9
    fi
    printf ""
}

get_wafbuild_env()
{
    # usage: get_wafbuild_env platform
    local plt="${1}"
    if [ "${plt}" = "aster_config" ]; then
        printf "${ASTER_CONFIG}"
        return
    fi
    local wbe="/opt/public/${plt}_${WAF_SUFFIX}.sh"
    if [ ! -f "${wbe}" ]; then
        wbe="${prefix}/env.d/${plt}_${WAF_SUFFIX}.sh"
        [ ! -f "${wbe}" ] && wbe=""
    fi
    printf "${wbe}"
}

waf_main "${@}"
exit $?
