/**
 * @file PhysicsAndModelingsInterface.cxx
 * @brief Interface python de PhysicsAndModelings
 * @author Nicolas Sellenet
 * @section LICENCE
 *   Copyright (C) 1991 - 2025  EDF R&D                www.code-aster.org
 *
 *   This file is part of Code_Aster.
 *
 *   Code_Aster is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Code_Aster is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Code_Aster.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "PythonBindings/PhysicsAndModelingsInterface.h"

#include "aster_pybind.h"

void exportPhysicsAndModelingsToPython( py::module_ &mod ) {

    py::enum_< Physics >( mod, "Physics", R"(
Enumeration physics.
    )" )
        .value( "Mechanics", Mechanics )
        .value( "Thermal", Thermal )
        .value( "Acoustic", Acoustic )
        .export_values();

    py::enum_< Modelings >( mod, "Modelings", R"(
Enumeration of modelings.
    )" )
        .value( "PlanarBar", PlanarBar )
        .value( "DIS_T_2D", DIS_T_2D )
        .value( "DIS_TR_2D", DIS_TR_2D )
        .value( "FLUIDE_2D", FLUIDE_2D )
        .value( "FLUI_ABSO_2D", FLUI_ABSO_2D )
        .value( "FLUI_PESA_2D", FLUI_PESA_2D )
        .value( "FLUI_STRU_2D", FLUI_STRU_2D )
        .value( "Tridimensional", Tridimensional )
        .value( "TridimensionalAbsorbingBoundary", TridimensionalAbsorbingBoundary )
        .value( "DIL_3D", DIL_3D )
        .value( "FAISCEAU_3D", FAISCEAU_3D )
        .value( "FLUIDE_3D", FLUIDE_3D )
        .value( "FLUI_ABSO_3D", FLUI_ABSO_3D )
        .value( "GRAD_HHO_3D", GRAD_HHO_3D )
        .value( "GRAD_INCO_3D", GRAD_INCO_3D )
        .value( "GRAD_VARI_3D", GRAD_VARI_3D )
        .value( "GVNO_3D", GVNO_3D )
        .value( "HH2D_3D", HH2D_3D )
        .value( "HH2MD_3D", HH2MD_3D )
        .value( "HH2MS_3D", HH2MS_3D )
        .value( "HH2MS_DIL_3D", HH2MS_DIL_3D )
        .value( "HH2M_SI_3D", HH2M_SI_3D )
        .value( "HH2S_3D", HH2S_3D )
        .value( "HH2SUDA_3D", HH2SUDA_3D )
        .value( "HHD_3D", HHD_3D )
        .value( "HHM_3D", HHM_3D )
        .value( "HHMD_3D", HHMD_3D )
        .value( "HHMS_3D", HHMS_3D )
        .value( "HHO_3D", HHO_3D )
        .value( "HHS_3D", HHS_3D )
        .value( "HM_3D", HM_3D )
        .value( "HMD_3D", HMD_3D )
        .value( "HMS_3D", HMS_3D )
        .value( "HMS_DIL_3D", HMS_DIL_3D )
        .value( "HM_SI_3D", HM_SI_3D )
        .value( "HM_SI_DIL_3D", HM_SI_DIL_3D )
        .value( "HS_3D", HS_3D )
        .value( "INCO_UP_3D", INCO_UP_3D )
        .value( "INCO_UPG_3D", INCO_UPG_3D )
        .value( "INCO_UPO_3D", INCO_UPO_3D )
        .value( "INTERFACE_3D", INTERFACE_3D )
        .value( "INTERFACE_S_3D", INTERFACE_S_3D )
        .value( "JOINT_3D", JOINT_3D )
        .value( "JOINT_HYME_3D", JOINT_HYME_3D )
        .value( "SECH_3D", SECH_3D )
        .value( "SECH_3D_DIAG", SECH_3D_DIAG )
        .value( "SI_3D", SI_3D )
        .value( "THH2D_3D", THH2D_3D )
        .value( "THH2MD_3D", THH2MD_3D )
        .value( "THH2MS_3D", THH2MS_3D )
        .value( "THH2S_3D", THH2S_3D )
        .value( "THHD_3D", THHD_3D )
        .value( "THHM_3D", THHM_3D )
        .value( "THHMD_3D", THHMD_3D )
        .value( "THHMS_3D", THHMS_3D )
        .value( "THHS_3D", THHS_3D )
        .value( "THM_3D", THM_3D )
        .value( "THMD_3D", THMD_3D )
        .value( "THMS_3D", THMS_3D )
        .value( "THMS_DIL_3D", THMS_DIL_3D )
        .value( "THVD_3D", THVD_3D )
        .value( "THVS_3D", THVS_3D )
        .value( "Axisymmetrical", Axisymmetrical )
        .value( "AXIS_FLUIDE", AXIS_FLUIDE )
        .value( "AXIS_FLUI_ABSO", AXIS_FLUI_ABSO )
        .value( "AXIS_FLUI_STRU", AXIS_FLUI_STRU )
        .value( "AXIS_FOURIER", AXIS_FOURIER )
        .value( "AXIS_GRAD_INCO", AXIS_GRAD_INCO )
        .value( "AXIS_GRAD_VARI", AXIS_GRAD_VARI )
        .value( "AXIS_GVNO", AXIS_GVNO )
        .value( "AXIS_HH2D", AXIS_HH2D )
        .value( "AXIS_HH2MD", AXIS_HH2MD )
        .value( "AXIS_HH2MS", AXIS_HH2MS )
        .value( "AXIS_HH2S", AXIS_HH2S )
        .value( "AXIS_HHD", AXIS_HHD )
        .value( "AXIS_HHM", AXIS_HHM )
        .value( "AXIS_HHMD", AXIS_HHMD )
        .value( "AXIS_HHMS", AXIS_HHMS )
        .value( "AXIS_HHS", AXIS_HHS )
        .value( "AXIS_HM", AXIS_HM )
        .value( "AXIS_HMD", AXIS_HMD )
        .value( "AXIS_HMS", AXIS_HMS )
        .value( "AXIS_INCO_UP", AXIS_INCO_UP )
        .value( "AXIS_INCO_UPG", AXIS_INCO_UPG )
        .value( "AXIS_INCO_UPO", AXIS_INCO_UPO )
        .value( "AXIS_INTERFACE", AXIS_INTERFACE )
        .value( "AXIS_INTERFACE_S", AXIS_INTERFACE_S )
        .value( "AXIS_JHMS", AXIS_JHMS )
        .value( "AXIS_JOINT", AXIS_JOINT )
        .value( "AXIS_SECH", AXIS_SECH )
        .value( "AXIS_SECH_DIAG", AXIS_SECH_DIAG )
        .value( "AXIS_SI", AXIS_SI )
        .value( "AXIS_THH2D", AXIS_THH2D )
        .value( "AXIS_THH2MD", AXIS_THH2MD )
        .value( "AXIS_THH2MS", AXIS_THH2MS )
        .value( "AXIS_THH2S", AXIS_THH2S )
        .value( "AXIS_THHD", AXIS_THHD )
        .value( "AXIS_THHMD", AXIS_THHMD )
        .value( "AXIS_THHMS", AXIS_THHMS )
        .value( "AXIS_THHS", AXIS_THHS )
        .value( "AXIS_THM", AXIS_THM )
        .value( "AXIS_THMD", AXIS_THMD )
        .value( "AXIS_THMS", AXIS_THMS )
        .value( "AXIS_THVD", AXIS_THVD )
        .value( "AXIS_THVS", AXIS_THVS )
        .value( "BARRE", BARRE )
        .value( "CABLE", CABLE )
        .value( "CABLE_GAINE", CABLE_GAINE )
        .value( "CABLE_POULIE", CABLE_POULIE )
        .value( "COQUE_3D", COQUE_3D )
        .value( "COQUE_AXIS", COQUE_AXIS )
        .value( "COQUE_SOLIDE", COQUE_SOLIDE )
        .value( "PlaneStress", PlaneStress )
        .value( "C_PLAN_SI", C_PLAN_SI )
        .value( "DIS_T", DIS_T )
        .value( "DIS_TR", DIS_TR )
        .value( "DKT", DKT )
        .value( "DKTG", DKTG )
        .value( "DST", DST )
        .value( "PlaneStrain", PlaneStrain )
        .value( "D_PLAN_2DG", D_PLAN_2DG )
        .value( "D_PLAN_ABSO", D_PLAN_ABSO )
        .value( "D_PLAN_DIL", D_PLAN_DIL )
        .value( "D_PLAN_GRAD_HHO", D_PLAN_GRAD_HHO )
        .value( "D_PLAN_GRAD_INCO", D_PLAN_GRAD_INCO )
        .value( "D_PLAN_GRAD_SIGM", D_PLAN_GRAD_SIGM )
        .value( "D_PLAN_GRAD_VARI", D_PLAN_GRAD_VARI )
        .value( "D_PLAN_GVNO", D_PLAN_GVNO )
        .value( "D_PLAN_HH2D", D_PLAN_HH2D )
        .value( "D_PLAN_HH2MD", D_PLAN_HH2MD )
        .value( "D_PLAN_HH2MS", D_PLAN_HH2MS )
        .value( "D_PLAN_HH2MS_DIL", D_PLAN_HH2MS_DIL )
        .value( "D_PLAN_HH2M_SI", D_PLAN_HH2M_SI )
        .value( "D_PLAN_HH2S", D_PLAN_HH2S )
        .value( "D_PLAN_HH2SUDA", D_PLAN_HH2SUDA )
        .value( "D_PLAN_HHD", D_PLAN_HHD )
        .value( "D_PLAN_HHM", D_PLAN_HHM )
        .value( "D_PLAN_HHMD", D_PLAN_HHMD )
        .value( "D_PLAN_HHMS", D_PLAN_HHMS )
        .value( "D_PLAN_HHO", D_PLAN_HHO )
        .value( "D_PLAN_HHS", D_PLAN_HHS )
        .value( "D_PLAN_HM", D_PLAN_HM )
        .value( "D_PLAN_HMD", D_PLAN_HMD )
        .value( "D_PLAN_HMS", D_PLAN_HMS )
        .value( "D_PLAN_HMS_DIL", D_PLAN_HMS_DIL )
        .value( "D_PLAN_HM_SI", D_PLAN_HM_SI )
        .value( "D_PLAN_HM_SI_DIL", D_PLAN_HM_SI_DIL )
        .value( "D_PLAN_HS", D_PLAN_HS )
        .value( "D_PLAN_INCO_UP", D_PLAN_INCO_UP )
        .value( "D_PLAN_INCO_UPG", D_PLAN_INCO_UPG )
        .value( "D_PLAN_INCO_UPO", D_PLAN_INCO_UPO )
        .value( "D_PLAN_SI", D_PLAN_SI )
        .value( "D_PLAN_THH2D", D_PLAN_THH2D )
        .value( "D_PLAN_THH2MD", D_PLAN_THH2MD )
        .value( "D_PLAN_THH2MS", D_PLAN_THH2MS )
        .value( "D_PLAN_THH2S", D_PLAN_THH2S )
        .value( "D_PLAN_THHD", D_PLAN_THHD )
        .value( "D_PLAN_THHMD", D_PLAN_THHMD )
        .value( "D_PLAN_THHMS", D_PLAN_THHMS )
        .value( "D_PLAN_THHS", D_PLAN_THHS )
        .value( "D_PLAN_THM", D_PLAN_THM )
        .value( "D_PLAN_THMD", D_PLAN_THMD )
        .value( "D_PLAN_THMS", D_PLAN_THMS )
        .value( "D_PLAN_THMS_DIL", D_PLAN_THMS_DIL )
        .value( "D_PLAN_THVD", D_PLAN_THVD )
        .value( "D_PLAN_THVS", D_PLAN_THVS )
        .value( "FLUI_STRU", FLUI_STRU )
        .value( "GRILLE_EXCENTRE", GRILLE_EXCENTRE )
        .value( "GRILLE_MEMBRANE", GRILLE_MEMBRANE )
        .value( "MEMBRANE", MEMBRANE )
        .value( "Planar", Planar )
        .value( "PLAN_INTERFACE", PLAN_INTERFACE )
        .value( "PLAN_INTERFACE_S", PLAN_INTERFACE_S )
        .value( "PLAN_JHMS", PLAN_JHMS )
        .value( "PLAN_JOINT", PLAN_JOINT )
        .value( "PLAN_JOINT_HYME", PLAN_JOINT_HYME )
        .value( "POU_D_E", POU_D_E )
        .value( "POU_D_EM", POU_D_EM )
        .value( "POU_D_SQUE", POU_D_SQUE )
        .value( "POU_D_T", POU_D_T )
        .value( "POU_D_TG", POU_D_TG )
        .value( "POU_D_TGM", POU_D_TGM )
        .value( "POU_D_T_GD", POU_D_T_GD )
        .value( "POU_FLUI_STRU", POU_FLUI_STRU )
        .value( "Q4G", Q4G )
        .value( "Q4GG", Q4GG )
        .value( "TUYAU_3M", TUYAU_3M )
        .value( "TUYAU_6M", TUYAU_6M )
        .export_values();

    py::enum_< Formulation >( mod, "Formulation", R"(
Enumeration of formulation.
    )" )
        .value( "NoFormulation", NoFormulation )
        .value( "Linear", Linear )
        .value( "Quadratic", Quadratic )
        .value( "UPPhi", UPPhi )
        .value( "UP", UP )
        .value( "UPsi", UPsi )
        .value( "Dil", Dil )
        .value( "DilInco", DilInco )
        .export_values();
};
