# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
import numpy as np
from code_aster import CA


DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

MA = LIRE_MAILLAGE(FORMAT="ASTER")

MO = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="POU_D_E"))

MATR = DEFI_MATERIAU(ELAS=_F(E=2.0e11, NU=0.3))

CHMAT = AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(TOUT="OUI", MATER=MATR))

CAREL = AFFE_CARA_ELEM(
    MODELE=MO,
    INFO=2,
    POUTRE=(_F(GROUP_MA="G123", SECTION="RECTANGLE", CARA=("HY", "HZ"), VALE=(0.2, 0.1)),),
)
#
CHARG1 = AFFE_CHAR_MECA(
    MODELE=MO,
    DDL_IMPO=_F(GROUP_NO="A", DX=0.0, DY=0.0, DZ=0.0, DRX=0.0, DRY=0.0, DRZ=0.0),
    FORCE_NODALE=_F(
        GROUP_NO="B", FX=5.0e08, FY=10.0e08, FZ=15.0e08, MX=20.0e08, MY=25.0e08, MZ=30.0e08
    ),
)

MEST1 = MECA_STATIQUE(MODELE=MO, CHAM_MATER=CHMAT, CARA_ELEM=CAREL, EXCIT=_F(CHARGE=CHARG1))

MEST1 = CALC_CHAMP(
    reuse=MEST1, RESULTAT=MEST1, CONTRAINTE=("EFGE_ELNO", "EFGE_ELGA"), FORCE=("REAC_NODA",)
)
# IMPR_RESU(FORMAT='RESULTAT',RESU=_F(RESULTAT=MEST1,NOM_CHAM=('EFGE_ELNO','REAC_NODA',),),)

# ==================================================================================================
# Le repère utilisateur est le repère local : EFGE_ELNO inchangé
RESU01 = MODI_REPERE(
    RESULTAT=MEST1,
    TOUT_ORDRE="OUI",
    MODI_CHAM=(_F(NOM_CHAM="EFGE_ELNO", TYPE_CHAM="1D_GENE"),),
    REPERE="UTILISATEUR",
    AFFE=_F(VECT_X=(1.0, 1.0, 1.0), VECT_Y=(-1.0, 1.0, 0.0), TOUT="OUI"),
    INFO=1,
)
#
EFGE_ELNO = {}
REAC_NODA = {}
EFGE_ELNO["R1_local"] = {
    "N": 1.73205080756894e09,
    "VY": 3.53553390593309e08,
    "VZ": 6.12372435695867e08,
    "MT": 4.33012701892219e09,
    "MFY": -8.71191480820460e08,
    "MFZ": 1.31947921689513e09,
}
EFGE_ELNO["R3_local"] = {
    "N": 1.73205080756891e09,
    "VY": 3.53553390593325e08,
    "VZ": 6.12372435695857e08,
    "MT": 4.33012701892219e09,
    "MFY": 3.53553390593271e08,
    "MFZ": 6.12372435695789e08,
}
REAC_NODA["R1_global"] = {
    "N": -4.99999999999981e08,
    "VY": -1.00000000000003e09,
    "VZ": -1.50000000000009e09,
    "MT": -2.57735026920006e09,
    "MFY": -1.34529946159987e09,
    "MFZ": -3.57735026920007e09,
}
EFGE_ELNO["R3_global"] = {
    "N": 5.0e08,
    "VY": 10.0e08,
    "VZ": 15.0e08,
    "MT": 20.0e08,
    "MFY": 25.0e08,
    "MFZ": 30.0e08,
}

for nom_cmp, valer in EFGE_ELNO["R1_local"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU01,
                GROUP_MA="S12",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=valer,
                VALE_REFE=valer,
            ),
        )
    )
for nom_cmp, valer in EFGE_ELNO["R3_local"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU01,
                GROUP_MA="S23",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R3",
                NOM_CMP=nom_cmp,
                VALE_CALC=valer,
                VALE_REFE=valer,
            ),
        )
    )
# ==================================================================================================
# Le repère utilisateur est le repère global :
# EFGE_ELNO = -REAC_NODA    au noeud R1
# EFGE_ELNO =  FORCE_NODALE au noeud R3
RESU02 = MODI_REPERE(
    RESULTAT=MEST1,
    TOUT_ORDRE="OUI",
    MODI_CHAM=(
        _F(NOM_CHAM="EFGE_ELNO", TYPE_CHAM="1D_GENE"),
        _F(NOM_CHAM="EFGE_ELGA", TYPE_CHAM="1D_GENE"),
        _F(NOM_CHAM="SIEF_ELGA", TYPE_CHAM="1D_GENE"),
    ),
    REPERE="UTILISATEUR",
    AFFE=_F(ANGL_NAUT=(0.0, 0.0, 0.0), TOUT="OUI"),
    INFO=1,
)

for nom_cmp, valer in REAC_NODA["R1_global"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02,
                GROUP_MA="S12",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=-valer,
                VALE_REFE=-valer,
            ),
        )
    )

    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02,
                GROUP_MA="S12",
                NOM_CHAM="EFGE_ELGA",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=-valer,
                VALE_REFE=-valer,
            ),
        )
    )

    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02,
                GROUP_MA="S12",
                NOM_CHAM="SIEF_ELGA",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=-valer,
                VALE_REFE=-valer,
            ),
        )
    )

for nom_cmp, valer in EFGE_ELNO["R3_global"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02,
                GROUP_MA="S23",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R3",
                NOM_CMP=nom_cmp,
                VALE_CALC=valer,
                VALE_REFE=valer,
            ),
        )
    )

#

IMPR_RESU(UNITE=80, FORMAT="MED", RESU=_F(RESULTAT=MEST1, NOM_CHAM="EFGE_ELNO"))


MODIS = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="DIS_TR"))

CARELDIS = AFFE_CARA_ELEM(
    MODELE=MODIS,
    INFO=2,
    DISCRET=(_F(GROUP_MA="G123", CARA="K_TR_D_L", VALE=(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)),),
)

MEST1DIS = LIRE_RESU(
    TYPE_RESU="EVOL_ELAS",
    FORMAT="MED",
    MODELE=MODIS,
    UNITE=80,
    TOUT_ORDRE="OUI",
    CHAM_MATER=CHMAT,
    CARA_ELEM=CARELDIS,
    # COMPORTEMENT=(
    # _F(GROUP_MA="CARR1", RELATION="VMIS_ISOT_LINE"),
    # _F(GROUP_MA="CARR2", RELATION="VMIS_CINE_LINE"),
    # ),
    FORMAT_MED=(_F(NOM_CHAM_MED="MEST1___EFGE_ELNO", NOM_CHAM="EFGE_ELNO"),),
)


RESU02DIS = MODI_REPERE(
    RESULTAT=MEST1DIS,
    TOUT_ORDRE="OUI",
    MODI_CHAM=(_F(NOM_CHAM="EFGE_ELNO", TYPE_CHAM="1D_GENE"),),
    REPERE="UTILISATEUR",
    AFFE=_F(ANGL_NAUT=(0.0, 0.0, 0.0), TOUT="OUI"),
    INFO=1,
)

for nom_cmp, valer in REAC_NODA["R1_global"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02DIS,
                GROUP_MA="S12",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=-valer,
                VALE_REFE=-valer,
            ),
        )
    )

for nom_cmp, valer in EFGE_ELNO["R3_global"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU02DIS,
                GROUP_MA="S23",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R3",
                NOM_CMP=nom_cmp,
                VALE_CALC=valer,
                VALE_REFE=valer,
            ),
        )
    )


# Validation de VECT_3D à 6 composantes pour un champ aux noeuds (translation et rotation)
# on compare les résultats avec des champs à 3 composantes.

# On crée des champs de déplacement à 3 composantes uniquement et on y affecte les valeurs
# pour l'un des translations pour l'autre des rotations.
MODIS = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="DIS_T"))

TABD = CREA_TABLE(
    RESU=_F(RESULTAT=MEST1, NOM_CHAM="DEPL", NUME_ORDRE=1, NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI")
)
TABDR = CREA_TABLE(
    RESU=_F(
        RESULTAT=MEST1, NOM_CHAM="DEPL", NUME_ORDRE=1, NOM_CMP=("DRX", "DRY", "DRZ"), TOUT="OUI"
    )
)

TABD = CALC_TABLE(
    TABLE=TABD, reuse=TABD, ACTION=(_F(OPERATION="EXTR", NOM_PARA=("NOEUD", "DX", "DY", "DZ")),)
)

TABDR = CALC_TABLE(
    TABLE=TABDR,
    reuse=TABDR,
    ACTION=(
        _F(OPERATION="RENOMME", NOM_PARA=("DRX", "DX")),
        _F(OPERATION="RENOMME", NOM_PARA=("DRY", "DY")),
        _F(OPERATION="RENOMME", NOM_PARA=("DRZ", "DZ")),
        _F(OPERATION="EXTR", NOM_PARA=("NOEUD", "DX", "DY", "DZ")),
    ),
)

CHD = CREA_CHAMP(OPERATION="EXTR", TABLE=TABD, MODELE=MODIS, TYPE_CHAM="NOEU_DEPL_R", MAILLAGE=MA)
CHDR = CREA_CHAMP(OPERATION="EXTR", TABLE=TABDR, MODELE=MODIS, TYPE_CHAM="NOEU_DEPL_R", MAILLAGE=MA)

RESUD = CREA_RESU(
    OPERATION="AFFE", TYPE_RESU="EVOL_ELAS", AFFE=_F(NOM_CHAM="DEPL", CHAM_GD=CHD, INST=1)
)

RESUDR = CREA_RESU(
    OPERATION="AFFE", TYPE_RESU="EVOL_ELAS", AFFE=_F(NOM_CHAM="DEPL", CHAM_GD=CHDR, INST=1)
)


RESU01TRANS = MODI_REPERE(
    RESULTAT=RESUD,
    INST=1,
    MODI_CHAM=(_F(NOM_CHAM="DEPL", TYPE_CHAM="VECT_3D"),),
    REPERE="UTILISATEUR",
    AFFE=_F(VECT_X=(1.0, 1.0, 1.0), VECT_Y=(-1.0, 1.0, 0.0), TOUT="OUI"),
    INFO=1,
)

RESU01ROT = MODI_REPERE(
    RESULTAT=RESUDR,
    NUME_ORDRE=1,
    MODI_CHAM=(_F(NOM_CHAM="DEPL", TYPE_CHAM="VECT_3D"),),
    REPERE="UTILISATEUR",
    AFFE=_F(VECT_X=(1.0, 1.0, 1.0), VECT_Y=(-1.0, 1.0, 0.0), TOUT="OUI"),
    INFO=1,
)

RESU01TOUT = MODI_REPERE(
    RESULTAT=MEST1,
    NUME_ORDRE=1,
    MODI_CHAM=(
        _F(NOM_CHAM="DEPL", TYPE_CHAM="VECT_3D"),
        _F(NOM_CHAM="REAC_NODA", TYPE_CHAM="VECT_3D"),
    ),
    REPERE="UTILISATEUR",
    AFFE=_F(VECT_X=(1.0, 1.0, 1.0), VECT_Y=(-1.0, 1.0, 0.0), TOUT="OUI"),
    INFO=1,
)

TABTRANS = CREA_TABLE(
    RESU=_F(RESULTAT=RESU01TRANS, INST=1, TOUT="OUI", NOM_CHAM="DEPL", TOUT_CMP="OUI")
)
TABROT = CREA_TABLE(
    RESU=_F(RESULTAT=RESU01ROT, INST=1, TOUT="OUI", NOM_CHAM="DEPL", TOUT_CMP="OUI")
)
TABTOUT = CREA_TABLE(
    RESU=_F(RESULTAT=RESU01TOUT, NUME_ORDRE=1, TOUT="OUI", NOM_CHAM="DEPL", TOUT_CMP="OUI")
)

TABTRANS = CALC_TABLE(
    reuse=TABTRANS,
    TABLE=TABTRANS,
    ACTION=_F(OPERATION="EXTR", NOM_PARA=("NOEUD", "DX", "DY", "DZ")),
)
TABROT = CALC_TABLE(
    reuse=TABROT, TABLE=TABROT, ACTION=_F(OPERATION="EXTR", NOM_PARA=("NOEUD", "DX", "DY", "DZ"))
)

TABROT = CALC_TABLE(
    TABLE=TABROT,
    reuse=TABROT,
    ACTION=(
        _F(OPERATION="RENOMME", NOM_PARA=("DX", "DRX")),
        _F(OPERATION="RENOMME", NOM_PARA=("DY", "DRY")),
        _F(OPERATION="RENOMME", NOM_PARA=("DZ", "DRZ")),
    ),
)

TABTOUT = CALC_TABLE(
    reuse=TABTOUT,
    TABLE=TABTOUT,
    ACTION=_F(OPERATION="EXTR", NOM_PARA=("NOEUD", "DX", "DY", "DZ", "DRX", "DRY", "DRZ")),
)

# IMPR_TABLE(UNITE=6, TABLE=TABTRANS)
# IMPR_TABLE(UNITE=6, TABLE=TABTOUT)


TABTOUTREF = CALC_TABLE(
    TABLE=TABTRANS,
    ACTION=(
        _F(OPERATION="COMB", TABLE=TABROT, NOM_PARA=("NOEUD")),
        _F(OPERATION="RENOMME", NOM_PARA=("DX", "DXREF")),
        _F(OPERATION="RENOMME", NOM_PARA=("DY", "DYREF")),
        _F(OPERATION="RENOMME", NOM_PARA=("DZ", "DZREF")),
        _F(OPERATION="RENOMME", NOM_PARA=("DRX", "DRXREF")),
        _F(OPERATION="RENOMME", NOM_PARA=("DRY", "DRYREF")),
        _F(OPERATION="RENOMME", NOM_PARA=("DRZ", "DRZREF")),
        _F(OPERATION="COMB", TABLE=TABTOUT, NOM_PARA=("NOEUD")),
    ),
)

F = FORMULE(
    VALE="(DXREF-DX)**2+(DYREF-DY)**2+(DZREF-DZ)**2+(DRXREF-DRX)**2+(DRYREF-DRY)**2+(DRZREF-DRZ)**2",
    NOM_PARA=(
        "DX",
        "DY",
        "DZ",
        "DRX",
        "DRY",
        "DRZ",
        "DXREF",
        "DYREF",
        "DZREF",
        "DRXREF",
        "DRYREF",
        "DRZREF",
    ),
)


TABTOUTREF = CALC_TABLE(
    reuse=TABTOUTREF, TABLE=TABTOUTREF, ACTION=(_F(OPERATION="OPER", FORMULE=F, NOM_PARA="DIFF"),)
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC=0,
    VALE_REFE=0,
    NOM_PARA="DIFF",
    TABLE=TABTOUTREF,
    CRITERE="ABSOLU",
    TYPE_TEST="MAX",
    PRECISION=1e-6,
)


RESU03 = MODI_REPERE(
    RESULTAT=MEST1,
    reuse=MEST1,
    TOUT_ORDRE="OUI",
    MODI_CHAM=(_F(NOM_CHAM="EFGE_ELNO", NOM_CHAM_RESU="EGRU_ELNO", TYPE_CHAM="1D_GENE"),),
    REPERE="UTILISATEUR",
    AFFE=_F(ANGL_NAUT=(0.0, 0.0, 0.0), TOUT="OUI"),
    INFO=1,
)


for nom_cmp, valer in REAC_NODA["R1_global"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU03,
                GROUP_MA="S12",
                NOM_CHAM="EGRU_ELNO",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=-valer,
                VALE_REFE=-valer,
            ),
        )
    )

for nom_cmp, valer in EFGE_ELNO["R1_local"].items():
    TEST_RESU(
        RESU=(
            _F(
                NUME_ORDRE=1,
                REFERENCE="AUTRE_ASTER",
                RESULTAT=RESU03,
                GROUP_MA="S12",
                NOM_CHAM="EFGE_ELNO",
                GROUP_NO="R1",
                NOM_CMP=nom_cmp,
                VALE_CALC=valer,
                VALE_REFE=valer,
            ),
        )
    )


FIN()
