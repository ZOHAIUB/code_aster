# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: sarah.plessis at edf.fr
#
#
# ----------------------------------------------------------------------
#    Cas test sslv135d : cube 3D
#                        Essai de chargement cyclique bi-axial
#                        critere en formule
# ----------------------------------------------------------------------
#        Unites : Newton , Millimetre , Seconde (N,MM,S,->Mpa)
# ----------------------------------------------------------------------
#
#               y       a
#               I<------------->                     a = 10 mm
#                     Face1                                    2
#                   (dessus)                         S = 100 mm
#               P1              P2
#               o--------------o
#              /I             /I
#        P5   / I        P6  / I
#            o--+-----------o  I
#            I  I   Face5   I  I  Face4
#  Face3     I  I (derri.)  I  I (cote d.)
# (cote g.)  I  I           I  I
#            I  I  P3       I  I P4
#            I  o-----------I--o      - x
#            I /            I /
#         P7 I/          P8 I/
#            o--------------o
#
#          /       Face2
#         z      (dessous)
#
#
#    CHARGEMENT     FX(T) <=> +      FY(T) <=> x
#
#            I
#            I                 x
#            I
#   1.0E+4 N I     +        x     x
#            I  +     +        3s     4s
#           -I-----I-----I-----I-----I-----> T
#            I    1s    2s  +     +
#            I  x     x        +
#            I
#  -2.0E+4 N I     x
#            I
#
#
# L'AMPLITUDE DE FX(T) = 2.0E+4 N, SA VALEUR MOYENNE = 0.0
# L'AMPLITUDE DE FY(T) = 4.0E+4 N, SA VALEUR MOYENNE = 0.0
# A L'INSTANT 0S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 1S, FX(T) = 1.0E+4 N  ET  FY(T) = -2.0E+4 N
# A L'INSTANT 2S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 3S, FX(T) = -1.0E+4 N  ET  FY(T) = 2.0E+4 N
# A L'INSTANT 4S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
#
# ----------------------------------------------------------------------
#
# DANS CE CAS TEST NOUS TESTONS LE CRITERE EN FORMULE AUX POINTS DE GAUSS
# ET AUX NOEUDS
# ----------------------------------------------------------------------
#
#
#
DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"), IGNORE_ALARM=("PREPOST4_27")),

CUBE = LIRE_MAILLAGE(FORMAT="MED")

CUBE = DEFI_GROUP(
    reuse=CUBE,
    MAILLAGE=CUBE,
    CREA_GROUP_MA=(_F(NOM="M60", MAILLE="M270"),),
    CREA_GROUP_NO=(_F(NOM="N1", NOEUD="N1"),),
)

CUBE = DEFI_GROUP(
    reuse=CUBE,
    ALARME="OUI",
    CREA_GROUP_NO=(
        _F(GROUP_MA="FACE1", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE2", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE3", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE4", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE5", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE6", CRIT_NOEUD="TOUS"),
    ),
    MAILLAGE=CUBE,
)

CUBE = DEFI_GROUP(
    reuse=CUBE,
    ALARME="OUI",
    CREA_GROUP_MA=(
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE1", NOM="FACE1_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE2", NOM="FACE2_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE3", NOM="FACE3_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE4", NOM="FACE4_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE5", NOM="FACE5_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE6", NOM="FACE6_3D"),
    ),
    MAILLAGE=CUBE,
)

WHOL = DEFI_FONCTION(
    NOM_PARA="SIGM",
    INTERPOL="LOG",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
    VALE=(
        138.0,
        1000000.0,
        152.0,
        500000.0,
        165.0,
        200000.0,
        180.0,
        100000.0,
        200.0,
        50000.0,
        250.0,
        20000.0,
        295.0,
        12000.0,
        305.0,
        10000.0,
        340.0,
        5000.0,
        430.0,
        2000.0,
        540.0,
        1000.0,
        690.0,
        500.0,
        930.0,
        200.0,
        1210.0,
        100.0,
        1590.0,
        50.0,
        2210.0,
        20.0,
        2900.0,
        10.0,
    ),
)

#               _____________________________
#              I                             I
#              I     AMPLITUDE CONSTANTE     I
#              I_____________________________I
#

COEF = DEFI_FONCTION(
    NOM_PARA="INST",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
    VALE=(0.0, 0.0, 1.0, 100.0, 2.0, 0.0, 3.0, -100.0, 4.0, 0.0, 5.0, 100.0, 6.0, 0.0),
)

ACIER = DEFI_MATERIAU(
    ELAS=_F(E=200000.0, NU=0.3, ALPHA=0.0),
    ECRO_LINE=_F(SY=150, D_SIGM_EPSI=50000),
    FATIGUE=_F(WOHLER=WHOL),
)

LINST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=5, NOMBRE=20))

TROISD = AFFE_MODELE(MAILLAGE=CUBE, AFFE=_F(PHENOMENE="MECANIQUE", MODELISATION="3D", TOUT="OUI"))

MAT = AFFE_MATERIAU(MAILLAGE=CUBE, AFFE=_F(TOUT="OUI", MATER=ACIER))

# CHARGEMENT SELON LES 2 AXES X ET Y
# ----------------------------------

TR_CS = AFFE_CHAR_MECA(
    MODELE=TROISD,
    FACE_IMPO=(_F(GROUP_MA="FACE3", DX=0.0), _F(GROUP_MA="FACE2", DY=0.0)),
    DDL_IMPO=(_F(GROUP_NO="P3", DZ=0.0)),
    FORCE_FACE=(
        _F(GROUP_MA="FACE4", FX=2.0),
        #                          _F( GROUP_MA= 'FACE1', FY=-2.)
    ),
)

# CALCUL AVEC STAT_NON_LINE
# -------------------------

SOL_NL = STAT_NON_LINE(
    TITRE="TEST TRACTION-COMPRESSION ALTERNEE - PLAN CRITIQUE",
    MODELE=TROISD,
    CHAM_MATER=MAT,
    EXCIT=_F(CHARGE=TR_CS, FONC_MULT=COEF, TYPE_CHARGE="FIXE_CSTE"),
    COMPORTEMENT=_F(RELATION="VMIS_CINE_LINE", DEFORMATION="PETIT", TOUT="OUI"),
    INCREMENT=_F(LIST_INST=LINST),
    NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
    CONVERGENCE=_F(
        RESI_REFE_RELA=1.0,
        SIGM_REFE=4.8e-3,
        #   RESI_GLOB_RELA = 1.E-8,
        ITER_GLOB_MAXI=50,
    ),
    SOLVEUR=_F(METHODE="MULT_FRONT"),
)

SOL_NL = CALC_CHAMP(
    reuse=SOL_NL,
    RESULTAT=SOL_NL,
    CONTRAINTE=("SIGM_ELNO",),
    DEFORMATION=("EPSI_ELGA", "EPSI_ELNO", "EPSP_ELGA", "EPSP_ELNO"),
)

SOL_NL = CALC_CHAMP(
    reuse=SOL_NL,
    RESULTAT=SOL_NL,
    GROUP_MA=("FACE1_3D", "FACE2_3D", "FACE3_3D"),
    CONTRAINTE="SIGM_NOEU",
    DEFORMATION=("EPSI_NOEU", "EPSP_NOEU"),
)

TABSIGM = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="SIGMA_XX",
        GROUP_NO="N1",
        RESULTAT=SOL_NL,
        TOUT_ORDRE="OUI",
        TOUT_CMP="OUI",
        NOM_CHAM="SIGM_NOEU",
        OPERATION="EXTRACTION",
    )
)
IMPR_TABLE(TABLE=TABSIGM)

TABEPS = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="EPS_XX",
        GROUP_NO="N1",
        RESULTAT=SOL_NL,
        TOUT_ORDRE="OUI",
        TOUT_CMP="OUI",
        NOM_CHAM="EPSI_NOEU",
        OPERATION="EXTRACTION",
    )
)
IMPR_TABLE(TABLE=TABEPS)

TABEPSP = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="EPSP_XX",
        GROUP_NO="N1",
        RESULTAT=SOL_NL,
        TOUT_ORDRE="OUI",
        TOUT_CMP="OUI",
        NOM_CHAM="EPSP_NOEU",
        OPERATION="EXTRACTION",
    )
)
IMPR_TABLE(TABLE=TABEPSP)

NBPR = 14
CRIT = [None] * NBPR
FATN = [None] * NBPR
FATM = [None] * NBPR

CRIT[0] = FORMULE(NOM_PARA="DEPSPE", VALE="""DEPSPE""")

CRIT[1] = FORMULE(NOM_PARA="EPSPR1", VALE="""EPSPR1""")

CRIT[2] = FORMULE(NOM_PARA="SIGNM1", VALE="""SIGNM1""")

CRIT[3] = FORMULE(NOM_PARA="DENDIE", VALE="""DENDIE""")

CRIT[4] = FORMULE(NOM_PARA="APHYDR", VALE="""APHYDR""")
CRIT[5] = FORMULE(NOM_PARA="DENDIS", VALE="""DENDIS""")

CRIT[6] = FORMULE(NOM_PARA="DSIGEQ", VALE="""DSIGEQ""")

CRIT[7] = FORMULE(NOM_PARA="SIGPR1", VALE="""SIGPR1""")

CRIT[8] = FORMULE(NOM_PARA="EPSNM1", VALE="""EPSNM1""")

CRIT[9] = FORMULE(NOM_PARA="INVA2S", VALE="""INVA2S""")

CRIT[10] = FORMULE(NOM_PARA="DSITRE", VALE="""DSITRE""")

CRIT[11] = FORMULE(NOM_PARA="DEPTRE", VALE="""DEPTRE""")

CRIT[12] = FORMULE(NOM_PARA="EPSPAC", VALE="""EPSPAC""")

CRIT[13] = FORMULE(NOM_PARA="DEPSEE", VALE="""DEPSEE""")

RESU = [
    7.5e-4,
    7.625e-4,
    200,
    0.17333333,
    66.66666,
    0.45,
    200,
    100,
    1.75e-3,
    1.616666e-3,
    50,
    6.0625e-4,
    3.6742346e-3,
    0.00086666666,
]

# for i in range(2,3) :

for i in range(NBPR):
    #
    # TEST CRITERE FORMULE AVEC 'DOMA_NOEUD',
    #########################################NOEUD
    FATN[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT,
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i],
        COURBE_GRD_VIE="WOHLER",
        INST_INIT_CYCL=1.0,
        INST_CRIT="RELATIF",
    )

    TEST_RESU(CHAM_NO=(_F(CHAM_GD=FATN[i], NOM_CMP="SIGEQ1", GROUP_NO="N1", VALE_CALC=RESU[i]),))

    # TEST CRITERE FORMULE AVEC 'DOMA_ELGA',
    #########################################NOEUD
    FATM[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        MAILLAGE=CUBE,
        GROUP_MA=("CUBE"),
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i],
        COURBE_GRD_VIE="WOHLER",
        INST_INIT_CYCL=1.0,
        INST_CRIT="ABSOLU",
        PRECISION=1.0e-4,
    )

    TEST_RESU(
        CHAM_ELEM=(
            _F(CHAM_GD=FATM[i], NOM_CMP="SIGEQ1", GROUP_MA="M60", POINT=3, VALE_CALC=RESU[i]),
        )
    )

FIN()
