# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

import numpy as np

import libaster


def int_fct(x, f):
    """Retourne l'intégrale de la fonction discrétisée sur les x
    (règle des trapèzes)"""
    assert len(x) == len(f)
    n = len(f) - 1
    I = 0
    for i in range(n):
        I = I + (x[i + 1] - x[i]) * (f[i + 1] + f[i]) / 2.0
    return I


cote_plaque = 100
u_impo = cote_plaque * 0.001

MA = LIRE_MAILLAGE(FORMAT="MED")

MO = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(MODELISATION="AXIS", PHENOMENE="MECANIQUE", TOUT="OUI"))

# module d'Young Alliage 600 à 350°C
E_A600 = 200000.0
m = 4.26
n = 3.77


def k1_T(T):
    """fonction k1 de T
    T = température en °C"""
    TK = T + 273.15
    return 17.67 * np.exp(47500 / (8.31 * TK))


# Données expérimentales
T_exp = 350.0  # °C
Sigma_exp = 450.0  # MPa
tf_exp = 2284.0  # h

k = k1_T(T_exp)

# Identification Xmat et beta sur l'essai 1d
Sigma_eq = Sigma_exp
Sigma_m = Sigma_exp
Xmat = (1.0 / 3) ** (n / m + 1) * (Sigma_eq / k) ** n * tf_exp

x = np.linspace(0.0, 1.0, 1000)
beta = 2 / 3.0 * (int_fct(x, x ** (n / m) * (1 - x) ** n) / Xmat) ** (m / (n + m))

N_CSTE = DEFI_CONSTANTE(VALE=n)

UN_SUR_M_CSTE = DEFI_CONSTANTE(VALE=1.0 / m)

UN_SUR_K_F = FORMULE(NOM_PARA="NEUT1", VALE="1/(k*(1-NEUT1))", k=k)

A600 = DEFI_MATERIAU(
    ELAS=_F(E=E_A600, NU=0.3), LEMAITRE_FO=_F(N=N_CSTE, UN_SUR_K=UN_SUR_K_F, UN_SUR_M=UN_SUR_M_CSTE)
)

# Champs de concentration en agent corrosif
ch_init = 0.0
CHAM_CH = CREA_CHAMP(
    TYPE_CHAM="NOEU_NEUT_R",
    MODELE=MO,
    OPERATION="AFFE",
    AFFE=(_F(TOUT="OUI", NOM_CMP="X1", VALE=0.0), _F(GROUP_MA="water", NOM_CMP="X1", VALE=ch_init)),
)

CHMAT = AFFE_MATERIAU(
    MAILLAGE=MA, AFFE=_F(TOUT="OUI", MATER=A600), AFFE_VARC=_F(NOM_VARC="NEUT1", CHAM_GD=CHAM_CH)
)

# Blocage des modes rigides
CH_BLOC = AFFE_CHAR_MECA(
    MODELE=MO, DDL_IMPO=(_F(GROUP_MA="gauche", DX=0.0), _F(GROUP_NO="A", DY=0.0))
)

# Chargement en déplacemen imposé
CH_CHAR = AFFE_CHAR_MECA(MODELE=MO, FACE_IMPO=_F(GROUP_MA="droite", DNOR=u_impo))

RAMPE = DEFI_FONCTION(NOM_PARA="INST", PROL_DROITE="CONSTANT", VALE=(0.0, 0.0, 1.0, 1.0))

# calcul jusqu'à 1000 heures
L_INST = DEFI_LIST_REEL(
    DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=1, NOMBRE=10), _F(JUSQU_A=1000, NOMBRE=100))
)

RESU = STAT_NON_LINE(
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=CH_BLOC), _F(CHARGE=CH_CHAR, FONC_MULT=RAMPE)),
    COMPORTEMENT=_F(RELATION="LEMAITRE", ITER_INTE_MAXI=100),
    INCREMENT=_F(LIST_INST=L_INST),
    SOLVEUR=_F(METHODE="MUMPS"),
    CONVERGENCE=_F(RESI_REFE_RELA=1.0e-3, SIGM_REFE=400),
)

RESU = CALC_CHAMP(reuse=RESU, RESULTAT=RESU, CONTRAINTE="SIEF_NOEU", CRITERES="SIEQ_NOEU")

TAB_SIG = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="centre trou",
        GROUP_NO="C",
        RESULTAT=RESU,
        NOM_CMP=("VMIS", "TRIAX"),
        NOM_CHAM="SIEQ_NOEU",
        OPERATION="EXTRACTION",
    ),
    TITRE="Contrainte Von Mises au centre du trou",
)

IMPR_TABLE(TABLE=TAB_SIG, UNITE=81, NOM_PARA=("INST", "VMIS", "TRIAX"))


# Méthode des indices (méthode de référence)
# ------------------------------------------

T_exp = 350
I_T = 9.49e15 * np.exp(-22000 / (273.15 + T_exp))
I_M = 1
ftf_indice = FORMULE(
    VALE="""10000/(I_T*I_M* 2.44e-11 * PRIN_3**4)""", I_T=I_T, I_M=I_M, NOM_PARA=["PRIN_3"]
)

RESU = CALC_CHAMP(
    reuse=RESU,
    RESULTAT=RESU,
    INST=1.0,
    GROUP_MA="water",
    CHAM_UTIL=(_F(NUME_CHAM_RESU=3, NOM_CHAM="SIEQ_NOEU", FORMULE=ftf_indice),),
)

IMPR_RESU(FORMAT="MED", UNITE=80, RESU=_F(RESULTAT=RESU))

MA = DEFI_GROUP(reuse=MA, MAILLAGE=MA, CREA_GROUP_NO=_F(GROUP_MA="water"))

# tf modèle des indices le long de la ligne 'water'
TAB_IND = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="Modèle des indices",
        GROUP_NO="water",
        RESULTAT=RESU,
        INST=1,
        TOUT_CMP="OUI",
        NOM_CHAM="UT03_NOEU",
        OPERATION="EXTRACTION",
    ),
    TITRE="tf modèle indices",
)

IMPR_TABLE(
    TABLE=TAB_IND, NOM_PARA=("COOR_X", "X1"), TRI=_F(NOM_PARA="COOR_X", ORDRE="CROISSANT"), UNITE=82
)


# Méthode Baby
# ------------

# Résolution du système connaissant l'évolution de sigmaVM et trSigma

zero_init = 1e-5

inst = np.array(RESU.LIST_VARI_ACCES()["INST"])
inst = inst[inst >= 1]  # on ne calcule qu'à partir du chargement installé
nbinst = len(inst)

# Pour récupérer le nombre de noeuds (y'a surement plus simple)
TF_BABY_BID = CREA_CHAMP(
    TYPE_CHAM="NOEU_SIEF_R", OPERATION="EXTR", RESULTAT=RESU, NOM_CHAM="SIEQ_NOEU", INST=0.0
)
nbno = np.array(TF_BABY_BID.getValues(cmps=["VMIS"])).size

# initialisations
ch = [0] * nbinst
p = [0] * nbinst
ch_init = np.full(nbno, zero_init)
ch[0] = np.ma.masked_array(ch_init)

p[0] = np.full(nbno, zero_init)
tf = np.full(nbno, np.nan)

# boucle sur les instants
i = 0
for i in range(len(inst) - 1):
    dt = inst[i + 1] - inst[i]
    k2 = 1 - ch[i]
    SIEQ_i = CREA_CHAMP(
        TYPE_CHAM="NOEU_SIEF_R", OPERATION="EXTR", RESULTAT=RESU, NOM_CHAM="SIEQ_NOEU", INST=inst[i]
    )
    vmis_i = np.array(SIEQ_i.getValues(cmps=["VMIS"]))
    trsig_i = np.array(SIEQ_i.getValues(cmps=["TRSIG"]))

    pder = (vmis_i / (k * k2)) ** n * p[i] ** (-n / m)
    p[i + 1] = p[i] + dt * pder
    chder = 3 / 2.0 * beta * pder * (trsig_i / 3) / vmis_i
    ch[i + 1] = ch[i] + dt * chder

    (id_amor,) = np.where(ch[i + 1] > 1)
    ch[i + 1][id_amor] = np.nan
    ch[i + 1][id_amor] = np.ma.masked  # pour ne plus maj les noeuds amorcés

    tf[id_amor] = inst[i + 1]

# CHAM_NO vide
TF_BABY = CREA_CHAMP(
    OPERATION="AFFE",
    TYPE_CHAM="NOEU_NEUT_R",
    MAILLAGE=MA,
    AFFE=_F(TOUT="OUI", NOM_CMP="X1", VALE=1e16),
)

TF_BABY.setValues(values=list(tf))

IMPR_RESU(FORMAT="MED", UNITE=80, RESU=_F(CHAM_GD=TF_BABY, GROUP_MA="water"))

# tf modèle Baby le long de la ligne 'water'
TAB_BABY = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="Modèle BaBy",
        GROUP_NO="water",
        CHAM_GD=TF_BABY,
        TOUT_CMP="OUI",
        OPERATION="EXTRACTION",
    ),
    TITRE="tf modèle BaBy",
)

IMPR_TABLE(
    TABLE=TAB_BABY,
    NOM_PARA=("COOR_X", "X1"),
    TRI=_F(NOM_PARA="COOR_X", ORDRE="CROISSANT"),
    UNITE=83,
)

# ----------------------------------------------------------------------
TEST_TABLE(
    TABLE=TAB_IND,
    NOM_PARA="X1",
    FILTRE=_F(NOM_PARA="COOR_X", VALE=0, CRITERE="ABSOLU"),
    VALE_CALC=94.578482261359,
    CRITERE="RELATIF",
)

TEST_TABLE(
    TABLE=TAB_BABY,
    NOM_PARA="X1",
    FILTRE=_F(NOM_PARA="COOR_X", VALE=0, CRITERE="ABSOLU"),
    VALE_CALC=20.98,
    CRITERE="RELATIF",
)

FIN()
