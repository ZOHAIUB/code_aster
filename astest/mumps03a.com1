# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2023 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#########################################################################
# VALIDATION DU SOLVEUR MUMPS EN COMPLEXE ET AVEC DES CMDES ECLATEES EN
# MODULANT:
#     - POUR LA PRISE EN COMPTE DES DIRICHLETS (AFFE_CHAR_CINE OU PAS)
#     - LES RENUMEROTEURS UTILISES (METIS, SCOTCH, PORD, AMD, AMF, QAMD).
#
# PARALLELE: VALEUR CONSEILLEE 2 PROCS
#   RQ. 3 ALARMES NORMALES SI COMPILE AVEC MUMPS5.0.2, 2 AVEC MUMPS5.1.0
#########################################################################

POURSUITE(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))

# 3EME CALCUL AVEC MUMPS AVEC CHAR_CINE + METIS + TOUTES LES VALEURS D'ACCELERATIONS
# ------------------------------------------------------------------------------------
info = 2
MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS35, MATR_ASSE=MATAS35, METHODE="MUMPS", RENUM="METIS", ACCELERATION="AUTO", INFO=info
)
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35
del MATAS35

MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS35, MATR_ASSE=MATAS35, METHODE="MUMPS", RENUM="METIS", ACCELERATION="FR", INFO=info
)
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35
del MATAS35
MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS35, MATR_ASSE=MATAS35, METHODE="MUMPS", RENUM="METIS", ACCELERATION="FR+", INFO=info
)
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35
del MATAS35
MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS35,
    MATR_ASSE=MATAS35,
    METHODE="MUMPS",
    RENUM="METIS",
    ACCELERATION="LR",
    LOW_RANK_SEUIL=1.0e-9,
    INFO=info,
)
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35
del MATAS35

MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS35,
    MATR_ASSE=MATAS35,
    METHODE="MUMPS",
    RENUM="METIS",
    ACCELERATION="LR+",
    LOW_RANK_SEUIL=1.0e-9,
    INFO=info,
)
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35
del MATAS35

FIN()
