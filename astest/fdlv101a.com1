# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------


from code_aster.Commands import *
from code_aster import CA

POURSUITE(CODE="OUI", DEBUG=_F(SDVERI="OUI"))


test = CA.TestCase()

test.assertEqual(NUSTR.getComponents(), ["DX", "DY", "LAGR:DY"])
for row in NUSTR.getLagrangeDOFs():
    test.assertEqual(NUSTR.getComponentFromDOF(row), "LAGR:DY")
    test.assertFalse(NUSTR.isPhysicalDOF(row))
for row in NUSTR.getPhysicalDOFs():
    test.assertTrue(NUSTR.getComponentFromDOF(row) in ["DX", "DY"])
    test.assertTrue(NUSTR.isPhysicalDOF(row))
test.assertEqual(NUSTR.getNodeFromDOF(0), 0)
test.assertEqual(NUSTR.getDOFFromNodeAndComponent(0, "DX"), 1)
test.assertEqual(len(NUSTR.getLagrangeDOFs()), 512)
test.assertEqual(len(NUSTR.getPhysicalDOFs()), 514)
test.assertTrue(NUSTR.useLagrangeDOF())
test.assertFalse(NUSTR.useSingleLagrangeDOF())
test.assertEqual(NUSTR.getPhysicalQuantity(), "DEPL_R")

test.assertRaises(IndexError, lambda: list(NUSTR.getComponentFromDOF(-1)))
test.assertRaises(IndexError, lambda: list(NUSTR.getComponentFromDOF(999999)))
test.assertRaises(RuntimeError, lambda: list(NUSTR.getDOFFromNodeAndComponent(0, "XXXXX")))
test.assertRaises(RuntimeError, lambda: list(NUSTR.getDOFFromNodeAndComponent(999999, "DX")))

test.printSummary()

FIN()
