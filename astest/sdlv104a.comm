# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))


# -- Mise en donnees initiale -- #

Tmax = 1 / 100.0  # -- demi largeur de la duree d'impact


mesh = LIRE_MAILLAGE(UNITE=20)

model = AFFE_MODELE(
    AFFE=_F(GROUP_MA=("Beam",), MODELISATION=("3D",), PHENOMENE="MECANIQUE"), MAILLAGE=mesh
)


mater = DEFI_MATERIAU(ELAS=_F(E=210000000000.0, NU=0.3, RHO=7800.0))

fieldmat = AFFE_MATERIAU(AFFE=_F(GROUP_MA=("Beam",), MATER=(mater,)), MODELE=model)

# -- vecteur d'instants pour l'integration temporelle
Dt = 0.00001
Tfin = 2
temps = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=Tfin, PAS=Dt))

t_arch = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=Tfin, PAS=0.0001))


# -- Conditions aux limites du "vrai probleme"
CondLim = AFFE_CHAR_MECA(DDL_IMPO=(_F(DX=0.0, DY=0.0, DZ=0.0, GROUP_NO=("BC",)),), MODELE=model)


# -- Conditions aux limites du "probleme reduit",
# --    pour tester la concatenation des vecteurs
# --    et l'orthonormalisation des bases

load = AFFE_CHAR_MECA(
    DDL_IMPO=(
        _F(DX=0.0, DY=0.0, DZ=0.0, GROUP_NO=("BC",)),
        _F(DX=0.0, DY=0.0, DZ=0.0, GROUP_NO=("N1", "N2", "N3", "N4")),
    ),
    MODELE=model,
)

# -- Definition du chargement : effort ponctuel
impact = AFFE_CHAR_MECA(FORCE_NODALE=_F(FZ=1000.0, GROUP_NO=("N1",)), MODELE=model)

# -- evolution temporelle de la force
pulse = DEFI_FONCTION(
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
    VALE=(0.0, 0.0, Tmax, 1.0, 2 * Tmax, 0.0),
)


# ------------------------------------------------#
# --                                            --#
# -- Preparation du calcul lineaire transitoire --#
# --                                            --#
# ------------------------------------------------#

ASSEMBLAGE(
    CHAM_MATER=fieldmat,
    CHARGE=(load,),
    MATR_ASSE=(
        _F(MATRICE=CO("MASS"), OPTION="MASS_MECA"),
        _F(MATRICE=CO("RAID"), OPTION="RIGI_MECA"),
    ),
    MODELE=model,
    NUME_DDL=CO("NUME"),
    VECT_ASSE=_F(CHARGE=(impact,), OPTION="CHAR_MECA", VECTEUR=CO("FORC")),
)

modes = CALC_MODES(
    CALC_FREQ=_F(NMAX_FREQ=15),
    MATR_MASS=MASS,
    MATR_RIGI=RAID,
    NORM_MODE=_F(NORME="MASS_GENE"),
    OPTION="PLUS_PETITE",
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
    SOLVEUR_MODAL=_F(COEF_DIM_ESPACE=3, METHODE="SORENSEN"),
)

Stat = MODE_STATIQUE(
    MATR_RIGI=RAID,
    MATR_MASS=MASS,
    MODE_STAT=_F(GROUP_NO=("N1", "N2", "N3", "N4"), AVEC_CMP=("DX", "DY", "DZ")),
)


# ---------------------------------------------------------------#
# --                                                           --#
# -- Construction de differentes bases modales - EQUIVALENTES! --#
# --                                                           --#
# ---------------------------------------------------------------#

# --
# --
# -- Base concatenee - initiale
# --
# --

# --  Fonctionnement témoin sain -----------------------------------------------
BaMo_0 = DEFI_BASE_MODALE(RITZ=(_F(MODE_MECA=(modes, Stat)),), NUME_REF=NUME)

BaMo_1 = DEFI_BASE_MODALE(ORTHO_BASE=_F(BASE=BaMo_0, MATRICE=MASS))
# ------------------------------------------------------------------------------

PROJ_BASE(
    BASE=BaMo_1,
    STOCKAGE="PLEIN",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MASS_GE1"), MATR_ASSE=MASS),
        _F(MATRICE=CO("RAID_GE1"), MATR_ASSE=RAID),
    ),
    VECT_ASSE_GENE=(_F(VECTEUR=CO("Force1"), TYPE_VECT="FORC", VECT_ASSE=FORC),),
)


ResPhys1 = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    EXCIT=_F(FONC_MULT=pulse, VECT_ASSE_GENE=Force1),
    INCREMENT=_F(PAS=Dt, INST_FIN=Tfin),
    ARCHIVAGE=_F(LIST_INST=t_arch),
    MATR_MASS=MASS_GE1,
    MATR_RIGI=RAID_GE1,
    AMOR_MODAL=_F(AMOR_REDUIT=(0.000)),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
)

Tab1 = POST_GENE_PHYS(
    RESU_GENE=ResPhys1, OBSERVATION=_F(NOM_CHAM="DEPL", NOM_CMP="DZ", GROUP_NO="N4")
)


# --
# --
# -- Base concatenee et orthonormee par rapport a la masse
# --
# --

# --  Fonctionnement à tester : appel conduisant à une erreur (issue30350) -----
BaMo_2 = DEFI_BASE_MODALE(RITZ=(_F(MODE_MECA=modes), _F(MODE_INTF=Stat)), ORTHO="OUI", MATRICE=MASS)
# ------------------------------------------------------------------------------


PROJ_BASE(
    BASE=BaMo_2,
    STOCKAGE="PLEIN",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MASS_GE1"), MATR_ASSE=MASS),
        _F(MATRICE=CO("RAID_GE1"), MATR_ASSE=RAID),
    ),
    VECT_ASSE_GENE=(_F(VECTEUR=CO("Force1"), TYPE_VECT="FORC", VECT_ASSE=FORC),),
)


ResPhys2 = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    EXCIT=_F(FONC_MULT=pulse, VECT_ASSE_GENE=Force1),
    INCREMENT=_F(PAS=Dt, INST_FIN=Tfin),
    ARCHIVAGE=_F(LIST_INST=t_arch),
    MATR_MASS=MASS_GE1,
    MATR_RIGI=RAID_GE1,
    AMOR_MODAL=_F(AMOR_REDUIT=(0.000)),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
)


Tab2 = POST_GENE_PHYS(
    RESU_GENE=ResPhys2, OBSERVATION=_F(NOM_CHAM="DEPL", NOM_CMP="DZ", GROUP_NO="N4")
)


# --
# --
# -- Test de Comparaisaon des résultats de DYNA_VIBRA
# -- à partir de deux Bases aux instants t1 et t2
# --
# --


t1 = Tfin / 2
t2 = Tfin


Tab1_t1 = POST_GENE_PHYS(
    RESU_GENE=ResPhys2, OBSERVATION=_F(NOM_CHAM="DEPL", NOM_CMP="DZ", GROUP_NO="N4", INST=t1)
)


Tab1_t2 = POST_GENE_PHYS(
    RESU_GENE=ResPhys1, OBSERVATION=_F(NOM_CHAM="DEPL", NOM_CMP="DZ", GROUP_NO="N4", INST=t2)
)

Res1_dzt1 = Tab1_t1["VALE_R", 1]
Res1_dzt2 = Tab1_t2["VALE_R", 1]


TEST_TABLE(
    TABLE=Tab2,
    NOM_PARA="VALE_R",
    FILTRE=(_F(NOM_PARA="INST", VALE=t1, PRECISION=1e-5)),
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=Res1_dzt1,
    VALE_REFE=Res1_dzt1,
)

TEST_TABLE(
    TABLE=Tab2,
    NOM_PARA="VALE_R",
    FILTRE=(_F(NOM_PARA="INST", VALE=t2, PRECISION=1e-5)),
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=Res1_dzt2,
    VALE_REFE=Res1_dzt2,
)


FIN()
