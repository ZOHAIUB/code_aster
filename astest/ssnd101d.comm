# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ZENER GENERALISE
#
#   Modélisation d'un amortisseur de type MAXWELL (non-linéaire)
#
#          e1      c,a
#      ---=====-----=]---
#
# --------------------------------------------------------------------------------------------------

DEBUT(CODE="OUI")

MAIL = LIRE_MAILLAGE(FORMAT="ASTER")

Zener = DEFI_MATERIAU(
    ELAS=_F(E=1.0, NU=0.3), DIS_VISC=_F(K1=120.0, K2=0.0, UNSUR_K3=0.0, C=1.7, PUIS_ALPHA=0.50)
)

CHMATZ = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=(_F(GROUP_MA=("ZENER01",), MATER=Zener),))

MODELZ = AFFE_MODELE(
    MAILLAGE=MAIL, AFFE=(_F(GROUP_MA=("ZENER01",), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),)
)

# condition aux limites en déplacement
ZERO = DEFI_CONSTANTE(VALE=0.0)


def Sinus(t, freq):
    return sin(2.0 * pi * freq * t)


Freq01 = 5.0
U01 = 0.10
# Le déplacement imposé
Depla01 = FORMULE(
    VALE="U01*Sinus(INST,Freq01)", U01=U01, Sinus=Sinus, Freq01=Freq01, NOM_PARA="INST"
)

CONDZ1 = AFFE_CHAR_MECA_F(
    MODELE=MODELZ,
    DDL_IMPO=(
        _F(GROUP_NO="PZ2", DY=ZERO, DZ=ZERO, DX=Depla01),
        _F(GROUP_NO="PZ1", BLOCAGE=("DEPLACEMENT", "ROTATION")),
    ),
)
#
kbid = 1.0
CARELZ1 = AFFE_CARA_ELEM(
    MODELE=MODELZ,
    DISCRET=(_F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="ZENER01", VALE=(kbid, kbid, kbid)),),
)
# Liste d'instant
TempsMaxi = 1.00
DeltaPas = 4.0e-03

linstS = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=TempsMaxi, PAS=DeltaPas))

RESUZ = STAT_NON_LINE(
    MODELE=MODELZ,
    CHAM_MATER=CHMATZ,
    CARA_ELEM=CARELZ1,
    EXCIT=_F(CHARGE=CONDZ1),
    COMPORTEMENT=(_F(RELATION="DIS_VISC", GROUP_MA="ZENER01"),),
    INCREMENT=_F(LIST_INST=linstS),
    CONVERGENCE=_F(ARRET="OUI", ITER_GLOB_MAXI=50),
    NEWTON=_F(REAC_INCR=1, REAC_ITER=1, MATRICE="TANGENTE"),
)

ResultatZ = [
    (4.000e-03, 1.2533323356430e-02, 1.3901305564654e00),
    (4.800e-02, 9.9802672842827e-02, 1.5399690347096e00),
    (1.000e-01, -1.6539504141266e-16, -2.9840799981192e00),
    (1.360e-01, -9.0482705246602e-02, -2.2555706075403e00),
    (2.040e-01, 1.2533323356431e-02, 2.9999350282465e00),
    (2.480e-01, 9.9802672842827e-02, 1.5401915597398e00),
    (3.040e-01, -1.2533323356431e-02, -2.9999350282852e00),
    (3.480e-01, -9.9802672842827e-02, -1.5401915597074e00),
    (4.040e-01, 1.2533323356431e-02, 2.9999350282970e00),
    (5.000e-01, -1.0045133128078e-15, -2.9840798812719e00),
    (5.600e-01, -9.5105651629515e-02, -4.1551773591104e-01),
    (6.000e-01, 1.3475548801822e-15, 2.9840798812750e00),
    (6.400e-01, 9.5105651629516e-02, 2.0490126532863e00),
    (7.040e-01, -1.2533323356432e-02, -2.9999350283063e00),
    (7.480e-01, -9.9802672842827e-02, -1.5401915596821e00),
    (8.040e-01, 1.2533323356432e-02, 2.9999350283073e00),
    (8.480e-01, 9.9802672842827e-02, 1.5401915596806e00),
    (9.040e-01, -1.2533323356432e-02, -2.9999350283079e00),
    (9.480e-01, -9.9802672842827e-02, -1.5401915596795e00),
    (1.000e00, -1.2240642527361e-16, 2.9840798812793e00),
]


def Critere(valr):
    if abs(valr) <= 1.0e-08:
        return "ABSOLU"
    return "RELATIF"


# --------------------------------------------------------------------------------------------------
TABDEPZ0 = CREA_TABLE(RESU=_F(RESULTAT=RESUZ, GROUP_MA="ZENER01", NOM_CHAM="DEPL", TOUT_CMP="OUI"))
TABDEPZ0 = CALC_TABLE(
    reuse=TABDEPZ0,
    TABLE=TABDEPZ0,
    ACTION=(
        _F(OPERATION="FILTRE", NOM_PARA="NOEUD", CRIT_COMP="EQ", VALE_K="6"),
        _F(OPERATION="EXTR", NOM_PARA=("NUME_ORDRE", "INST", "DX")),
    ),
)
TABSIGZ0 = CREA_TABLE(
    RESU=_F(RESULTAT=RESUZ, GROUP_MA="ZENER01", NOM_CHAM="SIEF_ELGA", TOUT_CMP="OUI")
)
TABSIGZ0 = CALC_TABLE(
    reuse=TABSIGZ0,
    TABLE=TABSIGZ0,
    ACTION=(
        _F(OPERATION="FILTRE", NOM_PARA="POINT", CRIT_COMP="EQ", VALE=1),
        _F(OPERATION="EXTR", NOM_PARA=("NUME_ORDRE", "INST", "N")),
    ),
)
TABRZ0 = CALC_TABLE(
    TABLE=TABDEPZ0, ACTION=(_F(OPERATION="COMB", TABLE=TABSIGZ0, NOM_PARA="NUME_ORDRE"),)
)
# IMPR_TABLE(FORMAT='TABLEAU',TABLE=TABRZ0,FORMAT_R='E20.13')
for inst, dx, force in ResultatZ:
    TEST_TABLE(
        TABLE=TABRZ0,
        FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=inst),
        NOM_PARA="DX",
        VALE_CALC=dx,
        VALE_REFE=dx,
        REFERENCE="SOURCE_EXTERNE",
        CRITERE=Critere(dx),
        LEGENDE="%s" % inst,
    )
    TEST_TABLE(
        TABLE=TABRZ0,
        FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=inst),
        NOM_PARA="N",
        VALE_CALC=force,
        VALE_REFE=force,
        REFERENCE="SOURCE_EXTERNE",
        CRITERE=Critere(force),
        LEGENDE="%s" % inst,
    )

FIN()
