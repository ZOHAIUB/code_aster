# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA

# Pour des raisons de performances (x5), on force SDVERI='NON'.
DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="NON"))

# Read mesh
MESH = CA.Mesh()
MESH.readMedFile("ttnl303a.mmed")

# Functions

CONDUC = DEFI_FONCTION(
    NOM_PARA="TEMP",
    NOM_RESU="LAMBDA",
    VALE=(0.0, 2.0e2, 500.0, 7.0e2),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

ENTHAL = DEFI_FONCTION(
    NOM_PARA="TEMP",
    NOM_RESU="CP",
    VALE=(0.0, 0.0, 500.0, 4000.0e6),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)


# Material properties
MATER = DEFI_MATERIAU(THER_NL=_F(LAMBDA=CONDUC, BETA=ENTHAL))

CHMAT = CA.MaterialField(MESH)
CHMAT.addMaterialOnMesh(MATER)
CHMAT.build()

# Finite elements
MOTH = CA.Model(MESH)
MOTH.addModelingOnMesh(CA.Physics.Thermal, CA.Modelings.Planar)
MOTH.build()

# Loads
TGAUCHE = DEFI_FONCTION(
    NOM_RESU="TEMP",
    NOM_PARA="INST",
    VALE=(0.0e0, 200.0e0, 10.0e0, 200.0e0, 10.001e0, 100.0e0, 100.0e0, 100.0e0),
)
TDROITE = 100.0

CHTH = AFFE_CHAR_THER_F(MODELE=MOTH, TEMP_IMPO=(_F(GROUP_NO="NOE_GAU", TEMP=TGAUCHE),))

CHDI = CA.ThermalDirichletBC(MOTH)
CHDI.addBCOnNodes(CA.PhysicalQuantityComponent.Temp, TDROITE, "NOE_DRO")
CHDI.build()


#
# DEFINITION DE LA STATEGIE DE CALCUL -----------------------------
#

LIST = DEFI_LIST_REEL(
    DEBUT=0.0,
    INTERVALLE=(
        _F(JUSQU_A=1.0e-3, NOMBRE=10),
        _F(JUSQU_A=1.0e-2, NOMBRE=9),
        _F(JUSQU_A=1.0e-1, NOMBRE=9),
        _F(JUSQU_A=1.0e0, NOMBRE=9),
        _F(JUSQU_A=10.0e0, NOMBRE=9),
        _F(JUSQU_A=13.0e0, NOMBRE=3),
    ),
)

inst_fin = 13.0
temp_init = 100.0
theta = 0.57

NbIterNewtonMax = 10
ResiGlobRela = 5.0e-8

l_inst = LIST.getValues()

phys_pb = CA.PhysicalProblem(MOTH, CHMAT)
phys_pb.addLoad(CHTH)
phys_pb.addDirichletBC(CHDI)
phys_pb.computeListOfLoads()

phys_pb.computeDOFNumbering()
phys_pb.computeBehaviourProperty({"RELATION": "THER_NL", "TOUT": "OUI"})

disc_comp = CA.DiscreteComputation(phys_pb)


# Fields
T = CA.FieldOnNodesReal(phys_pb.getDOFNumbering())
T.setValues({"TEMP": temp_init})

DELTA_T = T.copy() * 0

linear_solver = CA.MumpsSolver()

# initial residuals
_, _, RESI_THER_PREV = disc_comp.getInternalThermalForces(T, DELTA_T)
RESI_MASS_PREV = disc_comp.getNonLinearCapacityForces(T, DELTA_T)

for i_inst in range(1, len(l_inst)):
    inst_prev = l_inst[i_inst - 1]
    inst = l_inst[i_inst]
    d_inst = inst - inst_prev
    print(" ")
    print("        ####################################")
    print("             instant de calcul: ", inst)
    print("        ####################################")
    print(" ")
    print(
        " %s |  %s  |  %s | %s " % ("Iteration", "RESI_GLOB_RELA", "RESI_GLOB_MAXI", "Convergence")
    )

    # Compute non linear quantities
    MASS_THER = disc_comp.getTangentCapacityMatrix(T, DELTA_T)

    RIGI_THER = disc_comp.getTangentConductivityMatrix(T, DELTA_T, with_dual=False)
    RIGI_THER_DUAL = disc_comp.getDualLinearConductivityMatrix()

    elemMatr = []
    elemMatr.append((RIGI_THER, theta))
    elemMatr.append((RIGI_THER_DUAL, 1.0))
    elemMatr.append((MASS_THER, 1.0 / d_inst))

    JABO_NW = CA.AssemblyMatrixTemperatureReal(phys_pb)

    JABO_NW.assemble(elemMatr, phys_pb.getListOfLoads())

    # Get CHAR_EVNL
    RESI_PREV = RESI_MASS_PREV / d_inst - (1.0 - theta) * RESI_THER_PREV

    # Linear loads - B * u
    DUAL_IMPO = disc_comp.getImposedDualBC(inst)

    # Create second member (transient)
    F2M_PRED = DUAL_IMPO + RESI_PREV

    # Factor matrix
    scaling = JABO_NW.getLagrangeScaling()
    isFacto = linear_solver.factorize(JABO_NW)
    assert isFacto

    # =========================================================
    #               BOUCLE DE NEWTON
    # =========================================================

    Conv = False

    for IterNewton in range(NbIterNewtonMax + 1):
        ############################################################################################
        # Routine NXNEWT
        ############################################################################################

        # Compute non linear quantities

        # Residual
        _, _, RESI_THER = disc_comp.getInternalThermalForces(T, DELTA_T)
        RESI_MASS = disc_comp.getNonLinearCapacityForces(T, DELTA_T)

        RESI_CURR = RESI_MASS / d_inst + theta * RESI_THER

        BTLA_FC = disc_comp.getDualForces(T + DELTA_T)

        DUAL_BC = disc_comp.getDualPrimal(T + DELTA_T, scaling)

        RESI_DUAL = BTLA_FC + (DUAL_BC - DUAL_IMPO)

        ############################################################################################
        # Routine NXRESI
        ############################################################################################
        # Evaluate equilibrium
        RESI_NW = RESI_PREV - (RESI_CURR + RESI_DUAL)

        # Evaluate residual
        Residu = RESI_NW.norm("NORM_2") / (F2M_PRED - BTLA_FC).norm("NORM_2")
        ResiduX = RESI_NW.norm("NORM_INFINITY")

        # Estimation de la convergence
        if IterNewton > 0:
            if Residu <= ResiGlobRela:
                Conv = True

            print("     %d     |   %e   |   %e  |    %d " % (IterNewton, Residu, ResiduX, Conv))

        if Conv:
            RESI_THER_PREV = RESI_THER
            RESI_MASS_PREV = RESI_MASS
            break

        # Compute Dirichlet BC:=
        diriBCs = disc_comp.getIncrementalDirichletBC(inst, T + DELTA_T)

        # Solve
        DDT = linear_solver.solve(RESI_NW, diriBCs)

        # Update TEMP increment
        DELTA_T += DDT

    if not Conv:
        raise CA.ConvergenceError("echec de la convergence des iterations de Newton")

    # Somme en python T+ = DELTA_t + T-
    T += DELTA_T

    DELTA_T.setValues(0)

FIN()
#
