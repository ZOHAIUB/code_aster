# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# CAS_TEST__: SDLV121A
#
# PROPAGATION, REFLEXION ET ABSORPTION D'UNE ONDE PLANE DANS UN MASSIF
# ELASTIQUE MODELISE SOUS LA FORME D'UNE COLONNE 1D.
# CAS 3D
# =======================================================================
import numpy as N

DEBUT(CODE="OUI")

MAIL = LIRE_MAILLAGE(FORMAT="MED")

MAIL = DEFI_GROUP(
    reuse=MAIL,
    MAILLAGE=MAIL,
    CREA_GROUP_NO=(
        _F(GROUP_MA="FACE1"),
        _F(GROUP_MA="FACE2"),
        _F(GROUP_MA="FACE3"),
        _F(GROUP_MA="FACE4"),
        _F(GROUP_MA="FACE5"),
        _F(GROUP_MA="FACE6"),
        _F(GROUP_MA="FACE7"),
        _F(GROUP_MA="FACE8"),
        _F(GROUP_MA="FACE9"),
        _F(GROUP_MA="ABSO"),
        _F(GROUP_MA="LIBR"),
    ),
)
IMPR_RESU(FORMAT="RESULTAT", RESU=_F(MAILLAGE=MAIL))

MAIL = MODI_MAILLAGE(
    reuse=MAIL,
    MAILLAGE=MAIL,
    ORIE_PEAU=_F(GROUP_MA_PEAU=("ABSO",), GROUP_MA_INTERNE=("VOLU",)),
    INFO=1,
)

MAT1 = DEFI_MATERIAU(ELAS=_F(E=4.44e8, RHO=1900.0, NU=0.48))
from sdlv121a import F_FONC

FONCT = F_FONC()

MODELE = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA="VOLU", PHENOMENE="MECANIQUE", MODELISATION="3D"),
        _F(GROUP_MA="ABSO", PHENOMENE="MECANIQUE", MODELISATION="3D_ABSO"),
    ),
)

CHAMPMAT = AFFE_MATERIAU(
    MAILLAGE=MAIL, AFFE=(_F(GROUP_MA="VOLU", MATER=MAT1), _F(GROUP_MA="ABSO", MATER=MAT1))
)

EX = FORMULE(VALE="-4.44E+8*Z/50.", NOM_PARA="Z")
NU = DEFI_CONSTANTE(VALE=0.48)
RHO = DEFI_CONSTANTE(VALE=1900.0)

YOUNG_F = DEFI_FONCTION(
    NOM_PARA="NEUT1",
    VALE=(-1.0e-9, -1.0e-9, 1.0e10, 1.0e10),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

MAT2 = DEFI_MATERIAU(ELAS_FO=_F(E=YOUNG_F, NU=NU, RHO=RHO))


CHGEOMG = CREA_CHAMP(TYPE_CHAM="NOEU_GEOM_R", OPERATION="EXTR", MAILLAGE=MAIL, NOM_CHAM="GEOMETRIE")

CHE_ = CREA_CHAMP(
    TYPE_CHAM="NOEU_NEUT_F",
    OPERATION="AFFE",
    MODELE=MODELE,
    AFFE=_F(GROUP_MA="ABSO", NOM_CMP="X1", VALE_F=EX),
)

CHE = CREA_CHAMP(TYPE_CHAM="NOEU_NEUT_R", OPERATION="EVAL", CHAM_F=CHE_, CHAM_PARA=CHGEOMG, INFO=2)


CHAMATC = AFFE_MATERIAU(
    MAILLAGE=MAIL,
    AFFE=(_F(GROUP_MA=("VOLU",), MATER=MAT1), _F(GROUP_MA=("ABSO",), MATER=MAT2)),
    AFFE_VARC=(_F(NOM_VARC="NEUT1", CHAM_GD=CHE, GROUP_MA=("ABSO")),),
)


LIAISON = AFFE_CHAR_MECA(
    MODELE=MODELE,
    LIAISON_UNIF=(
        _F(GROUP_NO="FACE1", DDL="DX"),
        _F(GROUP_NO="FACE1", DDL="DY"),
        _F(GROUP_NO="FACE1", DDL="DZ"),
        _F(GROUP_NO="FACE2", DDL="DX"),
        _F(GROUP_NO="FACE2", DDL="DY"),
        _F(GROUP_NO="FACE2", DDL="DZ"),
        _F(GROUP_NO="FACE3", DDL="DX"),
        _F(GROUP_NO="FACE3", DDL="DY"),
        _F(GROUP_NO="FACE3", DDL="DZ"),
        _F(GROUP_NO="FACE4", DDL="DX"),
        _F(GROUP_NO="FACE4", DDL="DY"),
        _F(GROUP_NO="FACE4", DDL="DZ"),
        _F(GROUP_NO="FACE5", DDL="DX"),
        _F(GROUP_NO="FACE5", DDL="DY"),
        _F(GROUP_NO="FACE5", DDL="DZ"),
        _F(GROUP_NO="FACE6", DDL="DX"),
        _F(GROUP_NO="FACE6", DDL="DY"),
        _F(GROUP_NO="FACE6", DDL="DZ"),
        _F(GROUP_NO="FACE7", DDL="DX"),
        _F(GROUP_NO="FACE7", DDL="DY"),
        _F(GROUP_NO="FACE7", DDL="DZ"),
        _F(GROUP_NO="FACE8", DDL="DX"),
        _F(GROUP_NO="FACE8", DDL="DY"),
        _F(GROUP_NO="FACE8", DDL="DZ"),
        _F(GROUP_NO="FACE9", DDL="DX"),
        _F(GROUP_NO="FACE9", DDL="DY"),
        _F(GROUP_NO="FACE9", DDL="DZ"),
        _F(GROUP_NO="ABSO", DDL="DX"),
        _F(GROUP_NO="ABSO", DDL="DY"),
        _F(GROUP_NO="ABSO", DDL="DZ"),
        _F(GROUP_NO="LIBR", DDL="DX"),
        _F(GROUP_NO="LIBR", DDL="DY"),
        _F(GROUP_NO="LIBR", DDL="DZ"),
    ),
)

x0 = 0.0
y0 = 0.0
z0 = -50.0

ONDE = AFFE_CHAR_MECA_F(
    MODELE=MODELE,
    ONDE_PLANE=_F(
        DIRECTION=(0.0, 0.0, 1.0),
        TYPE_ONDE="SH",
        COOR_SOURCE=(x0, y0, z0),
        FONC_SIGNAL=FONCT,
        GROUP_MA="ABSO",
    ),
)

RIGI_ELE = CALC_MATR_ELEM(MODELE=MODELE, OPTION="RIGI_MECA", CHAM_MATER=CHAMPMAT, CHARGE=LIAISON)

MASS_ELE = CALC_MATR_ELEM(MODELE=MODELE, OPTION="MASS_MECA", CHAM_MATER=CHAMPMAT, CHARGE=LIAISON)

# Fiche #30160 : MASS_MECA_DIAG avec ABSO
MAS_ELED = CALC_MATR_ELEM(
    MODELE=MODELE, OPTION="MASS_MECA_DIAG", CHAM_MATER=CHAMPMAT, CHARGE=LIAISON
)

AMOR_ELE = CALC_MATR_ELEM(
    MODELE=MODELE,
    OPTION="AMOR_MECA",
    CHAM_MATER=CHAMPMAT,
    CHARGE=LIAISON,
    RIGI_MECA=RIGI_ELE,
    MASS_MECA=MASS_ELE,
)

VECT_ELE = CALC_VECT_ELEM(OPTION="CHAR_MECA", CHAM_MATER=CHAMPMAT, CHARGE=LIAISON)


NUMEDDL = NUME_DDL(MATR_RIGI=RIGI_ELE)


# ------------------------------------------------------------------------------------
# Pour tester la prise en compte de ONDE_PLANE dans CALC_VECT_ELEM (fiche 19469):
# --------------------------------------------------------------------------------
VECT_EL1 = CALC_VECT_ELEM(INST=5.0e-3, OPTION="CHAR_MECA", CHAM_MATER=CHAMPMAT, CHARGE=ONDE)
VECA1 = ASSE_VECTEUR(VECT_ELEM=VECT_EL1, NUME_DDL=NUMEDDL)
TEST_RESU(CHAM_NO=_F(GROUP_NO="N41", NOM_CMP="DY", CHAM_GD=VECA1, VALE_CALC=7.623170841272613))

# ------------------------------------------------------------------------------------

RIGIDITE = ASSE_MATRICE(MATR_ELEM=RIGI_ELE, NUME_DDL=NUMEDDL)

AMORT = ASSE_MATRICE(MATR_ELEM=AMOR_ELE, NUME_DDL=NUMEDDL)

MASSE = ASSE_MATRICE(MATR_ELEM=MASS_ELE, NUME_DDL=NUMEDDL)

VECAS = ASSE_VECTEUR(VECT_ELEM=VECT_ELE, NUME_DDL=NUMEDDL)

TEMPLI = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=0.8, NOMBRE=1000))

INTLI = DEFI_LIST_ENTI(DEBUT=1, INTERVALLE=_F(JUSQU_A=1001, PAS=1))

DYNA = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="PHYS",
    MODELE=MODELE,
    CHAM_MATER=CHAMPMAT,
    MATR_MASS=MASSE,
    MATR_RIGI=RIGIDITE,
    MATR_AMOR=AMORT,
    EXCIT=(_F(VECT_ASSE=VECAS, COEF_MULT=1.0), _F(CHARGE=ONDE)),
    ###CDURAND###           ETAT_INIT=_F( INST_INIT = 0.),
    INCREMENT=_F(LIST_INST=TEMPLI),
    #                        ARCHIVAGE=_F( LIST_ARCH = INTLI),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
)

DXN22 = RECU_FONCTION(RESULTAT=DYNA, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DX")

DYN22 = RECU_FONCTION(RESULTAT=DYNA, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DY")

DZN22 = RECU_FONCTION(RESULTAT=DYNA, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DZ")

TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-6.108208129344e-18,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.2656,
            FONCTION=DXN22,
        ),
        _F(
            VALE_CALC=-1.002456482770e-3,
            VALE_REFE=-1.0e-3,
            PRECISION=4.0e-3,
            REFERENCE="ANALYTIQUE",
            CRITERE="RELATIF",
            VALE_PARA=0.2656,
            FONCTION=DYN22,
        ),
        _F(
            VALE_CALC=-9.939582018122e-04,
            VALE_REFE=-1.0e-3,
            PRECISION=7.0e-3,
            REFERENCE="ANALYTIQUE",
            CRITERE="RELATIF",
            VALE_PARA=0.4384,
            FONCTION=DYN22,
        ),
        _F(
            VALE_CALC=2.774333194966e-06,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.8,
            FONCTION=DYN22,
        ),
        _F(
            VALE_CALC=-3.510962081882e-18,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.2656,
            FONCTION=DZN22,
        ),
    )
)

##### PARAMETRES PAR VARIABLE DE COMMANDE
##### TEST POUR ONDE_PLANE

RIGI_ELC = CALC_MATR_ELEM(MODELE=MODELE, OPTION="RIGI_MECA", CHAM_MATER=CHAMATC, CHARGE=LIAISON)

MASS_ELC = CALC_MATR_ELEM(MODELE=MODELE, OPTION="MASS_MECA", CHAM_MATER=CHAMATC, CHARGE=LIAISON)

AMOR_ELC = CALC_MATR_ELEM(
    MODELE=MODELE,
    OPTION="AMOR_MECA",
    CHAM_MATER=CHAMATC,
    CHARGE=LIAISON,
    RIGI_MECA=RIGI_ELC,
    MASS_MECA=MASS_ELC,
)

VECT_ELC = CALC_VECT_ELEM(OPTION="CHAR_MECA", CHAM_MATER=CHAMATC, CHARGE=LIAISON)


NUMEDDLC = NUME_DDL(MATR_RIGI=RIGI_ELC)

## On test Ã©galement la prise en compte des VARC
# VECT_EL2=CALC_VECT_ELEM(INST=5.E-3, OPTION='CHAR_MECA', CHAM_MATER=CHAMATC, CHARGE=ONDE)
# VECA2=ASSE_VECTEUR(VECT_ELEM=VECT_EL2, NUME_DDL=NUMEDDLC)
# TEST_RESU(CHAM_NO=_F(NOEUD='N41',
#                     NOM_CMP='DY',
#                     CHAM_GD=VECA2,
#                     VALE_CALC=-7.6231708412726098,),
#          )


RIGIDITC = ASSE_MATRICE(MATR_ELEM=RIGI_ELC, NUME_DDL=NUMEDDLC)

AMORTC = ASSE_MATRICE(MATR_ELEM=AMOR_ELC, NUME_DDL=NUMEDDLC)

MASSEC = ASSE_MATRICE(MATR_ELEM=MASS_ELC, NUME_DDL=NUMEDDLC)

VECASC = ASSE_VECTEUR(VECT_ELEM=VECT_ELC, NUME_DDL=NUMEDDLC)

DYNAC = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="PHYS",
    MODELE=MODELE,
    CHAM_MATER=CHAMATC,
    MATR_MASS=MASSEC,
    MATR_RIGI=RIGIDITC,
    MATR_AMOR=AMORTC,
    EXCIT=(_F(VECT_ASSE=VECASC, COEF_MULT=1.0), _F(CHARGE=ONDE)),
    ###CDURAND###           ETAT_INIT=_F( INST_INIT = 0.),
    INCREMENT=_F(LIST_INST=TEMPLI),
    #                        ARCHIVAGE=_F( LIST_ARCH = INTLI),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
)

DXN22C = RECU_FONCTION(RESULTAT=DYNAC, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DX")

DYN22C = RECU_FONCTION(RESULTAT=DYNAC, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DY")

DZN22C = RECU_FONCTION(RESULTAT=DYNAC, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DZ")

TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-6.108208129344e-18,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.2656,
            FONCTION=DXN22C,
        ),
        _F(
            VALE_CALC=-1.002456482770e-03,
            VALE_REFE=-1.0e-3,
            PRECISION=4.0e-3,
            REFERENCE="ANALYTIQUE",
            CRITERE="RELATIF",
            VALE_PARA=0.2656,
            FONCTION=DYN22C,
        ),
        _F(
            VALE_CALC=-9.939582018122e-04,
            VALE_REFE=-1.0e-3,
            PRECISION=7.0e-3,
            REFERENCE="ANALYTIQUE",
            CRITERE="RELATIF",
            VALE_PARA=0.4384,
            FONCTION=DYN22C,
        ),
        _F(
            VALE_CALC=2.774333194966e-06,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.8,
            FONCTION=DYN22C,
        ),
        _F(
            VALE_CALC=-3.510962081882e-18,
            VALE_REFE=0.0,
            REFERENCE="ANALYTIQUE",
            CRITERE="ABSOLU",
            VALE_PARA=0.2656,
            FONCTION=DZN22C,
        ),
    )
)

#######################################################"

TEMLI = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=0.72, NOMBRE=450))

TEMLI2 = DEFI_LIST_REEL(DEBUT=0.0016, INTERVALLE=_F(JUSQU_A=0.72, NOMBRE=449))

INLI = DEFI_LIST_ENTI(DEBUT=1, INTERVALLE=_F(JUSQU_A=451, PAS=1))

DYNB = DYNA_NON_LINE(
    MODELE=MODELE,
    CHAM_MATER=CHAMPMAT,
    EXCIT=(_F(CHARGE=LIAISON), _F(CHARGE=ONDE)),
    #                       ETAT_INIT=_F( INST_INIT = 0.),
    COMPORTEMENT=_F(RELATION="ELAS", TOUT="OUI"),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-8),
    SOLVEUR=_F(METHODE="LDLT", STOP_SINGULIER="NON"),
    #                         NEWTON=_F(  MATRICE = 'ELASTIQUE',
    #                                     REAC_INCR = 0,
    #                                     REAC_ITER = 0),
    NEWTON=_F(MATRICE="TANGENTE", PAS_MINI_ELAS=1.0, REAC_ITER=1),
    INCREMENT=_F(LIST_INST=TEMLI),
    ###CDURAND              ARCHIVAGE=_F( LIST_ARCH = INLI),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
)

DXNB22 = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYNB, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DX"
)

DYNB22 = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYNB, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DY"
)

DZNB22 = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYNB, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DZ"
)

TEST_FONCTION(
    VALEUR=(
        _F(VALE_CALC=7.922329594300e-19, CRITERE="ABSOLU", VALE_PARA=0.2672, FONCTION=DXNB22),
        _F(
            VALE_CALC=-9.989050715479e-04,
            VALE_REFE=-1.003477e-3,
            REFERENCE="AUTRE_ASTER",
            CRITERE="RELATIF",
            VALE_PARA=0.2672,
            PRECISION=7.0e-3,
            FONCTION=DYNB22,
        ),
        _F(
            VALE_CALC=-9.914943446659e-04,
            VALE_REFE=-9.946329e-4,
            REFERENCE="AUTRE_ASTER",
            CRITERE="RELATIF",
            VALE_PARA=0.44,
            PRECISION=5.0e-3,
            FONCTION=DYNB22,
        ),
        _F(VALE_CALC=-4.613028177074e-06, CRITERE="ABSOLU", VALE_PARA=0.72, FONCTION=DYNB22),
        _F(VALE_CALC=-5.410897555216e-20, CRITERE="ABSOLU", VALE_PARA=0.2672, FONCTION=DZNB22),
    )
)

##### TEST DYNA_NON_LINE ET ONDE_PLAN AVEC VARC

DYND = DYNA_NON_LINE(
    MODELE=MODELE,
    CHAM_MATER=CHAMATC,
    EXCIT=(_F(CHARGE=LIAISON), _F(CHARGE=ONDE)),
    #                       ETAT_INIT=_F( INST_INIT = 0.),
    COMPORTEMENT=_F(RELATION="ELAS", TOUT="OUI"),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-8),
    SOLVEUR=_F(METHODE="LDLT", STOP_SINGULIER="NON"),
    #                         NEWTON=_F(  MATRICE = 'ELASTIQUE',
    #                                     REAC_INCR = 0,
    #                                     REAC_ITER = 0),
    NEWTON=_F(MATRICE="TANGENTE", PAS_MINI_ELAS=1.0, REAC_ITER=1),
    INCREMENT=_F(LIST_INST=TEMLI),
    ###CDURAND              ARCHIVAGE=_F( LIST_ARCH = INLI),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
)

DXNB22D = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYND, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DX"
)

DYNB22D = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYND, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DY"
)

DZNB22D = RECU_FONCTION(
    LIST_INST=TEMLI2, PRECISION=1.0e-4, RESULTAT=DYND, GROUP_NO="N22", NOM_CHAM="DEPL", NOM_CMP="DZ"
)

TEST_FONCTION(
    VALEUR=(
        _F(VALE_CALC=7.922329594300e-19, CRITERE="ABSOLU", VALE_PARA=0.2672, FONCTION=DXNB22D),
        _F(
            VALE_CALC=-9.989050715479e-04,
            VALE_REFE=-1.003477e-3,
            REFERENCE="AUTRE_ASTER",
            CRITERE="RELATIF",
            VALE_PARA=0.2672,
            PRECISION=7.0e-3,
            FONCTION=DYNB22D,
        ),
        _F(
            VALE_CALC=-9.914943446659e-04,
            VALE_REFE=-9.946329e-4,
            REFERENCE="AUTRE_ASTER",
            CRITERE="RELATIF",
            VALE_PARA=0.44,
            PRECISION=5.0e-3,
            FONCTION=DYNB22D,
        ),
        _F(VALE_CALC=-4.613028177074e-06, CRITERE="ABSOLU", VALE_PARA=0.72, FONCTION=DYNB22D),
        _F(VALE_CALC=-5.410897555216e-20, CRITERE="ABSOLU", VALE_PARA=0.2672, FONCTION=DZNB22D),
    )
)

FIN()
#
#     POST-TRAITEMENT
#


# def Defi_Xmcourbe(X,Y,courbe=None,legend='X',color=0,mark=0,):
#
#   def_co={'ABSCISSE': X}
#   def_co['ORDONNEE'] = Y
#   def_co['LEGENDE' ] = legend
#   def_co['COULEUR' ] = color
#   def_co['MARQUEUR'] = mark
#
#   try:
#     courbe.append(def_co)
#   except:
#     courbe=[def_co,]
#
#   return courbe
# # ---
#
#
#
# Noeud = ['N%d' %(n) for n in range(44,3,-4)]
#
# NB_Noe = len(Noeud)
#
# co_acce,co_vite,co_depl,=None,None,None,
#
# Comp = 'DY'
#
# RESU =(DYNA,DYNB)
#
# for r in RESU:
#
#  for i in range(NB_Noe):
#
#    cte_acce = i*5.e-1
#    cte_vite = i*1.5e-2
#    cte_depl = i*5.e-4
#
#    DEPL=RECU_FONCTION(RESULTAT=r,
#                       TITRE='ACCE',
#                       NOM_CHAM='DEPL',
#                       NOM_CMP=Comp,
#                       NOEUD=Noeud[i],
#                       PROL_DROITE='CONSTANT',
#                       PROL_GAUCHE='CONSTANT',
#                       INTERPOL='LIN',)
#
#    VITE=RECU_FONCTION(RESULTAT=r,
#                       TITRE='VITE',
#                       NOM_CHAM='VITE',
#                       NOM_CMP=Comp,
#                       NOEUD=Noeud[i],
#                       PROL_DROITE='CONSTANT',
#                       PROL_GAUCHE='CONSTANT',
#                       INTERPOL='LIN',)
#
#    ACCE=RECU_FONCTION(RESULTAT=r,
#                       TITRE='ACCE',
#                       NOM_CHAM='ACCE',
#                       NOM_CMP=Comp,
#                       NOEUD=Noeud[i],
#                       PROL_DROITE='CONSTANT',
#                       PROL_GAUCHE='CONSTANT',
#                       INTERPOL='LIN',)
#
#
#    # ---- Acceleration
#    #      ------------------------
#    time, acce = ACCE.Valeurs()
#
#    acce =N.array(acce)
#
#    acce +=cte_acce
#
#    co_acce =Defi_Xmcourbe(courbe=co_acce,
#         X=tuple(time),
#         Y=tuple(acce),
#         legend=Noeud[i],
#         color=0,)
#
#    # ---- Vitesse
#    #      ------------------------
#
#    time, vite = VITE.Valeurs()
#
#    vite =N.array(vite)
#
#    vite +=cte_vite
#
#    co_vite =Defi_Xmcourbe(courbe=co_vite,
#         X=tuple(time),
#         Y=tuple(vite),
#         legend=Noeud[i],
#         color=0,)
#
#    # ---- Deplacement
#    #      ------------------------
#
#    time, depl = DEPL.Valeurs()
#
#    depl =N.array(depl)
#
#    depl +=cte_depl
#
#    co_depl =Defi_Xmcourbe(courbe=co_depl,
#         X=tuple(time),
#         Y=tuple(depl),
#         legend=Noeud[i],
#         color=0,)
#
#    DETRUIRE(NOM=(ACCE,DEPL,VITE,),)
#
# Courbes = [co_acce,co_depl,co_vite,]
# Nom_Fichier= ['co_acce.agr','co_depl.agr','co_vite.agr',]
#
# unit=38
# for c in range(len(Nom_Fichier)):
#
#   DEFI_FICHIER(ACTION='ASSOCIER',
#                FICHIER='./REPE_OUT/'+Nom_Fichier[c],
#                UNITE=unit,)
#
#   IMPR_FONCTION(FORMAT='XMGRACE',
#               UNITE=unit,
#               COURBE=Courbes[c])
#
#   DEFI_FICHIER(ACTION='LIBERER',
#                UNITE=unit,)
# FIN()
#
#
