# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), IMPR_MACRO="NON")

### Cellule Hexagonale
### Ratio fibres/matrice = 0.4

MA = LIRE_MAILLAGE(UNITE=20, FORMAT="MED")

UN = DEFI_CONSTANTE(VALE=1)

E_FIBRE = DEFI_CONSTANTE(VALE=70000)
NU_FIBRE = DEFI_CONSTANTE(VALE=0.22)

E_MATRICE = DEFI_CONSTANTE(VALE=3500)
NU_MATRICE = DEFI_CONSTANTE(VALE=0.35)

VERRE = DEFI_MATERIAU(ELAS_FO=_F(E=E_FIBRE, NU=NU_FIBRE), THER_FO=_F(LAMBDA=UN))

RESINE = DEFI_MATERIAU(ELAS_FO=_F(E=E_MATRICE, NU=NU_MATRICE), THER_FO=_F(LAMBDA=UN))

TAB_HOMO = CALC_MATE_HOMO(
    MAILLAGE=MA,
    AFFE=(_F(TOUT="OUI", MATER=RESINE), _F(GROUP_MA=("tube0", "tube1"), MATER=VERRE)),
    VARC=_F(NOM_VARC="TEMP", VALE=20),
    TYPE_HOMO="MASSIF",
)

VALE_REFE = {"E_N": 30118, "E_T": 7531, "G_TN": 2790, "NU_NT": 0.290, "NU_TL": 0.452}

VALE_CALC = {
    "E_N": 30118.339939178386,
    "E_T": 7531.696223647912,
    "G_TN": 2789.8465519583674,
    "NU_NT": 0.2904464177572982,
    "NU_TL": 0.45185862547669003,
}

for para in VALE_REFE:
    TEST_TABLE(
        TABLE=TAB_HOMO,
        NOM_PARA=para,
        PRECISION=1.0e-2,
        REFERENCE="SOURCE_EXTERNE",
        VALE_CALC=VALE_CALC[para],
        VALE_REFE=VALE_REFE[para],
    )

TEST_TABLE(
    TABLE=TAB_HOMO,
    NOM_PARA="ISOTRANS",
    ORDRE_GRANDEUR=1.0e3,
    REFERENCE="ANALYTIQUE",
    CRITERE="ABSOLU",
    VALE_CALC=0.0,
    VALE_REFE=0.0,
)

tab_values = {
    para: items
    for para, items in TAB_HOMO.EXTR_TABLE().values().items()
    if all(abs(i) > 1.0e-12 for i in items)
}
vale_calc = {para: tab_values[para][0] for para in VALE_REFE.keys()}

FIN()
