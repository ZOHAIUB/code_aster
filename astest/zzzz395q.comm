# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
# person_in_charge: mickael.abbas at edf.fr

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

mesh = LIRE_MAILLAGE(FORMAT="MED")

mesh = MODI_MAILLAGE(reuse=mesh, MAILLAGE=mesh, ORIE_PEAU=_F(GROUP_MA_PEAU="S_e"))

# Define the material
steel = DEFI_MATERIAU(ELAS=_F(E=210000.0, NU=0.3), ECRO_LINE=_F(D_SIGM_EPSI=100.0, SY=100.0))

chmat = AFFE_MATERIAU(MAILLAGE=mesh, AFFE=_F(TOUT="OUI", MATER=steel))
# Mechanic model
model = AFFE_MODELE(MAILLAGE=mesh, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D"))

# Boundary condition
chg_b = AFFE_CHAR_CINE(MODELE=model, MECA_IMPO=_F(GROUP_MA="S_inf", DX=0, DY=0.0, DZ=0))

chg_p = AFFE_CHAR_MECA(MODELE=model, PRES_REP=_F(GROUP_MA="S_e", PRES=1000))

# Time discretization
list_t = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=10.0, PAS=1.0))

list_i = DEFI_LIST_INST(METHODE="MANUEL", DEFI_LIST=_F(LIST_INST=list_t))

rampe = DEFI_FONCTION(NOM_PARA="INST", VALE=(0.0, 0.0, 10.0, 1.0))

# Complete computation to create base
stnl = STAT_NON_LINE(
    MODELE=model,
    CHAM_MATER=chmat,
    EXCIT=(_F(CHARGE=chg_b), _F(CHARGE=chg_p, FONC_MULT=rampe)),
    INCREMENT=_F(LIST_INST=list_i),
    COMPORTEMENT=_F(RELATION="VMIS_ISOT_LINE"),
)

####################################################################################################
#
# Create base of recombSiefPOD_ELGA by POD method
#
####################################################################################################

# Create base (recombSiefPOD_ELGA)
baseSiefElgaPOD = DEFI_BASE_REDUITE(RESULTAT=stnl, INFO=2, NOM_CHAM="SIEF_ELGA", TOLE_SVD=1.0e-3)


# Print base (recombSiefPOD_ELGA)
IMPR_RESU(FORMAT="MED", UNITE=81, RESU=_F(RESULTAT=baseSiefElgaPOD))

# Get table
coorReduPOD = RECU_TABLE(CO=baseSiefElgaPOD, NOM_TABLE="COOR_REDUIT")

# Print reduced coordinates (TEMP)
IMPR_TABLE(TABLE=coorReduPOD, UNITE=6)

####################################################################################################
#
# Create base of recombSiefPOD_ELGA by POD_INCR method
#
####################################################################################################

# Create base
baseSiefElgaPODINCR = DEFI_BASE_REDUITE(
    OPERATION="POD_INCR", TOLE=1.0e-1, RESULTAT=stnl, INFO=2, NOM_CHAM="SIEF_ELGA", TOLE_SVD=1.0e-1
)

# Update base
baseSiefElgaPODINCR = DEFI_BASE_REDUITE(
    OPERATION="POD_INCR",
    reuse=baseSiefElgaPODINCR,
    BASE=baseSiefElgaPODINCR,
    TOLE=1.0e-3,
    RESULTAT=stnl,
    INFO=2,
    NOM_CHAM="SIEF_ELGA",
    TOLE_SVD=1.0e-3,
)

# Print base (recombSiefPOD_ELGA)
IMPR_RESU(FORMAT="MED", UNITE=82, RESU=_F(RESULTAT=baseSiefElgaPODINCR))

# Get table
coorReduPODINCR = RECU_TABLE(CO=baseSiefElgaPODINCR, NOM_TABLE="COOR_REDUIT")

# Print reduced coordinates (TEMP)
IMPR_TABLE(TABLE=coorReduPODINCR, UNITE=6)

####################################################################################################
#
# Recombine stress from empiric modes for POD case
#
####################################################################################################

modeSiefPOD_1 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPOD,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=1,
)
modeSiefPOD_2 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPOD,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=2,
)
modeSiefPOD_3 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPOD,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=3,
)

# on the last step
coefs = coorReduPOD.EXTR_TABLE().NUME_SNAP == stnl.getNumberOfIndexes()
coefs.sort("NUME_MODE")

coefSiefPOD_1, coefSiefPOD_2, coefSiefPOD_3 = coefs.COOR_REDUIT.values()

recombSiefPOD = CREA_CHAMP(
    OPERATION="ASSE",
    MODELE=model,
    TYPE_CHAM="ELGA_SIEF_R",
    ASSE=(
        _F(CHAM_GD=modeSiefPOD_1, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPOD_1),
        _F(CHAM_GD=modeSiefPOD_2, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPOD_2),
        _F(CHAM_GD=modeSiefPOD_3, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPOD_3),
    ),
)

####################################################################################################
#
# Recombine stress from empiric modes for POD_INCR case
#
####################################################################################################

modeSiefPODINCR_1 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPODINCR,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=1,
)
modeSiefPODINCR_2 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPODINCR,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=2,
)
modeSiefPODINCR_3 = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R",
    OPERATION="EXTR",
    RESULTAT=baseSiefElgaPODINCR,
    NOM_CHAM="SIEF_ELGA",
    NUME_ORDRE=3,
)

# on the last step
# FIXME 22 vs 11 coordinates?
coefs = coorReduPODINCR.EXTR_TABLE().NUME_SNAP == stnl.getNumberOfIndexes() * 2
coefs.sort("NUME_MODE")

coefSiefPODINCR_1, coefSiefPODINCR_2, coefSiefPODINCR_3 = coefs.COOR_REDUIT.values()

recombSiefPODINCR = CREA_CHAMP(
    OPERATION="ASSE",
    MODELE=model,
    TYPE_CHAM="ELGA_SIEF_R",
    ASSE=(
        _F(CHAM_GD=modeSiefPODINCR_1, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPODINCR_1),
        _F(CHAM_GD=modeSiefPODINCR_2, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPODINCR_2),
        _F(CHAM_GD=modeSiefPODINCR_3, TOUT="OUI", CUMUL="OUI", COEF_R=coefSiefPODINCR_3),
    ),
)

FIN()
