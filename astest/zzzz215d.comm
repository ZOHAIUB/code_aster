# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# This test is a copy of zzzz215d with a different mesh
# since medcoupling supports only linear tetra meshes in 3D.
# It allows to test MPI-coupling with two instance of code_aster

from mpi4py import MPI

from code_aster.Coupling import ExternalCoupling

from zzzz215d_meca import coupled_mechanics
from zzzz215d_flui import coupled_fluid


# Tis test is normally run with:
#   mpiexec --tag-output -n 2 run_aster coupled_mechanics.py : \
#                        -n 2 run_aster coupled_fluid.py | tee $@
# but it is not possible here.

# Get the rank and size in the original communicator
comm = MPI.COMM_WORLD
global_rank = comm.rank
global_size = comm.size


################################################################################
# definition of the coupled cpl
################################################################################


if global_rank < global_size / 2:
    # define thermal coupling
    cpl_fluid = ExternalCoupling("fluid", starter=True, debug=True)
    cpl_fluid.init_coupling("mechanics")

    coupled_fluid(cpl_fluid)
else:
    # define mechanical coupling
    cpl_meca = ExternalCoupling("mechanics", starter=False, debug=True)
    cpl_meca.init_coupling("fluid")

    coupled_mechanics(cpl_meca)
