# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import traceback

from code_aster.Commands import *
from code_aster import CA

CA.init("--test", ERREUR=_F(ERREUR_F="EXCEPTION"))

test = CA.TestCase()

# check reloading of the NamedTuple
# main (None) + NUMEDDL + RIGIDITE + MASSE + 300 tmp
test.assertEqual(len(restup), 1 + 3 + size)
test.assertIsNone(restup.main, msg="restup.main should be None")
test.assertIsNotNone(restup.NUMEDDL, msg="restup.NUMEDDL should exist")
test.assertIsNotNone(restup.MASSE, msg="restup.MASSE should exist")
test.assertIsNotNone(restup.RIGIDITE, msg="restup.RIGIDITE should exist")


try:
    MAIL = LIRE_MAILLAGE(FORMAT="MED")

    MODELE = AFFE_MODELE(
        MAILLAGE=MAIL, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D")
    )

    MAT = DEFI_MATERIAU(ELAS=_F(E=204000000000.0, NU=0.3, RHO=7800.0))

    CHMAT = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=_F(TOUT="OUI", MATER=MAT))
except Exception:
    traceback.print_exc()
    raise


def invalid():
    try:
        block = AFFE_CHAR_MECA(MODELE=MODELE, DDL_IMPO=_F(GROUP_MA="BASE", DX=0.0, DY=0.0, DZ=0.0))

        ASSEMBLAGE(
            MODELE=MODELE,
            CHAM_MATER=CHMAT,
            CHARGE=block,
            NUME_DDL=CO("NUMEDDL"),
            MATR_ASSE=(
                _F(MATRICE=CO("stiffness"), OPTION="RIGI_MECA"),
                _F(MATRICE=CO("mass"), OPTION="MASS_MECA"),
            ),
            VECT_ASSE=_F(VECTEUR=CO("vect"), OPTION="CHAR_MECA", CHARGE=block),
        )
        # this uses the global var 'mass'
        test.assertTrue(mass.isBuilt())
        # this changes 'mass', so it requires to mark 'mass' as global
        mass = None

    except UnboundLocalError as exc:
        # traceback.print_exc()
        test.assertIn("mass", str(exc), msg="mass must be declared as global")


invalid()


def using_global():
    try:
        global mass
        block = AFFE_CHAR_MECA(MODELE=MODELE, DDL_IMPO=_F(GROUP_MA="BASE", DX=0.0, DY=0.0, DZ=0.0))

        ASSEMBLAGE(
            MODELE=MODELE,
            CHAM_MATER=CHMAT,
            CHARGE=block,
            NUME_DDL=CO("NUMEDDL"),
            MATR_ASSE=(
                _F(MATRICE=CO("stiffness"), OPTION="RIGI_MECA"),
                _F(MATRICE=CO("mass"), OPTION="MASS_MECA"),
            ),
            VECT_ASSE=_F(VECTEUR=CO("vect"), OPTION="CHAR_MECA", CHARGE=block),
        )

        test.assertTrue(locals() is not globals(), msg="locals != globals")
        test.assertTrue("block" not in globals(), msg="block not in globals")
        test.assertTrue("block" in locals(), msg="block in locals")
        # because CO are always global
        test.assertTrue("vect" in globals(), msg="vect in globals")
        test.assertTrue("vect" not in locals(), msg="vect not in locals")
        # check "type"
        test.assertTrue(stiffness.isBuilt())
        test.assertTrue(mass.isBuilt())
        test.assertEqual(vect.getNumberOfComponents(), 6)
        # this requires to mark 'mass' as global
        mass = None

    except Exception:
        traceback.print_exc()
        raise


using_global()
# check that it can be called several times
using_global()

test.assertTrue(locals() is globals(), msg="locals == globals")
test.assertTrue("block" not in globals(), msg="block not in globals")
# because CO are always global
test.assertTrue("vect" in globals(), msg="vect in globals")

test.printSummary()

CA.close()
