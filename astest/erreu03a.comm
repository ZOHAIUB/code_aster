# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: olivier.boiteau at edf.fr
#########################################################################
# VALIDATION DE LA DETECTION DE SINGULARITE SIMPLE (BLOCAGE ABSENT OU
# SURABONDANT) AVEC LES SOLVEURS LINEAIRES DIRECTS: MUMPS, LDLT ET MF.
# CAS SYMETRIQUE REEL AVEC UN OPERATEUR INTEGRE: MECA_STATIQUE
# ON TESTE LES MSGS SUIVANT:
#    1. MANQUE DE BLOCAGE: FACTOR_11 POUR LDLT/MF/MUMPS
#             + FACTOR_57 SI MUMPS ET NPREC<0
#    2. BLOCAGE SURABONDANTS: FACTOR_11 POUR LDLT/MF/MUMPS
#             + FACTOR_42 SI MUMPS ET NPREC<0
#       DIRECTS ET UNE COMMANDE INTEGREE
#
# VALIDATION DE LA DETECTION DE MATRICE NON SPD AVEC
# MUMPS+TYPE_RESOL='SYMDEF'
# AVEC MUMPS, VALIDATION DE LA VALEUR 'EVAL' DU MOT-CLE GESTION_MEMOIRE
#########################################################################

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION", ERREUR_F="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

test = CA.TestCase()

MA = LIRE_MAILLAGE(FORMAT="GIBI", UNITE=19)
DEFI_GROUP(reuse=MA, MAILLAGE=MA, CREA_GROUP_NO=_F(TOUT_GROUP_MA="OUI"))
MO = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D"))
MAT = DEFI_MATERIAU(ELAS=_F(E=1.0e05, NU=0.3, RHO=9800.0))
CHAM_MAT = AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(TOUT="OUI", MATER=MAT))
CHAR = AFFE_CHAR_MECA(
    MODELE=MO,
    DDL_IMPO=_F(GROUP_MA="BASE1", DZ=0.0, DY=0.0),
    PESANTEUR=_F(GRAVITE=9.81, DIRECTION=(0.0, 0.0, -1.0)),
)

CTROP = AFFE_CHAR_MECA(
    MODELE=MO,
    DDL_IMPO=_F(GROUP_MA="BASE1", DZ=0.0, DY=0.0, DX=0.0),
    PESANTEUR=_F(GRAVITE=9.81, DIRECTION=(0.0, 0.0, -1.0)),
)

CHARP = AFFE_CHAR_MECA(MODELE=MO, PESANTEUR=_F(GRAVITE=9.81, DIRECTION=(0.0, 0.0, -1.0)))

CHARCI = AFFE_CHAR_CINE(MODELE=MO, MECA_IMPO=_F(GROUP_NO="BASE1", DX=10.0))

# 0 : PRE-EVALUATION DES CONSOMMATIONS MEMOIRE AVEC GESTION_MEMOIRE='EVAL'
# POUR LE SOLVEUR LINEAIRE MUMPS
# ----------------------------------------------------------------------
try:
    RESU01 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CHAR),),
        SOLVEUR=_F(METHODE="MUMPS", GESTION_MEMOIRE="EVAL"),
    )

except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_77")

# 1 : MANQUE DE BLOCAGE DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
# ----------------------------------------------------------------------
try:
    RESU11 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CHAR),),
        SOLVEUR=_F(METHODE="LDLT", NPREC=8, STOP_SINGULIER="OUI"),
    )

except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_10")

try:
    RESU12 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CHAR),),
        SOLVEUR=_F(METHODE="MULT_FRONT", NPREC=8, STOP_SINGULIER="OUI"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_10")

try:
    RESU130 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CHAR),),
        SOLVEUR=_F(METHODE="MUMPS", NPREC=8, STOP_SINGULIER="OUI"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_11")

try:
    RESU131 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CHAR),),
        SOLVEUR=_F(METHODE="MUMPS", NPREC=-8, STOP_SINGULIER="OUI"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_57")


# 2 : REDONDANCE DE BLOCAGES DETECTE VIA LE MECANISME NPREC/STOP_SINGULIER
#     TEST AVEC LDLT/MF/MUMPS. AVEC MUMPS ON TESTE AUSSI LE MECANISME NPREC<0
# ----------------------------------------------------------------------
try:
    RESU21 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CTROP), _F(CHARGE=CHARCI)),
        SOLVEUR=_F(METHODE="LDLT", NPREC=8, STOP_SINGULIER="OUI"),
    )

except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_11")

## #issue29549, we let a loop to check the garbage collector
for i in range(100):
    try:
        RESU22 = MECA_STATIQUE(
            MODELE=MO,
            CHAM_MATER=CHAM_MAT,
            INFO=1,
            EXCIT=(_F(CHARGE=CTROP), _F(CHARGE=CHARCI)),
            SOLVEUR=_F(METHODE="MULT_FRONT", NPREC=8, STOP_SINGULIER="OUI"),
        )
    except CA.AsterError as exc:
        test.assertEqual(exc.id_message, "FACTOR_11")

try:
    RESU230 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=1,
        EXCIT=(_F(CHARGE=CTROP), _F(CHARGE=CHARCI)),
        SOLVEUR=_F(METHODE="MUMPS", NPREC=8, STOP_SINGULIER="OUI"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_11")

try:
    RESU231 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=2,
        EXCIT=(_F(CHARGE=CTROP), _F(CHARGE=CHARCI)),
        SOLVEUR=_F(METHODE="MUMPS", NPREC=-8, STOP_SINGULIER="OUI"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_42")

try:
    RESU232 = MECA_STATIQUE(
        MODELE=MO,
        CHAM_MATER=CHAM_MAT,
        INFO=2,
        EXCIT=(_F(CHARGE=CTROP), _F(CHARGE=CHARCI)),
        SOLVEUR=_F(METHODE="MUMPS", TYPE_RESOL="SYMDEF"),
    )
except CA.AsterError as exc:
    test.assertEqual(exc.id_message, "FACTOR_84")

FIN()
