# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

k = 100000.0
m = 2533.0
xi = 0.05

# pulsations propres du systeme
w1 = sqrt(k / m)
w2 = sqrt(5.0 * k / m)

# alpha et beta pour un amortissement de Rayleigh equivalent a xi
alpha = 2.0 * xi / (w1 + w2)
beta = 2.0 * xi * w1 * w2 / (w1 + w2)


MAILLAG0 = LIRE_MAILLAGE(FORMAT="ASTER")


MAILLAGE = CREA_MAILLAGE(MAILLAGE=MAILLAG0, CREA_POI1=(_F(NOM_GROUP_MA="MASSE", GROUP_NO="MASSE"),))


MODELE = AFFE_MODELE(
    MAILLAGE=MAILLAGE,
    AFFE=(
        _F(GROUP_MA=("RESK", "RES2K"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),
        _F(GROUP_MA="MASSE", PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),
    ),
)

CARA = AFFE_CARA_ELEM(
    MODELE=MODELE,
    DISCRET=(
        _F(CARA="K_T_D_L", GROUP_MA="RESK", VALE=(k, 1.0, 1.0)),
        _F(
            CARA="M_T_L",
            GROUP_MA="RESK",
            VALE=(
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ),
        ),
        _F(CARA="K_T_D_L", GROUP_MA="RES2K", VALE=(2.0 * k, 1.0, 1.0)),
        _F(
            CARA="M_T_L",
            GROUP_MA="RES2K",
            VALE=(
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ),
        ),
        _F(CARA="M_T_D_N", GROUP_MA="MASSE", VALE=m),
    ),
)

MAT = DEFI_MATERIAU(ELAS=_F(E=160000000000.0, NU=0.3, RHO=13000.0))

CHAMPMAT = AFFE_MATERIAU(MAILLAGE=MAILLAGE, AFFE=_F(TOUT="OUI", MATER=MAT))

COND_LIM = AFFE_CHAR_MECA(
    MODELE=MODELE,
    DDL_IMPO=(
        _F(GROUP_NO=("P1", "P4"), DX=0.0, DY=0.0, DZ=0.0),
        _F(GROUP_NO="MASSE", DY=0.0, DZ=0.0),
    ),
)

ASSEMBLAGE(
    MODELE=MODELE,
    CHAM_MATER=CHAMPMAT,
    CARA_ELEM=CARA,
    CHARGE=COND_LIM,
    NUME_DDL=CO("NUMEROTA"),
    MATR_ASSE=(
        _F(MATRICE=CO("MATRMASS"), OPTION="MASS_MECA"),
        _F(MATRICE=CO("MATRRIGI"), OPTION="RIGI_MECA"),
    ),
)


# construction de la matrice d'amortissement de Rayleigh (alpha.K+beta.M)
MATAMOR = COMB_MATR_ASSE(
    COMB_R=(_F(MATR_ASSE=MATRRIGI, COEF_R=alpha), _F(MATR_ASSE=MATRMASS, COEF_R=beta))
)

MAS = POST_ELEM(MASS_INER=_F(TOUT="OUI"), MODELE=MODELE, CARA_ELEM=CARA)

MODES = CALC_MODES(
    CALC_FREQ=_F(NMAX_FREQ=2),
    MATR_RIGI=MATRRIGI,
    MATR_MASS=MATRMASS,
    CARA_ELEM=CARA,
    SOLVEUR_MODAL=_F(METHODE="SORENSEN"),
)

MODES = NORM_MODE(reuse=MODES, MODE=MODES, NORME="MASS_GENE", INFO=2)

MODES = CALC_CHAMP(reuse=MODES, RESULTAT=MODES, CONTRAINTE=("SIEF_ELGA", "EFGE_ELNO"))

MODES = CALC_CHAMP(reuse=MODES, RESULTAT=MODES, FORCE="FORC_NODA")

MODES = CALC_CHAMP(reuse=MODES, RESULTAT=MODES, FORCE="REAC_NODA")

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=MODES,
            NUME_ORDRE=1,
            PARA="FREQ",
            VALE_REFE=1.0,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=1.000005841,
        ),
        _F(
            RESULTAT=MODES,
            NUME_ORDRE=2,
            PARA="FREQ",
            VALE_REFE=2.236,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=2.236081039,
        ),
    )
)

DDLGENE = NUME_DDL_GENE(BASE=MODES, STOCKAGE="DIAG")

AMORGEN = PROJ_MATR_BASE(BASE=MODES, NUME_DDL_GENE=DDLGENE, MATR_ASSE=MATAMOR)

# -----------------------------------------------------------------------
# CALCUL DES MODES STATIQUES POUR L'ENTRAINEMENT
# -----------------------------------------------------------------------

MODE_STA = MODE_STATIQUE(
    CARA_ELEM=CARA,
    MATR_RIGI=MATRRIGI,
    MATR_MASS=MATRMASS,
    MODE_STAT=_F(GROUP_NO=("P1", "P4"), AVEC_CMP="DX"),
)

MODE_STA = CALC_CHAMP(reuse=MODE_STA, RESULTAT=MODE_STA, CONTRAINTE=("SIEF_ELGA", "EFGE_ELNO"))

MODE_STA = CALC_CHAMP(reuse=MODE_STA, RESULTAT=MODE_STA, FORCE="FORC_NODA")

MODE_STA = CALC_CHAMP(reuse=MODE_STA, RESULTAT=MODE_STA, FORCE="REAC_NODA")

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=MODE_STA,
            NOEUD_CMP=("1", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P2",
            VALE_REFE=0.6,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.6,
        ),
        _F(
            RESULTAT=MODE_STA,
            NOEUD_CMP=("1", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P3",
            VALE_REFE=0.4,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.4,
        ),
        _F(
            RESULTAT=MODE_STA,
            NOEUD_CMP=("4", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P2",
            VALE_REFE=0.4,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.4,
        ),
        _F(
            RESULTAT=MODE_STA,
            NOEUD_CMP=("4", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P3",
            VALE_REFE=0.6,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.6,
        ),
    )
)

# -----------------------------------------------------------------------
# CALCUL DES MODES STATIQUES POUR LA CORRECTION STATIQUE
# -----------------------------------------------------------------------

MODE_CO2 = MODE_STATIQUE(
    CARA_ELEM=CARA,
    MATR_RIGI=MATRRIGI,
    MATR_MASS=MATRMASS,
    PSEUDO_MODE=_F(GROUP_NO=("P1", "P4"), AVEC_CMP="DX"),
)

MODE_CO2 = CALC_CHAMP(reuse=MODE_CO2, RESULTAT=MODE_CO2, CONTRAINTE=("SIEF_ELGA", "EFGE_ELNO"))

MODE_CO2 = CALC_CHAMP(reuse=MODE_CO2, RESULTAT=MODE_CO2, FORCE="FORC_NODA")

MODE_CO2 = CALC_CHAMP(reuse=MODE_CO2, RESULTAT=MODE_CO2, FORCE="REAC_NODA")

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=MODE_CO2,
            NOEUD_CMP=("1", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P2",
            VALE_REFE=0.01317,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.0131716,
        ),
        _F(
            RESULTAT=MODE_CO2,
            NOEUD_CMP=("1", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P3",
            VALE_REFE=0.01216,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.0121584,
        ),
        _F(
            RESULTAT=MODE_CO2,
            NOEUD_CMP=("4", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P2",
            VALE_REFE=0.01216,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.0121584,
        ),
        _F(
            RESULTAT=MODE_CO2,
            NOEUD_CMP=("4", "DX"),
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P3",
            VALE_REFE=0.01317,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.0131716,
        ),
    )
)

# -------------------------------
#   DEFINITION DU SEISME
# --------------------------------

F0 = 1.0
F1 = 1.5
F2 = 2.0

OMEGA1 = (2 * pi) * F1
OMEGA2 = (2 * pi) * F2

A1 = 0.5
A2 = 0.5

L_FREQ = DEFI_LIST_REEL(DEBUT=0.01, INTERVALLE=_F(JUSQU_A=20.0, PAS=0.002))

FSRO0 = FORMULE(VALE="10.0", NOM_PARA="FREQ")

FSRO1 = FORMULE(
    VALE="""
A1*(2*pi*FREQ)**2/abs(OMEGA1**2-(2*pi*FREQ)**2)""",
    A1=A1,
    OMEGA1=OMEGA1,
    NOM_PARA="FREQ",
)


FSRO2 = FORMULE(
    VALE="""
A2*(2*pi*FREQ)**2/abs(OMEGA2**2-(2*pi*FREQ)**2)""",
    A2=A2,
    OMEGA2=OMEGA2,
    NOM_PARA="FREQ",
)


SRO0 = CALC_FONC_INTERP(
    FONCTION=FSRO0,
    LIST_PARA=L_FREQ,
    NOM_PARA="FREQ",
    INTERPOL="LOG",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

SRO1 = CALC_FONC_INTERP(
    FONCTION=FSRO1,
    LIST_PARA=L_FREQ,
    NOM_PARA="FREQ",
    INTERPOL="LOG",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

SRO2 = CALC_FONC_INTERP(
    FONCTION=FSRO2,
    LIST_PARA=L_FREQ,
    NOM_PARA="FREQ",
    INTERPOL="LOG",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

SPEC1 = DEFI_NAPPE(
    NOM_PARA="AMOR",
    PARA=(0.0, xi),
    FONCTION=(SRO0, SRO1),
    INTERPOL=("LIN", "LOG"),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

SPEC2 = DEFI_NAPPE(
    NOM_PARA="AMOR",
    PARA=(0.0, xi),
    FONCTION=(SRO0, SRO2),
    INTERPOL=("LIN", "LOG"),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

MUQACQC = COMB_SISM_MODAL(
    MODE_MECA=MODES,
    AMOR_GENE=AMORGEN,
    TYPE_ANALYSE="MULT_APPUI",
    APPUIS=(_F(NOM="A_1", GROUP_NO=("P1")), _F(NOM="A_4", GROUP_NO=("P4"))),
    SPECTRE=(
        _F(NOM_APPUI="A_1", LIST_AXE=("X"), SPEC_OSCI=SPEC1, ECHELLE=1.0, CORR_FREQ="NON"),
        _F(NOM_APPUI="A_4", LIST_AXE=("X"), SPEC_OSCI=SPEC2, ECHELLE=1.0, CORR_FREQ="NON"),
    ),
    COMB_MODE=_F(TYPE="CQC"),
    GROUP_APPUI_CORRELE=(_F(LIST_APPUI=("A_1"), NOM="GA_1"), _F(LIST_APPUI=("A_4"), NOM="GA_4")),
    COMB_DDS_CORRELE="LINE",
    OPTION=("DEPL", "SIEF_ELGA", "EFGE_ELNO", "FORC_NODA", "REAC_NODA"),
    TYPE_RESU=_F(TYPE="VALE_TOTA"),
)

# On retrouve bien avec l'utilisation de AMOR_GENE le meme resulat qu'avec un AMOR_REDUIT equivalent

TEST_RESU(
    RESU=(
        _F(
            RESULTAT=MUQACQC,
            NOM_CAS="TOTA",
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P2",
            VALE_REFE=0.00565,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.00565049549,
        ),
        _F(
            RESULTAT=MUQACQC,
            NOM_CAS="TOTA",
            NOM_CHAM="DEPL",
            NOM_CMP="DX",
            GROUP_NO="P3",
            VALE_REFE=0.00565157,
            REFERENCE="ANALYTIQUE",
            VALE_CALC=0.00565210016,
        ),
    )
)

FIN()
