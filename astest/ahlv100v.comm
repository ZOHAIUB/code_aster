# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#  GUIDE D'ONDE A SORTIE ANECHOIQUE CAS AXIS (en U-PSI)
#

import numpy

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

F = 500.0


MAYA = LIRE_MAILLAGE(FORMAT="IDEAS", UNITE=19)

AIR = DEFI_MATERIAU(FLUIDE=_F(RHO=1.3, CELE_R=343.0))

CHAMPMAT = AFFE_MATERIAU(MAILLAGE=MAYA, AFFE=_F(TOUT="OUI", MATER=AIR))

COLONNE = AFFE_MODELE(
    MAILLAGE=MAYA,
    AFFE=(
        _F(TOUT="OUI", MODELISATION="AXIS_FLUIDE", FORMULATION="U_PSI", PHENOMENE="MECANIQUE"),
        _F(
            GROUP_MA="SORTIE",
            MODELISATION="AXIS_FLUI_ABSO",
            FORMULATION="U_PSI",
            PHENOMENE="MECANIQUE",
        ),
    ),
)

#  --- AFIN DE TESTER UN CHARGEMENT AVEC UNE FONCTION ON DECOMPOSE
#      VNOR = 0.014 = 0.010 (AFFE_CHAR_MECA) + 0.004 (AFFE_CHAR_MECA_F)

CHARMECA = AFFE_CHAR_MECA(
    MODELE=COLONNE, VITE_FACE=_F(GROUP_MA="ENTREE", VITE=0.010, DIRECTION=(0.0, 1.0, 0.0))
)

#  --- CHARGEMENT IDENTIQUE MAIS AVEC UNE FONCTION ---

viteNorm = DEFI_FONCTION(NOM_PARA="X", VALE=(0.0, 0.004, 1.0, 0.004))
viteDireX = DEFI_CONSTANTE(VALE=0.0)
viteDireY = DEFI_CONSTANTE(VALE=1.0)
viteDireZ = DEFI_CONSTANTE(VALE=0.0)

CHARMECF = AFFE_CHAR_MECA_F(
    MODELE=COLONNE,
    VITE_FACE=_F(GROUP_MA="ENTREE", VITE=viteNorm, DIRECTION=(viteDireX, viteDireY, viteDireZ)),
)

MATELE_K = CALC_MATR_ELEM(MODELE=COLONNE, CHAM_MATER=CHAMPMAT, OPTION="RIGI_MECA", CHARGE=CHARMECA)

MATELE_M = CALC_MATR_ELEM(MODELE=COLONNE, CHAM_MATER=CHAMPMAT, OPTION="MASS_MECA", CHARGE=CHARMECA)


MATELE_I = CALC_MATR_ELEM(
    MODELE=COLONNE, CHAM_MATER=CHAMPMAT, OPTION="AMOR_MECA", CHARGE=CHARMECA, RIGI_MECA=MATELE_K
)


VECTELEM = CALC_VECT_ELEM(OPTION="CHAR_MECA", CHAM_MATER=CHAMPMAT, CHARGE=(CHARMECA, CHARMECF))

NUM = NUME_DDL(MATR_RIGI=MATELE_K)

MATASK = ASSE_MATRICE(MATR_ELEM=MATELE_K, NUME_DDL=NUM)

MATASM = ASSE_MATRICE(MATR_ELEM=MATELE_M, NUME_DDL=NUM)

MATASI = ASSE_MATRICE(MATR_ELEM=MATELE_I, NUME_DDL=NUM)


VECTASS = ASSE_VECTEUR(VECT_ELEM=VECTELEM, NUME_DDL=NUM)

DYNAHARM = DYNA_VIBRA(
    TYPE_CALCUL="HARM",
    BASE_CALCUL="PHYS",
    MATR_MASS=MATASM,
    MATR_RIGI=MATASK,
    MATR_AMOR=MATASI,
    NOM_CHAM="DEPL",
    FREQ=F,
    EXCIT=_F(VECT_ASSE=VECTASS, COEF_MULT=1.0, PUIS_PULS=0, PHAS_DEG=0.0),
    TITRE=("",),
)

# EN HARMONIQUE : PRES = -RHO_F*I*OMEGA*PSI => PSI = PRES/(-1.0j*2*pi*freq*RHO_F)
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(-6.2426000000000004 + 0.0) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(-6.2425131602556 - 3.180597860673e-04j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N1",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(-6.2426000000000004 + 0.0j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(-6.2425131602556 - 3.1805978606299e-04j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N3",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(6.0236799999999997 + 1.6387j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(6.0221719269309 + 1.6440674976098j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N151",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(6.0236799999999997 + 1.6387j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(6.0221719269309 + 1.6440674976098j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N153",
            NOM_CMP="PSI",
        ),
    )
)


FIN()
#
