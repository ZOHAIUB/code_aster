# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#        ELEMENT POU_D_E COMPORTEMENT LINEAIRE
#
POURSUITE(CODE="OUI", DEBUG=_F(SDVERI="NON"))


ZERO = DEFI_CONSTANTE(VALE=0.0)
V_INST = FORMULE(VALE="(1+INST)**2", NOM_PARA="INST")

kineClamp = AFFE_CHAR_CINE_F(
    MODELE=MOPOU,
    MECA_IMPO=(
        _F(GROUP_NO="A", DX=ZERO, DY=ZERO),
        _F(GROUP_NO="B", DY=V_INST),
        _F(GROUP_NO="TOUS_NO", DZ=ZERO, DRX=ZERO, DRY=ZERO),
    ),
)

FF = FORMULE(VALE="1./(1+INST)", NOM_PARA="INST")

# Matrix
rigiElem = CALC_MATR_ELEM(OPTION="RIGI_MECA", MODELE=MOPOU, CHAM_MATER=CHMAT, CARA_ELEM=POUCA)

massElem = CALC_MATR_ELEM(OPTION="MASS_MECA", MODELE=MOPOU, CHAM_MATER=CHMAT, CARA_ELEM=POUCA)

dampElem = CALC_MATR_ELEM(
    OPTION="AMOR_MECA",
    MODELE=MOPOU,
    CARA_ELEM=POUCA,
    CHAM_MATER=CHMAT,
    RIGI_MECA=rigiElem,
    MASS_MECA=massElem,
)

numeDof = NUME_DDL(MATR_RIGI=rigiElem)

rigiAsse = ASSE_MATRICE(MATR_ELEM=rigiElem, NUME_DDL=numeDof, CHAR_CINE=kineClamp)

massAsse = ASSE_MATRICE(MATR_ELEM=massElem, NUME_DDL=numeDof, CHAR_CINE=kineClamp)

dampAsse = ASSE_MATRICE(MATR_ELEM=dampElem, NUME_DDL=numeDof, CHAR_CINE=kineClamp)

# Seismic load
seismDir = CALC_CHAR_SEISME(MATR_MASS=massAsse, DIRECTION=(0.0, -1.0, 0.0), MONO_APPUI="OUI")

# CALCUL DYNAMIQUE LINEAIRE TRANSITOIRE
U3 = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="PHYS",
    MATR_MASS=massAsse,
    MATR_RIGI=rigiAsse,
    MATR_AMOR=dampAsse,
    MODELE=MOPOU,
    CARA_ELEM=POUCA,
    CHAM_MATER=CHMAT,
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
    EXCIT=(_F(VECT_ASSE=seismDir, FONC_MULT=ACCELERO), _F(CHARGE=kineClamp, FONC_MULT=FF)),
    INCREMENT=_F(LIST_INST=LINST, INST_FIN=3),
)


TEST_RESU(
    RESU=(
        _F(
            INST=1,
            GROUP_NO="B",
            REFERENCE="ANALYTIQUE",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=2.0,
            VALE_REFE=2,
        ),
        _F(
            INST=1,
            GROUP_NO="C",
            REFERENCE="AUTRE_ASTER",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=1.0033303514443188,
            VALE_REFE=1.00333035144289,
        ),
        _F(
            INST=2,
            GROUP_NO="B",
            REFERENCE="ANALYTIQUE",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=3.0,
            VALE_REFE=3,
        ),
        _F(
            INST=2,
            GROUP_NO="C",
            REFERENCE="AUTRE_ASTER",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=1.4977492161455976,
            VALE_REFE=1.497749216143394,
        ),
        _F(
            INST=3,
            GROUP_NO="B",
            REFERENCE="ANALYTIQUE",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=4.0,
            VALE_REFE=4,
        ),
        _F(
            INST=3,
            GROUP_NO="C",
            REFERENCE="AUTRE_ASTER",
            RESULTAT=U3,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            VALE_CALC=1.998253768440979,
            VALE_REFE=1.9982537684381767,
        ),
    )
)

FIN()
