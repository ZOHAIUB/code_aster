# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from math import exp

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))


# Propriétés matériaux
E = 2.0e11
NU = 0.3
SIGY = 1.5e8

# Calculs des modules
K = E / (3 * (1 - 2 * NU))
MU = E / (2 * (1 + NU))

# Géométrie de la sphére
RA_INI = 0.2
RB_INI = 1.0

# Calculs des solutions de références en RB_FIN
RB_FIN = exp(SIGY / 3.0 * (1.0 / (2.0 * MU) + 2.0 / (3.0 * K))) * RB_INI
DB = RB_FIN - RB_INI

# Formules utilisées pour le calcul de la solution analytique
SOMME = FORMULE(VALE="SIXX+SIYY+SIZZ", NOM_PARA=["SIXX", "SIYY", "SIZZ"])
RAYON = FORMULE(
    VALE="(COOR_X*COOR_X+COOR_Y*COOR_Y+COOR_Z*COOR_Z)**(0.5)",
    NOM_PARA=["COOR_X", "COOR_Y", "COOR_Z"],
)
SOL_ANA = FORMULE(
    VALE="(3.*(K*(1-(1-4.*SIGY/K*log(RAYON/RB_FIN))**0.5))+2.*SIGY)/exp(2.*SIGY/(3.*K)+1-(1-4.*SIGY/K*(log(RAYON/RB_FIN)))**0.5)",
    K=K,
    SIGY=SIGY,
    RB_FIN=RB_FIN,
    NOM_PARA="RAYON",
)
INTEG = FORMULE(
    VALE="(3.*RAYON**2.)/(exp(2.*SIGY/(3.*K)+1-(1.-4.*SIGY/K*(log(RAYON/RB_FIN)))**0.5))",
    SIGY=SIGY,
    K=K,
    RB_FIN=RB_FIN,
    NOM_PARA="RAYON",
)

MA0 = LIRE_MAILLAGE(FORMAT="MED")

MA = CREA_MAILLAGE(MAILLAGE=MA0, MODI_HHO=_F(TOUT="OUI")).refine(1)

MA = DEFI_GROUP(reuse=MA, MAILLAGE=MA, CREA_GROUP_MA=_F(NOM="VOLUME", TOUT="OUI", TYPE_MAILLE="3D"))

MA = MODI_MAILLAGE(reuse=MA, MAILLAGE=MA, ORIE_PEAU=_F(GROUP_MA_PEAU="S_INT"))

MAT = DEFI_MATERIAU(ELAS=_F(E=E, NU=NU), ECRO_LINE=_F(D_SIGM_EPSI=0.0, SY=SIGY))

CHMAT = AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(TOUT="OUI", MATER=MAT))

LREEL = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=1.0, NOMBRE=10))

LINST = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=LREEL))

RAMPE = DEFI_FONCTION(NOM_PARA="INST", VALE=(0, 0, 1, 1))


MO = AFFE_MODELE(
    MAILLAGE=MA,
    AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D_HHO", FORMULATION="LINEAIRE"),
)

CHAR = AFFE_CHAR_MECA(MODELE=MO, PRES_REP=_F(GROUP_MA="S_INT", PRES=5.43e8))

CL = AFFE_CHAR_CINE(
    MODELE=MO,
    MECA_IMPO=(_F(GROUP_MA="SYM_Z", DZ=0), _F(GROUP_MA="SYM_Y", DY=0), _F(GROUP_MA="SYM_X", DX=0)),
)

RESU = STAT_NON_LINE(
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=CHAR, TYPE_CHARGE="FIXE_CSTE", FONC_MULT=RAMPE), _F(CHARGE=CL)),
    COMPORTEMENT=_F(RELATION="VMIS_ISOT_LINE", DEFORMATION="GDEF_LOG"),
    NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
    INCREMENT=_F(LIST_INST=LINST),
    CONVERGENCE=_F(ITER_GLOB_MAXI=20, SIGM_REFE=SIGY, RESI_REFE_RELA=1.0e-4),
)

DEPL = CREA_CHAMP(TYPE_CHAM="NOEU_DEPL_R", OPERATION="EXTR", RESULTAT=RESU, NOM_CHAM="DEPL", INST=1)

MA = MODI_MAILLAGE(reuse=MA, MAILLAGE=MA, DEFORME=_F(OPTION="TRAN", DEPL=DEPL))

RESU = CALC_CHAMP(
    reuse=RESU,
    RESULTAT=RESU,
    CRITERES=("SIEQ_ELGA", "SIEQ_NOEU"),
    CONTRAINTE=("SIEF_NOEU"),
    FORCE=("FORC_NODA"),
)

TRAVEXT = POST_ELEM(TRAV_EXT=_F(), RESULTAT=RESU)

TEST_TABLE(
    TABLE=TRAVEXT,
    NOM_PARA="TRAV_REEL",
    FILTRE=_F(NOM_PARA="INST", VALE=1.0),
    VALE_CALC=468623.98906743655,
)


# Calcul de la solution analytique
SIG = CREA_CHAMP(
    TYPE_CHAM="ELGA_SIEF_R", OPERATION="EXTR", RESULTAT=RESU, NOM_CHAM="SIEF_ELGA", INST=1
)

P_N = CREA_CHAMP(
    TYPE_CHAM="ELGA_VARI_R", OPERATION="EXTR", RESULTAT=RESU, NOM_CHAM="VARI_ELGA", INST=1
)

TRESU = CREA_TABLE(RESU=_F(CHAM_GD=SIG, TOUT_CMP="OUI", TOUT="OUI"))

TRESUP = CREA_TABLE(RESU=_F(CHAM_GD=P_N, NOM_CMP="V1", TOUT="OUI"))

TRESU = CALC_TABLE(
    reuse=TRESU,
    TABLE=TRESU,
    ACTION=(
        _F(OPERATION="OPER", FORMULE=RAYON, NOM_PARA="RAYON"),
        _F(OPERATION="OPER", FORMULE=SOMME, NOM_PARA="SIH_N"),
        _F(OPERATION="OPER", FORMULE=SOL_ANA, NOM_PARA="SIH_A"),
        _F(OPERATION="COMB", TABLE=TRESUP, NOM_PARA=("MAILLE", "POINT")),
        _F(OPERATION="RENOMME", NOM_PARA=("V1", "P_N")),
        _F(OPERATION="TRI", NOM_PARA="RAYON", ORDRE="CROISSANT"),
    ),
)

# Pour calculer la solution analytique pour la déformation plastique cumulée
# il faut décommenter les lignes qui suivent
# tresu=TRESU.EXTR_TABLE()
# tcol=tresu['RAYON'].values()
# tval=tcol['RAYON']
# tval.append(RB_FIN)

# FAINTEG=CALC_FONC_INTERP(FONCTION=INTEG,
# NOM_PARA='DX',
# VALE_PARA=tval,
# PROL_DROITE='EXCLU',
# PROL_GAUCHE='EXCLU',)

# FINTEG=CALC_FONCTION(INTEGRE=_F(FONCTION=FAINTEG,),)

# rayon, finteg = FINTEG.Valeurs()

# P_A=[None]*(len(rayon)-1)
# for j in range(0,len(rayon)-1):
# P_A[j]=((RB_INI**3-(finteg[-1]-finteg[j]))**(1./3.))
# Tau_rr=K*(1.-(1.-4.*SIGY/K*log(rayon[j]/(1.+DB)))**0.5)
# ln_j=Tau_rr/K+2.*SIGY/(3.*K)
# P_A[j]=2.*log(rayon[j]/P_A[j])-SIGY/3./MU-2./3.*ln_j

# tval.pop(-1)
# TRESUPA=CREA_TABLE(LISTE=(_F(LISTE_R=tval,
# PARA='RAYON',),
# _F(LISTE_R=P_A,
# PARA='P_A',),),)

# TRESU=CALC_TABLE(reuse=TRESU,
# TABLE=TRESU,
# ACTION=_F(OPERATION='COMB',
# TABLE=TRESUPA,
# NOM_PARA='RAYON',),)

# IMPR_TABLE(TABLE=TRESU,
# FORMAT_R='E12.10',
# NOM_PARA=('MAILLE','POINT','RAYON','SIH_N','SIH_A','P_N','P_A'),)

# DETRUIRE(NOM=(TRESUPA,FINTEG,FAINTEG),
# INFO=1,)
# Fin des instructions pour calculer la solution analytique

TEST_TABLE(
    TABLE=TRESU,
    NOM_PARA="SIH_N",
    FILTRE=_F(NOM_PARA="RAYON", CRIT_COMP="MINI"),
    REFERENCE="ANALYTIQUE",
    VALE_REFE=-1039075544.0,
    PRECISION=0.2,
    VALE_CALC=-864634851.0170234,
)

TEST_TABLE(
    TABLE=TRESU,
    NOM_PARA="SIH_N",
    FILTRE=_F(NOM_PARA="RAYON", CRIT_COMP="MAXI"),
    REFERENCE="ANALYTIQUE",
    VALE_REFE=280042736.64,
    PRECISION=0.01,
    VALE_CALC=282024733.9431915,
)

TEST_TABLE(
    TABLE=TRESU,
    NOM_PARA="P_N",
    FILTRE=_F(NOM_PARA="RAYON", CRIT_COMP="MINI"),
    REFERENCE="ANALYTIQUE",
    VALE_REFE=0.13857481948,
    PRECISION=0.1,
    VALE_CALC=0.1484523239275907,
)

TEST_TABLE(
    TABLE=TRESU,
    NOM_PARA="P_N",
    FILTRE=_F(NOM_PARA="RAYON", CRIT_COMP="MAXI"),
    REFERENCE="ANALYTIQUE",
    VALE_REFE=7.5327100205e-05,
    PRECISION=0.35,
    VALE_CALC=5.0289919146918325e-05,
)

DEPLM = CREA_CHAMP(TYPE_CHAM="NOEU_DEPL_R", OPERATION="COMB", COMB=_F(CHAM_GD=DEPL, COEF_R=-1.0))

MA = MODI_MAILLAGE(reuse=MA, MAILLAGE=MA, DEFORME=_F(OPTION="TRAN", DEPL=DEPLM))


FIN()
