# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: david.haboussa at edf.fr
#
from numpy import *

POURSUITE(CODE="OUI", DEBUG=_F(SDVERI="NON"))
##chargement


EPSZZ = DEFI_FONCTION(
    NOM_PARA="INST", NOM_RESU="EPSI", VALE=(0.0, 0.0, 1.0, 0.05), PROL_DROITE="LINEAIRE"
)


LINST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=1.0, NOMBRE=1000),))

DEFLIST1 = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=LINST))

# avec irradiation
nbgr = 100
nb_syst = 12
nvarit = 7 + nbgr * (6 + 3 * nb_syst + 2 * nb_syst + 6) + 1

nvarpargr = 3 * nb_syst


# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(nvarit)
for igr in range(nbgr):
    for isy in range(12):
        avari[7 + 6 * nbgr + igr * nvarpargr + isy * 3] = RHO_0

# initialisation rho_loops
for igr in range(nbgr):
    for isy in range(12):
        avari[7 + 6 * nbgr + nbgr * nvarpargr + 12 * igr + isy] = RHO_LOOPS

# initialisation phi_voids
for igr in range(nbgr):
    for isy in range(12):
        avari[7 + 6 * nbgr + nbgr * nvarpargr + 12 * nbgr + 12 * igr + isy] = PHI_VOIDS

lvari = list(avari)


SOLNLi = SIMU_POINT_MAT(
    INFO=1,
    COMPORTEMENT=_F(
        RELATION="POLYCRISTAL", COMPOR=COMPORPi, ALGO_INTE="RUNGE_KUTTA", RESI_INTE=1.0e-4
    ),
    NEWTON=_F(MATRICE="ELASTIQUE", PREDICTION="EXTRAPOLE"),
    CONVERGENCE=_F(ITER_GLOB_MAXI=50, RESI_GLOB_RELA=1.0e-4),
    MATER=ACIERDDi,
    NB_VARI_TABLE=6,
    VARI_INIT=_F(VALE=lvari),
    INCREMENT=_F(LIST_INST=DEFLIST1),
    ARCHIVAGE=_F(LIST_INST=LINST),
    EPSI_IMPOSE=_F(EPZZ=EPSZZ),
)


IMPR_TABLE(TABLE=SOLNLi)

# sans irradiation
nbgr = 100
nb_syst = 12
nvarit = 7 + nbgr * (6 + 3 * nb_syst + 6) + 1

nvarpargr = 3 * nb_syst


# densites de dislocation initiales : variables internes de 0 a 44
avari = zeros(nvarit)
for igr in range(nbgr):
    for isy in range(12):
        avari[7 + 6 * nbgr + igr * nvarpargr + isy * 3] = RHO_0

lvari = list(avari)


SOLNL = SIMU_POINT_MAT(
    INFO=1,
    COMPORTEMENT=_F(
        RELATION="POLYCRISTAL", COMPOR=COMPORP, ALGO_INTE="RUNGE_KUTTA", RESI_INTE=1.0e-4
    ),
    NEWTON=_F(MATRICE="ELASTIQUE", PREDICTION="EXTRAPOLE"),
    CONVERGENCE=_F(ITER_GLOB_MAXI=50, RESI_GLOB_RELA=1.0e-4),
    MATER=ACIERDD,
    NB_VARI_TABLE=6,
    VARI_INIT=_F(VALE=lvari),
    INCREMENT=_F(LIST_INST=DEFLIST1),
    ARCHIVAGE=_F(LIST_INST=LINST),
    EPSI_IMPOSE=_F(EPZZ=EPSZZ),
)


# IMPR_TABLE(TABLE=SOLNL)

F_SI = RECU_FONCTION(TABLE=SOLNL, PARA_X="INST", PARA_Y="SIZZ")

F_EP = RECU_FONCTION(TABLE=SOLNL, PARA_X="INST", PARA_Y="EPZZ")

F_SIi = RECU_FONCTION(TABLE=SOLNLi, PARA_X="INST", PARA_Y="SIZZ")

F_EPi = RECU_FONCTION(TABLE=SOLNLi, PARA_X="INST", PARA_Y="EPZZ")

IMPR_FONCTION(
    FORMAT="XMGRACE",
    UNITE=38,
    LEGENDE_X="\\f{Symbol}e\\f{}\\sll",
    LEGENDE_Y="\\f{Symbol}s\\f{}\\sll (MPa)",
    COURBE=(_F(FONC_X=F_EP, FONC_Y=F_SI), _F(FONC_X=F_EPi, FONC_Y=F_SIi)),
)


TEST_FONCTION(VALEUR=_F(VALE_CALC=658.4318810550, VALE_PARA=1.0, NOM_PARA="INST", FONCTION=F_SIi))


TEST_FONCTION(VALEUR=_F(VALE_CALC=461.8218055678, VALE_PARA=1.0, NOM_PARA="INST", FONCTION=F_SI))
FIN()
