# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_NON_LINE
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE="OUI")

MAIL = LIRE_MAILLAGE(FORMAT="ASTER")
#
# Modèle
Modele = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(_F(GROUP_MA=("MASSE", "GM0203", "GM0102"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),),
)


#
ZERO = DEFI_CONSTANTE(VALE=0.0)


def Rampe(t):
    if t <= 0.0:
        return 0.0
    if t <= 5.0:
        return t / 5.0
    if t <= 15.0:
        return 1.0
    if t <= 20.0:
        return (20.0 - t) / 5.0
    return 0.0


def FDeplax(t):
    uu = 0.20
    ff = 1.0
    ww = 2.0 * NU.pi
    zz = uu * sin(ww * t * ff) * Rampe(t)
    return zz


def FDeplay(t):
    uu = [0.20, 0.15, 0.10]
    ff = [0.80, 1.50, 3.00]
    ww = 2.0 * NU.pi
    zz = 0.0
    for u, f in zip(uu, ff):
        zz += u * sin(ww * t * f) * Rampe(t)
    return zz


def FDeplaz(t):
    uu = [-0.20, 0.15, -0.10]
    ff = [0.90, 2.00, 2.80]
    ww = 2.0 * NU.pi
    zz = 0.0
    for u, f in zip(uu, ff):
        zz += u * sin(ww * t * f) * Rampe(t)
    return zz


# Fonction d'écrouissage
ldepla = NU.array([0.00, 0.100, 20.1])
lforce = NU.array([0.00, 100.0, 350.0])
Kp = 1000.0
Masse = 200.0

fctsy = DEFI_FONCTION(NOM_PARA="DTAN", ABSCISSE=ldepla, ORDONNEE=lforce)

# Définition des matériaux
Fusib01 = DEFI_MATERIAU(DIS_ECRO_TRAC=_F(FTAN=fctsy, ECROUISSAGE="CINEMATIQUE"))

CHMAT = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=(_F(GROUP_MA="GM0102", MATER=Fusib01),))

# Caractéristiques : Ressorts / Masse
caraElem = AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F(REPERE="LOCAL", CARA="M_T_D_L", GROUP_MA="GM0102", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="GM0102", VALE=(Kp, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_N", GROUP_MA="MASSE", VALE=(Masse)),
        _F(REPERE="LOCAL", CARA="K_T_D_N", GROUP_MA="MASSE", VALE=(0.0, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_L", GROUP_MA="GM0203", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="GM0203", VALE=(Kp, 400.0, 400.0)),
    ),
)
#
# Liste d'instant
TempsMaxi = 20.0
DeltaPas = 0.02
# pour l'interpolation des fonctions
LinstF = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=TempsMaxi, PAS=DeltaPas / 10.0))
# pour le calcul
Linst = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=TempsMaxi, PAS=DeltaPas))
#
DEPLX = FORMULE(VALE="FDeplax(INST)", FDeplax=FDeplax, NOM_PARA="INST")
DEPLY = FORMULE(VALE="FDeplay(INST)", FDeplay=FDeplay, NOM_PARA="INST")
DEPLZ = FORMULE(VALE="FDeplaz(INST)", FDeplaz=FDeplaz, NOM_PARA="INST")
#
DEPLIX = CALC_FONC_INTERP(
    NOM_RESU="DEPLIX",
    FONCTION=DEPLX,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
DEPLIY = CALC_FONC_INTERP(
    NOM_RESU="DEPLIY",
    FONCTION=DEPLY,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
DEPLIZ = CALC_FONC_INTERP(
    NOM_RESU="DEPLIZ",
    FONCTION=DEPLZ,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
#
CONDLIM = AFFE_CHAR_MECA_F(
    MODELE=Modele,
    DDL_IMPO=(
        _F(GROUP_NO="N01", DX=DEPLIX, DY=DEPLIY, DZ=DEPLIZ),
        _F(GROUP_NO="N03", DX=DEPLIX, DY=DEPLIY, DZ=DEPLIZ),
    ),
)
#
DEPL0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
VITE0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
ACCE0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
#
LLinst = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=Linst))
# --------------------------------------------------------------------------------------------------
#
RESU = DYNA_NON_LINE(
    MODELE=Modele,
    CHAM_MATER=CHMAT,
    CARA_ELEM=caraElem,
    EXCIT=(_F(CHARGE=CONDLIM),),
    ETAT_INIT=_F(DEPL=DEPL0, VITE=VITE0, ACCE=ACCE0),
    COMPORTEMENT=(_F(RELATION="ELAS", TOUT="OUI"), _F(RELATION="DIS_ECRO_TRAC", GROUP_MA="GM0102")),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
    INCREMENT=_F(LIST_INST=LLinst),
    CONVERGENCE=_F(ITER_GLOB_MAXI=30, RESI_REFE_RELA=1.0e-06, EFFORT_REFE=1.0),
    NEWTON=_F(REAC_INCR=1, REAC_ITER=1, MATRICE="TANGENTE"),
)
# --------------------------------------------------------------------------------------------------
#   Résultat sur Fusib01
TABVARI1 = CREA_TABLE(
    RESU=_F(RESULTAT=RESU, GROUP_MA="GM0102", NOM_CHAM="VARI_ELGA", TOUT_CMP="OUI")
)
TABVARI1 = CALC_TABLE(
    reuse=TABVARI1,
    TABLE=TABVARI1,
    ACTION=(
        _F(OPERATION="FILTRE", NOM_PARA="POINT", CRIT_COMP="EQ", VALE=2),
        _F(OPERATION="EXTR", NOM_PARA=("NUME_ORDRE", "INST", "V2", "V3", "V5", "V6", "V7", "V8")),
    ),
)
#
"""
IMPR_RESU(FORMAT='RESULTAT', RESU=_F(RESULTAT=RESU,),)

IMPR_TABLE(UNITE=38, TABLE=TABVARI1, FORMAT_R='E17.10')
Lordre = [9, 40, 73, 98, 139, 192, 239, 274, 306, 342, 377, 402, 419, 446, 483, 499, 534, 567, 599,
          632, 658, 695, 731, 767, 794, 828, 877, 903, 923, 946, 983, ]
IMPR_TABLE(UNITE=39, TABLE=TABVARI1, FORMAT_R='E17.10',
           FILTRE=_F(NOM_PARA='NUME_ORDRE',CRIT_COMP='EQ',VALE_I=Lordre,CRITERE='ABSOLU'))
"""
# NUME_ORDRE
#       INST      V2                 V3                 V5                 V6                 V7                 V8
ResuIntgr = {
    9: (
        1.800e-01,
        -9.7633895513e00,
        1.8038422368e00,
        -9.7633895513e-03,
        1.8038422368e-03,
        0.0000000000e00,
        0.0000000000e00,
    ),
    40: (
        8.000e-01,
        2.5306038843e-01,
        -7.3561108838e00,
        2.5306038843e-04,
        -7.3561108838e-03,
        0.0000000000e00,
        0.0000000000e00,
    ),
    73: (
        1.460e00,
        -8.5865192139e01,
        5.3235024414e01,
        -1.4690774753e-01,
        1.0903237718e-01,
        8.3227201162e00,
        8.3227196282e-02,
    ),
    98: (
        1.960e00,
        7.8773673460e01,
        -6.1084709402e01,
        6.5004341085e-02,
        -3.7940641933e-02,
        1.7006873559e01,
        1.7006867291e-01,
    ),
    139: (
        2.780e00,
        -9.9940145859e01,
        -2.0765210417e01,
        -2.6901818785e-01,
        -1.3204157893e-02,
        5.4641871465e01,
        5.4641861373e-01,
    ),
    192: (
        3.840e00,
        -1.2475449255e01,
        -6.2610709260e01,
        9.5815899571e-02,
        1.5298112370e-02,
        1.3680120015e02,
        1.3680113166e00,
    ),
    239: (
        4.780e00,
        -7.3002237550e01,
        7.0488355909e01,
        3.8394970673e-02,
        3.6153069156e-01,
        3.1805599363e02,
        3.1805580123e00,
    ),
    274: (
        5.480e00,
        -7.1844599907e00,
        3.8984725149e01,
        -3.2736341808e-01,
        1.4136396295e-01,
        4.0809181014e02,
        4.0809160412e00,
    ),
    306: (
        6.120e00,
        -9.5000502820e01,
        -3.3001694235e01,
        -1.5363509562e-01,
        -1.7372773716e-03,
        5.7365414407e02,
        5.7365381237e00,
    ),
    342: (
        6.780e00,
        -1.1242871377e00,
        1.0146264195e02,
        -3.6084317149e-01,
        2.2165698619e-01,
        6.3037056083e02,
        6.3037022541e00,
    ),
    377: (
        7.480e00,
        -7.4050699555e01,
        -7.0357170645e01,
        -1.5970188136e-01,
        -2.2651544466e-01,
        7.9746712984e02,
        7.9746678309e00,
    ),
    402: (
        7.980e00,
        -6.1452955898e01,
        4.0370353771e01,
        -2.1686065092e-02,
        3.0076883936e-01,
        8.4510058962e02,
        8.4510024105e00,
    ),
    419: (
        8.320e00,
        7.4745800359e01,
        7.0941631754e01,
        2.6989237702e-01,
        2.1560516129e-01,
        9.2040480709e02,
        9.2040440210e00,
    ),
    446: (
        8.860e00,
        -6.2757383511e00,
        9.9119338366e01,
        -1.6850983620e-01,
        3.6587847034e-02,
        1.0306485441e03,
        1.0306480972e01,
    ),
    483: (
        9.600e00,
        7.5558106903e01,
        -7.1168316110e01,
        1.9451456129e-01,
        -3.8441866869e-01,
        1.1739912914e03,
        1.1739907915e01,
    ),
    499: (
        9.920e00,
        2.8029280771e01,
        5.1927178497e01,
        2.3757267844e-01,
        -7.7734300484e-02,
        1.1954511241e03,
        1.1954506198e01,
    ),
    534: (
        1.062e01,
        -1.0255476090e01,
        -1.0332996587e02,
        5.1953143648e-02,
        -4.1471014752e-01,
        1.3389762657e03,
        1.3389756969e01,
    ),
    567: (
        1.128e01,
        -6.7509860478e01,
        7.2390958577e01,
        7.0000819612e-02,
        9.2112934564e-02,
        1.4289869349e03,
        1.4289863354e01,
    ),
    599: (
        1.192e01,
        9.7241087436e01,
        -3.1790208538e01,
        2.8479548432e-01,
        -4.4695597827e-02,
        1.5682779458e03,
        1.5682773161e01,
    ),
    632: (
        1.258e01,
        -2.7257254219e01,
        2.0543731996e01,
        1.9648088915e-01,
        2.2302599963e-01,
        1.6586176174e03,
        1.6586169745e01,
    ),
    658: (
        1.310e01,
        6.1123378470e01,
        -8.3462620987e01,
        1.0775094633e-01,
        -3.8881723071e-01,
        1.7676966196e03,
        1.7676959493e01,
    ),
    695: (
        1.384e01,
        -3.3401749008e01,
        -7.4270089651e01,
        1.1325957762e-01,
        1.0675208974e-01,
        1.8761208826e03,
        1.8761201866e01,
    ),
    731: (
        1.456e01,
        8.4598398301e01,
        -5.8678441460e01,
        3.8056470255e-01,
        -4.5361854344e-02,
        2.0555734017e03,
        2.0555725775e01,
    ),
    767: (
        1.528e01,
        -3.3657824144e01,
        -1.7243068139e01,
        -1.2919996043e-01,
        -2.1296025073e-01,
        2.1478834703e03,
        2.1478826082e01,
    ),
    794: (
        1.582e01,
        7.6333363829e01,
        7.0639326411e01,
        2.0365530376e-01,
        4.0096077416e-01,
        2.2596789282e03,
        2.2596780494e01,
    ),
    828: (
        1.650e01,
        -2.9005495139e00,
        8.0758028799e00,
        -4.0329777734e-02,
        -1.1379761308e-02,
        2.3207206904e03,
        2.3207198010e01,
    ),
    877: (
        1.748e01,
        -8.4781719422e01,
        -5.0999103540e01,
        5.3256032200e-03,
        -3.8267739103e-02,
        2.4182749393e03,
        2.4182740166e01,
    ),
    903: (
        1.800e01,
        -4.1365186407e01,
        4.4149701243e01,
        4.2679976384e-02,
        1.7003344910e-01,
        2.4301603921e03,
        2.4301594614e01,
    ),
    923: (
        1.840e01,
        8.0376896152e01,
        -5.9417284041e01,
        1.5707462973e-01,
        4.8547734094e-02,
        2.4331573797e03,
        2.4331564472e01,
    ),
    946: (
        1.886e01,
        -9.2069244247e01,
        3.4042128439e01,
        -2.5636293603e-02,
        3.2531541328e-02,
        2.4522799776e03,
        2.4522790403e01,
    ),
    983: (
        1.960e01,
        -6.2204953255e00,
        -5.8333737502e01,
        4.3155639731e-02,
        -4.7102173316e-02,
        2.4544126784e03,
        2.4544117400e01,
    ),
}

Lpara = [("V2", 1), ("V3", 2), ("V5", 3), ("V6", 4), ("V7", 5), ("V8", 6)]
for nume_ordre in list(ResuIntgr.keys()):
    for para, indx in Lpara:
        TEST_TABLE(
            TABLE=TABVARI1,
            FILTRE=_F(NOM_PARA="NUME_ORDRE", CRIT_COMP="EQ", VALE_I=nume_ordre),
            NOM_PARA=para,
            VALE_CALC=ResuIntgr[nume_ordre][indx],
            VALE_REFE=ResuIntgr[nume_ordre][indx],
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-06,
        )
FIN()
