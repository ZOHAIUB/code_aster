# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
#
DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="NON"))
# SDVERI='NON' car la verification est trop couteuse en CPU
import numpy as NU

mail = LIRE_MAILLAGE(UNITE=20, FORMAT="ASTER")

modele = AFFE_MODELE(
    MAILLAGE=mail, AFFE=_F(GROUP_MA=("GAC", "RESSORT"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T")
)

Pesanteur = 10.0
Raidxyz = 2.0
Masse = 15.0
#
Kress = 500.0
Tfin = 10.0
#
carael = AFFE_CARA_ELEM(
    MODELE=modele,
    DISCRET=(
        _F(GROUP_MA="RESSORT", REPERE="LOCAL", CARA="K_T_D_L", VALE=(Kress, Kress, Kress)),
        _F(GROUP_MA="RESSORT", CARA="M_T_D_L", VALE=(0.0,)),
        _F(GROUP_MA="RESSORT", CARA="A_T_D_L", VALE=(0.0, 0.0, 0.0)),
        _F(GROUP_MA="GAC", REPERE="LOCAL", CARA="K_T_D_L", VALE=(Raidxyz, Raidxyz, Raidxyz)),
        _F(GROUP_MA="GAC", CARA="M_T_D_L", VALE=(Masse,)),
        _F(GROUP_MA="GAC", CARA="A_T_D_L", VALE=(0.0, 0.0, 0.0)),
    ),
)
charge = AFFE_CHAR_MECA(
    MODELE=modele,
    PESANTEUR=_F(GROUP_MA="GAC", GRAVITE=Pesanteur, DIRECTION=(1.0, 0.0, 0.0)),
    DDL_IMPO=(_F(GROUP_NO="PT2", DX=0.0, DY=0.0, DZ=0.0), _F(GROUP_NO="PT3", DY=0.0, DZ=0.0)),
)
FDeplT = FORMULE(
    VALE="0.25*sin(2.0*pi*INST)+0.10*sin(2.0*pi*1.5*INST)+0.10*sin(2.0*pi*3.0*INST)",
    NOM_PARA="INST",
)
pas = 1.0 / (4.0 * 10.0)
lsignal = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=Tfin, PAS=pas),))
DeplT = CALC_FONC_INTERP(
    FONCTION=FDeplT,
    LIST_PARA=lsignal,
    NOM_PARA="INST",
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
    INTERPOL="LIN",
)
CLdepl = AFFE_CHAR_MECA_F(MODELE=modele, DDL_IMPO=(_F(GROUP_NO="PT3", DX=DeplT),))
#
ldepla = NU.array([0.00, 2.00, 5.00, 7.000, 9.500, 13.000, 16.000, 200.000]) / 10.0
lforce = NU.array([4.00, 4.00, 4.50, 4.000, 3.750, 3.500, 3.000, 3.000]) * 100.0
# Raideur variable
lraide = NU.array([2.00, 2.00, 1.80, 1.400, 1.400, 1.350, 1.330, 1.330]) * 1000.0
# Amortissement nul
lamort = NU.array([1.00, 1.00, 1.00, 0.800, 0.800, 0.700, 0.600, 0.600]) * 0.0

fctfx = DEFI_FONCTION(NOM_PARA="DX", ABSCISSE=ldepla, ORDONNEE=lforce)
fctrd = DEFI_FONCTION(NOM_PARA="DX", ABSCISSE=ldepla, ORDONNEE=lraide)
fctam = DEFI_FONCTION(NOM_PARA="DX", ABSCISSE=ldepla, ORDONNEE=lamort)

grilleac = DEFI_MATERIAU(
    INFO=2,
    DIS_CHOC_ENDO=_F(
        FX=fctfx, RIGI_NOR=fctrd, AMOR_NOR=fctam, DIST_1=0.0, DIST_2=0.0, CRIT_AMOR="INCLUS"
    ),
)

chmat = AFFE_MATERIAU(MAILLAGE=mail, AFFE=_F(GROUP_MA="GAC", MATER=grilleac))
#
# --------------------------------------------------------------------
pas1 = 0.005
l_inst1 = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=Tfin, PAS=pas1),))

resu1 = DYNA_NON_LINE(
    MODELE=modele,
    CHAM_MATER=chmat,
    CARA_ELEM=carael,
    EXCIT=(_F(CHARGE=charge), _F(CHARGE=CLdepl)),
    COMPORTEMENT=(_F(GROUP_MA="GAC", RELATION="CHOC_ENDO"),),
    INCREMENT=_F(LIST_INST=l_inst1),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
    CONVERGENCE=_F(RESI_REFE_RELA=5.0e-02, EFFORT_REFE=1.0),
    NEWTON=_F(REAC_INCR=1, MATRICE="TANGENTE", REAC_ITER=1),
    ARCHIVAGE=_F(LIST_INST=l_inst1),
)

# --------------------------------------------------------------------
pas2 = 0.010
l_inst2 = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=Tfin, PAS=pas2),))

resu2 = DYNA_NON_LINE(
    MODELE=modele,
    CHAM_MATER=chmat,
    CARA_ELEM=carael,
    EXCIT=(_F(CHARGE=charge), _F(CHARGE=CLdepl)),
    COMPORTEMENT=(_F(GROUP_MA="GAC", RELATION="CHOC_ENDO"),),
    INCREMENT=_F(LIST_INST=l_inst2),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
    CONVERGENCE=_F(RESI_REFE_RELA=5.0e-02, EFFORT_REFE=1.0),
    NEWTON=_F(REAC_INCR=1, MATRICE="TANGENTE", REAC_ITER=1),
    ARCHIVAGE=_F(LIST_INST=l_inst2),
)
#
DEPL11 = RECU_FONCTION(RESULTAT=resu1, NOM_CHAM="DEPL", NOM_CMP="DX", GROUP_NO="PT1")
FORC_1 = RECU_FONCTION(RESULTAT=resu1, NOM_CHAM="SIEF_ELGA", NOM_CMP="N", GROUP_MA="GAC", POINT=1)
PCUM_1 = RECU_FONCTION(RESULTAT=resu1, NOM_CHAM="VARI_ELGA", NOM_CMP="V1", GROUP_MA="GAC", POINT=1)
#
DEPL12 = RECU_FONCTION(RESULTAT=resu2, NOM_CHAM="DEPL", NOM_CMP="DX", GROUP_NO="PT1")
FORC_2 = RECU_FONCTION(RESULTAT=resu2, NOM_CHAM="SIEF_ELGA", NOM_CMP="N", GROUP_MA="GAC", POINT=1)
PCUM_2 = RECU_FONCTION(RESULTAT=resu2, NOM_CHAM="VARI_ELGA", NOM_CMP="V1", GROUP_MA="GAC", POINT=1)
#
# INST             DEPL              FORC              PCUM
Resultat1 = [
    1.1000000000e-01,
    8.6804086791e-02,
    0.0000000000e00,
    0.0000000000e00,
    1.4000000000e-01,
    1.4623320513e-01,
    -9.2478605109e01,
    0.0000000000e00,
    2.0000000000e-01,
    2.8109617676e-01,
    -3.6220454837e02,
    0.0000000000e00,
    2.1000000000e-01,
    3.0093325059e-01,
    -4.0017149359e02,
    7.9032965973e-04,
    3.0000000000e-01,
    3.8739477389e-01,
    -4.1472549571e02,
    7.3736365652e-02,
    3.7000000000e-01,
    3.2991549115e-01,
    -3.0315758096e02,
    7.3736365652e-02,
    4.5000000000e-01,
    1.8714971701e-01,
    -2.6047656137e01,
    7.3736365652e-02,
    4.6000000000e-01,
    1.6888407653e-01,
    -2.1826145513e-02,
    7.3736365652e-02,
    1.0300000000e00,
    1.7005882682e-01,
    -2.1826145512e-02,
    7.3736365652e-02,
    1.1000000000e00,
    3.3800197768e-01,
    -3.1885897562e02,
    7.3736365652e-02,
    1.1800000000e00,
    4.2898285303e-01,
    -4.2173687946e02,
    1.0855194715e-01,
    1.2200000000e00,
    4.0791574219e-01,
    -3.8143215850e02,
    1.0855194715e-01,
    1.3000000000e00,
    2.5828622158e-01,
    -9.5167177917e01,
    1.0855194715e-01,
    1.3300000000e00,
    1.9140603789e-01,
    -3.4772904335e-02,
    1.0855194715e-01,
    1.6800000000e00,
    2.1167988338e-01,
    -6.0154048603e00,
    1.0855194715e-01,
    1.7000000000e00,
    2.2613069732e-01,
    -3.3662101553e01,
    1.0855194715e-01,
    1.7700000000e00,
    2.5083570728e-01,
    -8.0926699925e01,
    1.0855194715e-01,
    1.8600000000e00,
    2.0286635240e-01,
    -2.5958902070e-02,
    1.0855194715e-01,
    2.2300000000e00,
    2.0554578947e-01,
    -2.5958902179e-02,
    1.0855194715e-01,
    2.2400000000e00,
    2.3427419058e-01,
    -4.9239004268e01,
    1.0855194715e-01,
    2.3900000000e00,
    5.1639881336e-01,
    -4.3629257169e02,
    1.8121904482e-01,
    2.5100000000e00,
    3.1949542542e-01,
    -7.1031910922e01,
    1.8121904482e-01,
    2.5200000000e00,
    2.9053408276e-01,
    -1.7307903077e01,
    1.8121904482e-01,
    3.1200000000e00,
    2.7716096382e-01,
    -3.7023541351e-02,
    1.8121904482e-01,
    3.1400000000e00,
    3.6896118463e-01,
    -1.6281562002e02,
    1.8121904482e-01,
    3.1500000000e00,
    4.1397531985e-01,
    -2.4631795558e02,
    1.8121904482e-01,
    3.1600000000e00,
    4.5741689726e-01,
    -3.2690315749e02,
    1.8121904482e-01,
    3.1700000000e00,
    4.9857088512e-01,
    -4.0324482409e02,
    1.8121904482e-01,
    3.1800000000e00,
    5.3677572982e-01,
    -4.3968042494e02,
    1.9804956105e-01,
    3.1900000000e00,
    5.7161706540e-01,
    -4.4541568189e02,
    2.2672584578e-01,
    3.2000000000e00,
    6.0289705204e-01,
    -4.4932713017e02,
    2.5246724939e-01,
    3.3800000000e00,
    5.4524633404e-01,
    -1.5365151085e02,
    3.4702581326e-01,
    3.4000000000e00,
    4.8866757793e-01,
    -6.5175732036e01,
    3.4702581326e-01,
    4.2100000000e00,
    5.0733054157e-01,
    -9.4307087436e01,
    3.4702581326e-01,
    4.2300000000e00,
    5.9489031091e-01,
    -2.3122983580e02,
    3.4702581326e-01,
    4.2700000000e00,
    7.4480799152e-01,
    -4.1334499849e02,
    3.7046991444e-01,
    4.4600000000e00,
    6.8140010836e-01,
    -1.1788264307e02,
    4.9720197269e-01,
    4.4800000000e00,
    6.1088386108e-01,
    -1.9159896893e01,
    4.9720197269e-01,
    5.2100000000e00,
    7.3384594825e-01,
    -1.9131012574e02,
    4.9720197269e-01,
    5.2300000000e00,
    8.4237512049e-01,
    -3.4325096688e02,
    4.9720197269e-01,
    5.2600000000e00,
    9.7593455045e-01,
    -3.8241964854e02,
    6.0278377289e-01,
    5.4500000000e00,
    9.1378532737e-01,
    -6.5328232094e01,
    7.6673209978e-01,
    5.4700000000e00,
    8.3941859391e-01,
    -2.2417103893e-02,
    7.6673209978e-01,
    6.2800000000e00,
    1.0299059846e00,
    -2.2653958433e02,
    7.6673209978e-01,
    6.3000000000e00,
    1.1660716393e00,
    -3.6673774130e02,
    8.0099320546e-01,
    6.3100000000e00,
    1.2274965883e00,
    -3.6235091094e02,
    8.6391752887e-01,
    6.5000000000e00,
    1.3722384582e00,
    -7.2849887626e01,
    1.2178632732e00,
    6.5100000000e00,
    1.3258779726e00,
    -1.0755386834e01,
    1.2178632732e00,
    7.3400000000e00,
    1.5438584387e00,
    -3.0271378172e02,
    1.2178632732e00,
    7.3500000000e00,
    1.6161721264e00,
    -3.1401177664e02,
    1.2810767346e00,
    7.3600000000e00,
    1.6828426127e00,
    -3.0288764222e02,
    1.3553181730e00,
    7.3700000000e00,
    1.7437576006e00,
    -3.0002371821e02,
    1.4181905130e00,
    7.4900000000e00,
    1.9787278197e00,
    -2.5721079962e02,
    1.6853508966e00,
    7.5400000000e00,
    1.7922648200e00,
    -9.2150098985e00,
    1.6853508966e00,
    7.5500000000e00,
    1.7377096922e00,
    -2.9542390056e-02,
    1.6853508966e00,
    8.3900000000e00,
    2.0323788923e00,
    -3.0002252692e02,
    1.7068143118e00,
    8.4000000000e00,
    2.1373367723e00,
    -3.0002252692e02,
    1.8117721918e00,
    8.4100000000e00,
    2.2347788097e00,
    -3.0002252692e02,
    1.9092142291e00,
    8.5300000000e00,
    2.6988926842e00,
    -2.7019608812e02,
    2.3957539975e00,
    8.5700000000e00,
    2.5317336814e00,
    -4.7874614473e01,
    2.3957539975e00,
    8.5800000000e00,
    2.4668114737e00,
    -1.7223505175e-02,
    2.3957539975e00,
    9.4700000000e00,
    2.7894447296e00,
    -3.0001467904e02,
    2.4638803949e00,
    9.4800000000e00,
    2.8838297747e00,
    -3.0001467904e02,
    2.5582654399e00,
    9.4900000000e00,
    2.9681567899e00,
    -3.0001467904e02,
    2.6425924551e00,
    9.5800000000e00,
    3.2219227925e00,
    -2.6479547158e02,
    2.9228390648e00,
    9.5900000000e00,
    3.1906459654e00,
    -2.2319729154e02,
    2.9228390648e00,
    9.6000000000e00,
    3.1477153613e00,
    -1.6609958812e02,
    2.9228390648e00,
    9.6100000000e00,
    3.0935965701e00,
    -9.4121595767e01,
    2.9228390648e00,
    9.6200000000e00,
    3.0289090250e00,
    -8.0871607611e00,
    2.9228390648e00,
]
Instant = Resultat1[0::4]
Deplace = Resultat1[1::4]
Force = Resultat1[2::4]
Pcumul = Resultat1[3::4]
motclef = {}
motclef["VALEUR"] = []
for ii in range(len(Instant)):
    # Pour Force
    if abs(Force[ii]) > 1.0:
        motclef["VALEUR"].append(
            _F(FONCTION=FORC_1, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Force[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=FORC_1,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Force[ii],
                CRITERE="ABSOLU",
            )
        )
    # Pour Pcumul
    if abs(Pcumul[ii]) > 0.001:
        motclef["VALEUR"].append(
            _F(FONCTION=PCUM_1, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Pcumul[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=PCUM_1,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Pcumul[ii],
                CRITERE="ABSOLU",
            )
        )
    # Pour Deplace
    if abs(Deplace[ii]) > 0.001:
        motclef["VALEUR"].append(
            _F(FONCTION=DEPL11, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Deplace[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=DEPL11,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Deplace[ii],
                CRITERE="ABSOLU",
            )
        )
TEST_FONCTION(**motclef)
#
# INST             DEPL              FORC              PCUM
Resultat2 = [
    1.1000000000e-01,
    8.6799114482e-02,
    -1.3895122385e-14,
    0.0000000000e00,
    1.4000000000e-01,
    1.4609621068e-01,
    -9.2188349155e01,
    0.0000000000e00,
    2.0000000000e-01,
    2.8067943323e-01,
    -3.6135479426e02,
    0.0000000000e00,
    2.1000000000e-01,
    3.0049537469e-01,
    -4.0008461746e02,
    4.1760821195e-04,
    3.0000000000e-01,
    3.8709283286e-01,
    -4.1469428289e02,
    7.3465935372e-02,
    3.7000000000e-01,
    3.2993146103e-01,
    -3.0373107015e02,
    7.3465935372e-02,
    4.5000000000e-01,
    1.8738361549e-01,
    -2.7013307724e01,
    7.3465935372e-02,
    4.6000000000e-01,
    1.6909948479e-01,
    -5.9685589804e-13,
    7.3465935372e-02,
    1.0300000000e00,
    1.6986009621e-01,
    0.0000000000e00,
    7.3465935372e-02,
    1.1000000000e00,
    3.3778057882e-01,
    -3.1896753263e02,
    7.3465935372e-02,
    1.1800000000e00,
    4.2893945029e-01,
    -4.2170380992e02,
    1.0851742744e-01,
    1.2200000000e00,
    4.0807021922e-01,
    -3.8177708799e02,
    1.0851742744e-01,
    1.3000000000e00,
    2.5890019503e-01,
    -9.6387077437e01,
    1.0851742744e-01,
    1.3300000000e00,
    1.9206291103e-01,
    -1.4188560510e-03,
    1.0851742744e-01,
    1.6800000000e00,
    2.1054282813e-01,
    -3.8815849074e00,
    1.0851742744e-01,
    1.7000000000e00,
    2.2498821012e-01,
    -3.1518288329e01,
    1.0851742744e-01,
    1.7700000000e00,
    2.5022931154e-01,
    -7.9809211659e01,
    1.0851742744e-01,
    1.8600000000e00,
    2.0358592357e-01,
    -1.3497523304e-02,
    1.0851742744e-01,
    2.2300000000e00,
    2.0684728378e-01,
    -1.3497523322e-02,
    1.0851742744e-01,
    2.2400000000e00,
    2.3541161667e-01,
    -5.1470324670e01,
    1.0851742744e-01,
    2.3900000000e00,
    5.1472774746e-01,
    -4.3599173042e02,
    1.7984329313e-01,
    2.5100000000e00,
    3.1741941708e-01,
    -6.9762733579e01,
    1.7984329313e-01,
    2.5200000000e00,
    2.8855048483e-01,
    -1.6178376168e01,
    1.7984329313e-01,
    3.1200000000e00,
    2.7830493544e-01,
    -2.1165186956e-02,
    1.7984329313e-01,
    3.1400000000e00,
    3.6974890105e-01,
    -1.6689524034e02,
    1.7984329313e-01,
    3.1500000000e00,
    4.1453917764e-01,
    -2.5003160884e02,
    1.7984329313e-01,
    3.1600000000e00,
    4.5773304713e-01,
    -3.3020484563e02,
    1.7984329313e-01,
    3.1700000000e00,
    4.9862095329e-01,
    -4.0609792540e02,
    1.7984329313e-01,
    3.1800000000e00,
    5.3658917622e-01,
    -4.3961736008e02,
    1.9789551464e-01,
    3.1900000000e00,
    5.7122998244e-01,
    -4.4531981600e02,
    2.2640779425e-01,
    3.2000000000e00,
    6.0231435138e-01,
    -4.4944141371e02,
    2.5196953808e-01,
    3.3800000000e00,
    5.4241785612e-01,
    -1.5238250918e02,
    3.4525354147e-01,
    3.4000000000e00,
    4.8586621462e-01,
    -6.3705105407e01,
    3.4525354147e-01,
    4.2100000000e00,
    5.0736483335e-01,
    -9.7410474931e01,
    3.4525354147e-01,
    4.2300000000e00,
    5.9429571929e-01,
    -2.3372491371e02,
    3.4525354147e-01,
    4.2700000000e00,
    7.4288852847e-01,
    -4.1383785185e02,
    3.6891750364e-01,
    4.4600000000e00,
    6.7597636746e-01,
    -1.1688242544e02,
    4.9250071557e-01,
    4.4800000000e00,
    6.0555809183e-01,
    -1.8296839568e01,
    4.9250071557e-01,
    5.2100000000e00,
    7.3480947558e-01,
    -1.9923811506e02,
    4.9250071557e-01,
    5.2300000000e00,
    8.4223151773e-01,
    -3.4962897408e02,
    4.9250071557e-01,
    5.2600000000e00,
    9.7414361482e-01,
    -3.8259193399e02,
    6.0086784129e-01,
    5.4500000000e00,
    9.0556413353e-01,
    -6.2157624465e01,
    7.6081945058e-01,
    5.4700000000e00,
    8.3130089307e-01,
    -1.6910936445e-02,
    7.6081945058e-01,
    6.2800000000e00,
    1.0279797234e00,
    -2.3220221715e02,
    7.6081945058e-01,
    6.3000000000e00,
    1.1628487481e00,
    -3.6696047065e02,
    7.9769098709e-01,
    6.3100000000e00,
    1.2237123620e00,
    -3.6261380711e02,
    8.6003916096e-01,
    6.5000000000e00,
    1.3615190533e00,
    -7.1840379164e01,
    1.2079146300e00,
    6.5100000000e00,
    1.3151415357e00,
    -9.6954123615e00,
    1.2079146300e00,
    7.3400000000e00,
    1.5417833541e00,
    -3.1339031976e02,
    1.2079146300e00,
    7.3500000000e00,
    1.6132926869e00,
    -3.1448052367e02,
    1.2778737063e00,
    7.3600000000e00,
    1.6791776862e00,
    -3.0348785732e02,
    1.3512377390e00,
    7.3700000000e00,
    1.7393129628e00,
    -3.0001233277e02,
    1.4137479328e00,
    7.4900000000e00,
    1.9668290308e00,
    -2.5535439639e02,
    1.6748413966e00,
    7.5400000000e00,
    1.7793201789e00,
    -5.9676233808e00,
    1.6748413966e00,
    7.5500000000e00,
    1.7247299163e00,
    -2.9279228801e-03,
    1.6748413966e00,
    8.3900000000e00,
    2.0286252670e00,
    -3.0002955719e02,
    1.7030523825e00,
    8.4000000000e00,
    2.1327557311e00,
    -3.0002955719e02,
    1.8071828466e00,
    8.4100000000e00,
    2.2293869393e00,
    -3.0002955719e02,
    1.9038140547e00,
    8.5300000000e00,
    2.6861122739e00,
    -2.6911312105e02,
    2.3837848301e00,
    8.5700000000e00,
    2.5181362772e00,
    -4.5705045356e01,
    2.3837848301e00,
    8.5800000000e00,
    2.4531427596e00,
    -2.7481794396e-02,
    2.3837848301e00,
    9.4700000000e00,
    2.7830916861e00,
    -3.0004229161e02,
    2.4575212468e00,
    9.4800000000e00,
    2.8767033522e00,
    -3.0004229161e02,
    2.5511329130e00,
    9.4900000000e00,
    2.9602826991e00,
    -3.0004229161e02,
    2.6347122599e00,
    9.5800000000e00,
    3.2090073346e00,
    -2.6376593938e02,
    2.9107123482e00,
    9.5900000000e00,
    3.1774368561e00,
    -2.2177720292e02,
    2.9107123482e00,
    9.6000000000e00,
    3.1342837763e00,
    -1.6438360680e02,
    2.9107123482e00,
    9.6100000000e00,
    3.0800174352e00,
    -9.2209373183e01,
    2.9107123482e00,
    9.6200000000e00,
    3.0152563676e00,
    -6.0771532450e00,
    2.9107123482e00,
]
Instant = Resultat2[0::4]
Deplace = Resultat2[1::4]
Force = Resultat2[2::4]
Pcumul = Resultat2[3::4]
motclef = {}
motclef["VALEUR"] = []
for ii in range(len(Instant)):
    # Pour Force
    if abs(Force[ii]) > 1.0:
        motclef["VALEUR"].append(
            _F(FONCTION=FORC_2, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Force[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=FORC_2,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Force[ii],
                CRITERE="ABSOLU",
            )
        )
    # Pour Pcumul
    if abs(Pcumul[ii]) > 0.001:
        motclef["VALEUR"].append(
            _F(FONCTION=PCUM_2, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Pcumul[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=PCUM_2,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Pcumul[ii],
                CRITERE="ABSOLU",
            )
        )
    # Pour Deplace
    if abs(Deplace[ii]) > 0.001:
        motclef["VALEUR"].append(
            _F(FONCTION=DEPL12, NOM_PARA="INST", VALE_PARA=Instant[ii], VALE_CALC=Deplace[ii])
        )
    else:
        motclef["VALEUR"].append(
            _F(
                FONCTION=DEPL12,
                NOM_PARA="INST",
                VALE_PARA=Instant[ii],
                VALE_CALC=Deplace[ii],
                CRITERE="ABSOLU",
            )
        )
TEST_FONCTION(**motclef)
"""
# Pour l'impression des courbes
XInstant=DEFI_LIST_REEL(VALE=Instant)
# LIST_PARA=XInstant,
#
UXAN_1=RECU_FONCTION(RESULTAT=resu1, NOM_CHAM='VARI_ELGA', NOM_CMP='V2',GROUP_MA='M1',POINT=1)
DEPL31=RECU_FONCTION(RESULTAT=resu1, NOM_CHAM='DEPL',      NOM_CMP='DX',GROUP_NO='PT3',)
VITE_1=RECU_FONCTION(RESULTAT=resu2, NOM_CHAM='VARI_ELGA', NOM_CMP='V3',GROUP_MA='M1',POINT=1)
#
UXAN_2=RECU_FONCTION(RESULTAT=resu2, NOM_CHAM='VARI_ELGA', NOM_CMP='V2',GROUP_MA='M1',POINT=1)
DEPL32=RECU_FONCTION(RESULTAT=resu2, NOM_CHAM='DEPL',      NOM_CMP='DX',GROUP_NO='PT3',)
VITE_2=RECU_FONCTION(RESULTAT=resu2, NOM_CHAM='VARI_ELGA', NOM_CMP='V3',GROUP_MA='M1',POINT=1)
#
fic_courbe = './REPE_OUT/sdnd109b_filtre_%04d.dat' % (int(pas1*1000))
unite = DEFI_FICHIER(FICHIER = fic_courbe, ACTION='ASSOCIER', TYPE='ASCII',ACCES='NEW')
IMPR_FONCTION(UNITE=unite, FORMAT='TABLEAU', SEPARATEUR=',', FORMAT_R='E17.10',
    COURBE=(
        _F(FONCTION=DEPL11, LIST_PARA=XInstant,),
        _F(FONCTION=FORC_1, LIST_PARA=XInstant,),
        _F(FONCTION=PCUM_1, LIST_PARA=XInstant,),
    ),
)
DEFI_FICHIER(UNITE = unite, ACTION='LIBERER',)
#
fic_courbe = './REPE_OUT/sdnd109b_filtre_%04d.dat' % (int(pas2*1000))
unite = DEFI_FICHIER(FICHIER = fic_courbe, ACTION='ASSOCIER', TYPE='ASCII',ACCES='NEW')
IMPR_FONCTION(UNITE=unite, FORMAT='TABLEAU', SEPARATEUR=',', FORMAT_R='E17.10',
    COURBE=(
        _F(FONCTION=DEPL12, LIST_PARA=XInstant,),
        _F(FONCTION=FORC_2, LIST_PARA=XInstant,),
        _F(FONCTION=PCUM_2, LIST_PARA=XInstant,),
    ),
)
DEFI_FICHIER(UNITE = unite, ACTION='LIBERER',)

fic_courbe = './REPE_OUT/sdnd109b_%04d.dat' % (int(pas1*1000))
unite = DEFI_FICHIER(FICHIER = fic_courbe, ACTION='ASSOCIER', TYPE='ASCII',ACCES='NEW')
IMPR_FONCTION(UNITE=unite, FORMAT='TABLEAU', SEPARATEUR=',', FORMAT_R='E17.10',
    COURBE=(
        _F(FONCTION=DEPL11,),
        _F(FONCTION=FORC_1,),
        _F(FONCTION=PCUM_1,),
        _F(FONCTION=VITE_1,),
        _F(FONCTION=UXAN_1,),
        _F(FONCTION=DEPL31,),
    ),
)
DEFI_FICHIER(UNITE = unite, ACTION='LIBERER',)
#
fic_courbe = './REPE_OUT/sdnd109b_%04d.dat' % (int(pas2*1000))
unite = DEFI_FICHIER(FICHIER = fic_courbe, ACTION='ASSOCIER', TYPE='ASCII',ACCES='NEW')
IMPR_FONCTION(UNITE=unite, FORMAT='TABLEAU', SEPARATEUR=',', FORMAT_R='E17.10',
    COURBE=(
        _F(FONCTION=DEPL12,),
        _F(FONCTION=FORC_2,),
        _F(FONCTION=PCUM_2,),
        _F(FONCTION=VITE_2,),
        _F(FONCTION=UXAN_2,),
        _F(FONCTION=DEPL32,),
    ),
)
DEFI_FICHIER(UNITE = unite, ACTION='LIBERER',)
"""
FIN()
