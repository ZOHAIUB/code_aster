# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

# NB DE PAS DE TEMPS DE CALCUL ET NOMBRE DE PAS DE TEMPS ARCHIVE
tfin = 1000
nbpas = tfin
nbpas_arch = tfin
c_mult_pilo = 10.0

# Valeurs de ETA aux points test√©s
f = [5000, 4500, 5000, 3000]

# DONNEES MATERIAU
young = 30000.0e6
poiss = 0.2
Gc = 200.0
Sc = 2.0e5
pena_adh = 1.0e-3

MA = LIRE_MAILLAGE(FORMAT="MED")

MA = DEFI_GROUP(
    reuse=MA,
    MAILLAGE=MA,
    CREA_GROUP_MA=(
        _F(NOM="FACE_SUP", GROUP_MA="FACESUP"),
        _F(NOM="FACE_INF", GROUP_MA="FACEINF"),
        _F(NOM="MATIERE", GROUP_MA="TOUT"),
        _F(NOM="JOINT", GROUP_MA="JOIN"),
    ),
    CREA_GROUP_NO=(
        _F(NOM="P_RIG", GROUP_NO="PRIG"),
        _F(GROUP_MA="FACE_SUP"),
        _F(GROUP_MA="FACE_INF"),
        _F(NOM="N_INTER", GROUP_NO="INTER"),
        _F(NOM="N_INF", GROUP_NO="NINF"),
        _F(NOM="N_SUP", GROUP_NO="NSUP"),
    ),
)

MA = MODI_MAILLAGE(reuse=MA, MAILLAGE=MA, ORIE_FISSURE=_F(GROUP_MA="JOINT"), INFO=1)

MO = AFFE_MODELE(
    MAILLAGE=MA,
    AFFE=(
        _F(
            GROUP_MA=("MATIERE", "FACE_SUP", "FACE_INF"),
            PHENOMENE="MECANIQUE",
            MODELISATION="D_PLAN",
        ),
        _F(GROUP_MA="JOINT", PHENOMENE="MECANIQUE", MODELISATION="PLAN_JOINT"),
    ),
)

# --------------------------------------------------------------
# DEFINITION DES PARAMETRES MATERIAUX
# --------------------------------------------------------------

BETON = DEFI_MATERIAU(
    ELAS=_F(E=young, NU=poiss), RUPT_FRAG=_F(GC=Gc, SIGM_C=Sc, PENA_ADHERENCE=pena_adh)
)

CHMAT = AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(GROUP_MA=("MATIERE", "JOINT"), MATER=BETON))

# --------------------------------------------------------------
# DEFINITION DES CHARGEMENTS
# --------------------------------------------------------------

# ON BLOQUE LES MOUVEMENTS DE CORPS RIGIDE DS LA DIRECTION X AU POINT P_RIG
RIGIDE = AFFE_CHAR_MECA(MODELE=MO, DDL_IMPO=_F(GROUP_NO="P_RIG", DX=0.0))

fyi = 1.0
# EFFORT IMPOSE SUR LA SURFACE SUPERIEURE DE LA PLAQUE
TRACTION = AFFE_CHAR_MECA(
    MODELE=MO, FORCE_CONTOUR=(_F(GROUP_MA="FACE_SUP", FY=fyi), _F(GROUP_MA="FACE_INF", FY=-fyi))
)

SYMETRIE = AFFE_CHAR_MECA(
    MODELE=MO,
    LIAISON_GROUP=_F(
        GROUP_NO_1="N_INF",
        GROUP_NO_2="N_SUP",
        DDL_1="DY",
        DDL_2="DY",
        COEF_MULT_1=1.0,
        COEF_MULT_2=1.0,
        COEF_IMPO=0.0,
    ),
)

# --------------------------------------------------------------
# REALISATION DU CALCUL
# --------------------------------------------------------------

INST0 = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=1, NOMBRE=2)))

FONC0 = DEFI_FONCTION(NOM_PARA="INST", VALE=(0, 0, 1, f[0]), PROL_DROITE="LINEAIRE")

INSTANTS = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=tfin, NOMBRE=nbpas)))

INS_ARCH = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=tfin, NOMBRE=nbpas_arch)))

DEFLIST = DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=INSTANTS),
    ECHEC=_F(
        ACTION="DECOUPE", SUBD_METHODE="MANUEL", SUBD_PAS=10, SUBD_PAS_MINI=1.0e-8, SUBD_NIVEAU=10
    ),
)

inst = []

# SNL 0
EVOL = STAT_NON_LINE(
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=SYMETRIE), _F(CHARGE=RIGIDE), _F(CHARGE=TRACTION, FONC_MULT=FONC0)),
    COMPORTEMENT=(
        _F(RELATION="ELAS", GROUP_MA="MATIERE"),
        _F(RELATION="CZM_EXP_REG", GROUP_MA="JOINT"),
    ),
    INCREMENT=_F(LIST_INST=INST0),
    NEWTON=_F(REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-6, ITER_GLOB_MAXI=10),
    SOLVEUR=_F(METHODE="MUMPS"),
    ARCHIVAGE=_F(CHAM_EXCLU="VARI_ELGA"),
)

# SNL 1
EVOL = STAT_NON_LINE(
    reuse=EVOL,
    ETAT_INIT=_F(EVOL_NOLI=EVOL),
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=SYMETRIE), _F(CHARGE=RIGIDE), _F(CHARGE=TRACTION, TYPE_CHARGE="FIXE_PILO")),
    COMPORTEMENT=(
        _F(RELATION="ELAS", GROUP_MA="MATIERE"),
        _F(RELATION="CZM_EXP_REG", GROUP_MA="JOINT"),
    ),
    INCREMENT=_F(LIST_INST=DEFLIST),
    PILOTAGE=_F(
        TYPE="PRED_ELAS",
        SELECTION="NORM_INCR_DEPL",
        GROUP_MA="JOINT",
        COEF_MULT=c_mult_pilo,
        ETA_PILO_MIN=f[1],
        PROJ_BORNES="OUI",
        ETA_PILO_R_MIN=0.0,
    ),
    NEWTON=_F(REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-6, ITER_GLOB_MAXI=10),
    SOLVEUR=_F(METHODE="MUMPS"),
    ARCHIVAGE=_F(CHAM_EXCLU="VARI_ELGA"),
)

dico = EVOL.LIST_VARI_ACCES()
l_inst = dico["INST"]
inst.append(l_inst[-1])

# SNL 2
EVOL = STAT_NON_LINE(
    reuse=EVOL,
    ETAT_INIT=_F(EVOL_NOLI=EVOL),
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=SYMETRIE), _F(CHARGE=RIGIDE), _F(CHARGE=TRACTION, TYPE_CHARGE="FIXE_PILO")),
    COMPORTEMENT=(
        _F(RELATION="ELAS", GROUP_MA="MATIERE"),
        _F(RELATION="CZM_EXP_REG", GROUP_MA="JOINT"),
    ),
    INCREMENT=_F(LIST_INST=DEFLIST),
    PILOTAGE=_F(
        TYPE="PRED_ELAS",
        SELECTION="NORM_INCR_DEPL",
        GROUP_MA="JOINT",
        COEF_MULT=c_mult_pilo,
        ETA_PILO_MAX=f[2],
        PROJ_BORNES="OUI",
        ETA_PILO_R_MIN=0.0,
    ),
    NEWTON=_F(REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-6, ITER_GLOB_MAXI=10),
    SOLVEUR=_F(METHODE="MUMPS"),
    ARCHIVAGE=_F(CHAM_EXCLU="VARI_ELGA"),
)

dico = EVOL.LIST_VARI_ACCES()
l_inst = dico["INST"]
inst.append(l_inst[-1])

# SNL 3
EVOL = STAT_NON_LINE(
    reuse=EVOL,
    ETAT_INIT=_F(EVOL_NOLI=EVOL),
    MODELE=MO,
    CHAM_MATER=CHMAT,
    EXCIT=(_F(CHARGE=SYMETRIE), _F(CHARGE=RIGIDE), _F(CHARGE=TRACTION, TYPE_CHARGE="FIXE_PILO")),
    COMPORTEMENT=(
        _F(RELATION="ELAS", GROUP_MA="MATIERE"),
        _F(RELATION="CZM_EXP_REG", GROUP_MA="JOINT"),
    ),
    INCREMENT=_F(LIST_INST=DEFLIST),
    PILOTAGE=_F(
        TYPE="PRED_ELAS",
        SELECTION="NORM_INCR_DEPL",
        GROUP_MA="JOINT",
        COEF_MULT=c_mult_pilo,
        ETA_PILO_MIN=f[3],
        PROJ_BORNES="OUI",
        ETA_PILO_R_MIN=0.0,
    ),
    NEWTON=_F(REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-6, ITER_GLOB_MAXI=10),
    SOLVEUR=_F(METHODE="MUMPS"),
    ARCHIVAGE=_F(CHAM_EXCLU="VARI_ELGA"),
)

dico = EVOL.LIST_VARI_ACCES()
l_inst = dico["INST"]
inst.append(l_inst[-1])

tab_eta = RECU_TABLE(CO=EVOL, NOM_PARA=("ETA_PILOTAGE",))

IMPR_TABLE(FORMAT="NUMPY", TABLE=tab_eta, UNITE=8)

# --------------------------------------------------------------
# POST-TRAITEMENT
# --------------------------------------------------------------

CALC_CHAMP(reuse=EVOL, FORCE="FORC_NODA", RESULTAT=EVOL)

FORCE = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="FORCE",
        OPERATION="EXTRACTION",
        RESULTANTE="DY",
        RESULTAT=EVOL,
        NOM_CHAM="FORC_NODA",
        GROUP_NO="FACE_SUP",
    )
)

TAB_U = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="DEPL",
        RESULTAT=EVOL,
        OPERATION="EXTRACTION",
        NOM_CHAM="DEPL",
        NOM_CMP="DY",
        GROUP_NO="N_INTER",
    )
)

lF = FORCE.EXTR_TABLE().values()["DY"]
lU = TAB_U.EXTR_TABLE().values()["DY"]

f_vs_ouv = CREA_TABLE(LISTE=(_F(LISTE_R=lU, PARA="Deplacement"), _F(LISTE_R=lF, PARA="Force")))

IMPR_TABLE(FORMAT="NUMPY", TABLE=f_vs_ouv, UNITE=9)

UY = RECU_FONCTION(TABLE=TAB_U, PARA_X="INST", PARA_Y="DY")

FY = RECU_FONCTION(TABLE=FORCE, PARA_X="INST", PARA_Y="DY")

# --------------------------------------------------------------
# TESTS SUR LA REPONSE GLOBALE
# -------------------------------------------------------------

TEST_TABLE(
    VALE_CALC=0.0011454570982121907,
    NOM_PARA="DY",
    TABLE=TAB_U,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[0]),
)

TEST_TABLE(
    VALE_CALC=8999999.999999974,
    NOM_PARA="DY",
    TABLE=FORCE,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[0]),
)

TEST_TABLE(
    VALE_CALC=0.004714987416748804,
    NOM_PARA="DY",
    TABLE=TAB_U,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[1]),
)

TEST_TABLE(
    VALE_CALC=9999999.999999939,
    NOM_PARA="DY",
    TABLE=FORCE,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[1]),
)

TEST_TABLE(
    VALE_CALC=0.006905855221400609,
    NOM_PARA="DY",
    TABLE=TAB_U,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[2]),
)

TEST_TABLE(
    VALE_CALC=6000000.000000011,
    NOM_PARA="DY",
    TABLE=FORCE,
    FILTRE=_F(NOM_PARA="INST", VALE=inst[2]),
)

FIN()
