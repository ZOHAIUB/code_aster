# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# CAS_TEST__: SDLL158A
# =======================================================================
# SDLL158A                 COMMANDES                            24/05/21
# VALIDATION DES PARAMETRES MODAUX DE POUTRE
# PROBLEME 1 : BASE DE RITZ CALCULEE AVEC METHODE DE CRAIG-BAMPTON
# SANS MODE DE CORPS RIGIDE
# MODELISATION : 'POU_D_E'
# =======================================================================

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

import numpy as np

MAIL = LIRE_MAILLAGE(UNITE=20)

MODELE = AFFE_MODELE(
    MAILLAGE=MAIL, AFFE=(_F(GROUP_MA="Poutre", PHENOMENE="MECANIQUE", MODELISATION="POU_D_E"),)
)

MAT = DEFI_MATERIAU(ELAS=_F(E=2.1e11, NU=0.3, RHO=7800.0))

CHMAT = AFFE_MATERIAU(MAILLAGE=MAIL, MODELE=MODELE, AFFE=_F(GROUP_MA="Poutre", MATER=MAT))

CARA = AFFE_CARA_ELEM(
    MODELE=MODELE, POUTRE=_F(GROUP_MA="Poutre", SECTION="CERCLE", CARA=("R"), VALE=(50e-3))
)

# *****************************************************
# Calcul de la base modale de la poutre apuyée-apuyée
# *****************************************************
CHARG_BM = AFFE_CHAR_MECA(
    MODELE=MODELE,
    DDL_IMPO=(
        _F(TOUT="OUI", DZ=0.0, DRX=0.0, DRY=0.0),
        _F(GROUP_NO="A", DX=0.0, DY=0.0),
        _F(GROUP_NO="C", DY=0.0),
    ),
)

ASSEMBLAGE(
    MODELE=MODELE,
    CHARGE=CHARG_BM,
    CHAM_MATER=CHMAT,
    CARA_ELEM=CARA,
    NUME_DDL=CO("NU"),
    MATR_ASSE=(
        _F(MATRICE=CO("MATRIGI"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MATMASS"), OPTION="MASS_MECA"),
    ),
)

MODES_AP = CALC_MODES(
    MATR_RIGI=MATRIGI,
    MATR_MASS=MATMASS,
    OPTION="BANDE",
    CALC_FREQ=_F(FREQ=(0, 500)),
    NORM_MODE=_F(NORME="MASS_GENE"),
)

# Extraction des 5 premiers modes
MODES_0 = EXTR_MODE(FILTRE_MODE=_F(MODE=MODES_AP, NUME_MODE=(1, 2, 3, 4, 5)))

LIMODE0 = RECU_TABLE(
    CO=MODES_0, NOM_PARA=("FREQ", "MASS_EFFE_DY", "MASS_EFFE_UN_DY", "FACT_PARTICI_DY")
)

modes0 = LIMODE0.EXTR_TABLE()

"""
IMPR_TABLE(TABLE=LIMODE0,
           FORMAT='TABLEAU',
           UNITE=8,
           NOM_PARA=('FREQ','MASS_EFFE_DY','MASS_EFFE_UN_DY','FACT_PARTICI_DY'))
"""

"""
for i in range(len(modes0.NUME_ORDRE)):
   print(modes0.NUME_ORDRE[i])
   print(modes0.FREQ[i])
   print(modes0.MASS_EFFE_DY[i])
   print(modes0.MASS_EFFE_UN_DY[i])
   print(modes0.FACT_PARTICI_DY[i])
"""


# *****************************************************
# Calcul de la base modale de RITZ
# *****************************************************
CHARGE = AFFE_CHAR_MECA(
    MODELE=MODELE,
    DDL_IMPO=(
        _F(TOUT="OUI", DZ=0.0, DRX=0.0, DRY=0.0),
        _F(GROUP_NO="A", DX=0.0, DY=0.0),
        _F(GROUP_NO=("B", "C"), DY=0.0),
    ),
)

ASSEMBLAGE(
    MODELE=MODELE,
    CHARGE=CHARGE,
    CHAM_MATER=CHMAT,
    CARA_ELEM=CARA,
    NUME_DDL=CO("NUME"),
    MATR_ASSE=(
        _F(MATRICE=CO("MATRRIGI"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MATRMASS"), OPTION="MASS_MECA"),
    ),
    VECT_ASSE=(_F(VECTEUR=CO("VECTASS"), OPTION="CHAR_MECA"),),
)


MODES_R = CALC_MODES(
    MATR_RIGI=MATRRIGI,
    MATR_MASS=MATRMASS,
    OPTION="BANDE",
    CALC_FREQ=_F(FREQ=(0, 1000)),
    NORM_MODE=_F(NORME="MASS_GENE"),
)


# Calcul des relèvements statiques
MODE_STA = MODE_STATIQUE(
    MATR_RIGI=MATRRIGI, MATR_MASS=MATRMASS, MODE_STAT=_F(AVEC_CMP=("DY"), GROUP_NO=("B"))
)

# Création de la base de Ritz contenant les modes dynamiques et relèvements statiques
MODES_1 = DEFI_BASE_MODALE(RITZ=(_F(MODE_MECA=MODES_R), _F(MODE_INTF=MODE_STA)), NUME_REF=NUME)

# Normalistion des modes
MODES_1 = NORM_MODE(reuse=MODES_1, MODE=MODES_1, MASSE=MATRMASS, RAIDE=MATRRIGI, NORME="MASS_GENE")

PROJ_BASE(
    BASE=MODES_1,
    STOCKAGE="PLEIN",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MASSEGE1"), MATR_ASSE=MATRMASS),
        _F(MATRICE=CO("RIGIDGE1"), MATR_ASSE=MATRRIGI),
    ),
    NUME_DDL_GENE=CO("nddlm"),
)

Nb_modes = len(MODES_1.LIST_VARI_ACCES()["FREQ"])

# Calcul des modes_gene pour orthogonaliser la base modale
MODES_2 = CALC_MODES(
    MATR_RIGI=RIGIDGE1,
    MATR_MASS=MASSEGE1,
    OPTION="PLUS_PETITE",
    NORM_MODE=_F(NORME="MASS_GENE"),
    CALC_FREQ=_F(NMAX_FREQ=(Nb_modes)),
    VERI_MODE=_F(STOP_ERREUR="NON", STURM="NON"),
)

# Restitution des modes_gene
MODES_PH = REST_GENE_PHYS(RESU_GENE=MODES_2, TOUT_ORDRE="OUI", NOM_CHAM="DEPL")

# Normalisation des modes et calcul des facteurs de participation et masses effectives
MODES_PH = NORM_MODE(MODE=MODES_PH, reuse=MODES_PH, MASSE=MATRMASS, NORME="MASS_GENE")

# Extraction des 5 premiers modes
MODES_2 = EXTR_MODE(FILTRE_MODE=_F(MODE=MODES_PH, NUME_MODE=(1, 2, 3, 4, 5)))

# Test des fréquences
TEST_RESU(
    RESU=(
        _F(
            PARA="FREQ",
            NUME_MODE=1,
            REFERENCE="AUTRE_ASTER",
            RESULTAT=MODES_2,
            VALE_CALC=5.660047119622371,
            VALE_REFE=modes0.FREQ[0],
            CRITERE="RELATIF",
            PRECISION=0.001,
        ),
        _F(
            PARA="FREQ",
            NUME_MODE=2,
            REFERENCE="AUTRE_ASTER",
            RESULTAT=MODES_2,
            VALE_CALC=22.64032473859692,
            VALE_REFE=modes0.FREQ[1],
            CRITERE="RELATIF",
            PRECISION=0.001,
        ),
        _F(
            PARA="FREQ",
            NUME_MODE=3,
            REFERENCE="AUTRE_ASTER",
            RESULTAT=MODES_2,
            VALE_CALC=50.9433790660762,
            VALE_REFE=modes0.FREQ[2],
            CRITERE="RELATIF",
            PRECISION=0.001,
        ),
        _F(
            PARA="FREQ",
            NUME_MODE=4,
            REFERENCE="AUTRE_ASTER",
            RESULTAT=MODES_2,
            VALE_CALC=90.57038035679984,
            VALE_REFE=modes0.FREQ[3],
            CRITERE="RELATIF",
            PRECISION=0.001,
        ),
        _F(
            PARA="FREQ",
            NUME_MODE=5,
            REFERENCE="AUTRE_ASTER",
            RESULTAT=MODES_2,
            VALE_CALC=141.56511102647838,
            VALE_REFE=modes0.FREQ[4],
            CRITERE="RELATIF",
            PRECISION=0.001,
        ),
    )
)

LIMODE2 = RECU_TABLE(
    CO=MODES_2, NOM_PARA=("FREQ", "MASS_EFFE_DY", "MASS_EFFE_UN_DY", "FACT_PARTICI_DY")
)
"""
IMPR_TABLE(TABLE=LIMODE2,
           FORMAT='TABLEAU',
           UNITE=8,
           NOM_PARA=('FREQ','MASS_EFFE_DY','MASS_EFFE_UN_DY','FACT_PARTICI_DY'))
"""

# Test des masses effectives
TEST_TABLE(
    TABLE=LIMODE2,
    TYPE_TEST="SOMM",
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=342.9564379696641,
    VALE_REFE=np.sum(modes0.MASS_EFFE_DY),
    NOM_PARA="MASS_EFFE_DY",
)

# Test de la masse effective du premier mode
TEST_TABLE(
    TABLE=LIMODE2,
    TYPE_TEST="SOMM",
    REFERENCE="AUTRE_ASTER",
    FILTRE=(_F(NOM_PARA="NUME_ORDRE", VALE_I=1)),
    VALE_CALC=297.9380553540916,
    VALE_REFE=modes0.MASS_EFFE_DY[0],
    NOM_PARA="MASS_EFFE_DY",
)

# Test des masses effectives unitaires
TEST_TABLE(
    TABLE=LIMODE2,
    TYPE_TEST="SOMM",
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=0.9330463652660004,
    VALE_REFE=np.sum(modes0.MASS_EFFE_UN_DY),
    NOM_PARA="MASS_EFFE_UN_DY",
)

# Test des facteurs de participation
TEST_TABLE(
    TABLE=LIMODE2,
    TYPE_TEST="SOMM_ABS",
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=26.466005642222157,
    VALE_REFE=np.sum(np.abs(modes0.FACT_PARTICI_DY)),
    NOM_PARA="FACT_PARTICI_DY",
)

# Test du facteur de participation du premier mode
TEST_TABLE(
    TABLE=LIMODE2,
    TYPE_TEST="SOMM_ABS",
    REFERENCE="AUTRE_ASTER",
    FILTRE=(_F(NOM_PARA="NUME_ORDRE", VALE_I=1)),
    VALE_CALC=17.260882229888818,
    VALE_REFE=np.abs(modes0.FACT_PARTICI_DY[0]),
    NOM_PARA="FACT_PARTICI_DY",
)

FIN()
