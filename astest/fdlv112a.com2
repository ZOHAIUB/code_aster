# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2023 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
# FLUIDES INCOMPRESSIBLES - MASSES AJOUTEES.

# see #31118
# aslint: disable=W2005

POURSUITE(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

pas = 0.001
Tfin = 4.0 - pas
# ------------------------------------------
#          calcul standard
# ------------------------------------------
DYNGENT = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASTOT2,
    MATR_RIGI=RIGGEN2,
    AMOR_MODAL=_F(AMOR_REDUIT=0.050000000000000003),
    SCHEMA_TEMPS=_F(SCHEMA="DEVOGE", PAS_MINI=pas, PAS_MAXI=pas),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=Tfin, PAS=pas),
    EXCIT=(
        _F(VECT_ASSE_GENE=CHARGENX, FONC_MULT=ACC_X),
        _F(VECT_ASSE_GENE=CHARGENY, FONC_MULT=ACC_Y),
        _F(VECT_ASSE_GENE=CHARGENZ, FONC_MULT=ACC_Z),
        _F(VECT_ASSE_GENE=VGENX, FONC_MULT=ACC_X),
        _F(VECT_ASSE_GENE=VGENY, FONC_MULT=ACC_Y),
        _F(VECT_ASSE_GENE=VGENZ, FONC_MULT=ACC_Z),
    ),
)

# On recupere les accelerations du calcul du calcul dynamique DYNGEN
t_a_x = RECU_FONCTION(RESU_GENE=DYNGENT, NOM_CHAM="ACCE", NOM_CMP="DX", GROUP_NO="NO2815")

t_a_y = RECU_FONCTION(RESU_GENE=DYNGENT, NOM_CHAM="ACCE", NOM_CMP="DY", GROUP_NO="NO2815")

t_a_z = RECU_FONCTION(RESU_GENE=DYNGENT, NOM_CHAM="ACCE", NOM_CMP="DZ", GROUP_NO="NO2815")
# On calcule le signal absolu
t_Abs_x0 = CALC_FONCTION(
    INTERPOL="LIN", COMB=(_F(FONCTION=t_a_x, COEF=1), _F(FONCTION=ACC_X, COEF=1))
)

t_Abs_y0 = CALC_FONCTION(
    INTERPOL="LIN", COMB=(_F(FONCTION=t_a_y, COEF=1), _F(FONCTION=ACC_Y, COEF=1))
)

t_Abs_z0 = CALC_FONCTION(
    INTERPOL="LIN", COMB=(_F(FONCTION=t_a_z, COEF=1), _F(FONCTION=ACC_Z, COEF=1))
)

L_tmp0, ordo = t_a_x.Valeurs()
L_tmp = DEFI_LIST_REEL(VALE=L_tmp0)
t_Abs_x = CALC_FONC_INTERP(LIST_PARA=L_tmp, FONCTION=t_Abs_x0)
t_Abs_y = CALC_FONC_INTERP(LIST_PARA=L_tmp, FONCTION=t_Abs_y0)
t_Abs_z = CALC_FONC_INTERP(LIST_PARA=L_tmp, FONCTION=t_Abs_z0)

# ------------------------------------------------------------------------------------
#          Calculs prealable a l'utilisation de la macro commande
# ------------------------------------------------------------------------------------

TDYNGENX = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASTOT2,
    MATR_RIGI=RIGGEN2,
    AMOR_MODAL=_F(AMOR_REDUIT=0.050000000000000003),
    SCHEMA_TEMPS=_F(SCHEMA="DEVOGE", PAS_MINI=pas, PAS_MAXI=pas),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=Tfin, PAS=pas),
    EXCIT=(_F(VECT_ASSE_GENE=CHARGENX, FONC_MULT=ACC_X), _F(VECT_ASSE_GENE=VGENX, FONC_MULT=ACC_X)),
)


TDYNGENY = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASTOT2,
    MATR_RIGI=RIGGEN2,
    AMOR_MODAL=_F(AMOR_REDUIT=0.050000000000000003),
    SCHEMA_TEMPS=_F(SCHEMA="DEVOGE", PAS_MINI=pas, PAS_MAXI=pas),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=Tfin, PAS=pas),
    EXCIT=(_F(VECT_ASSE_GENE=CHARGENY, FONC_MULT=ACC_Y), _F(VECT_ASSE_GENE=VGENY, FONC_MULT=ACC_Y)),
)


TDYNGENZ = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASTOT2,
    MATR_RIGI=RIGGEN2,
    AMOR_MODAL=_F(AMOR_REDUIT=0.050000000000000003),
    SCHEMA_TEMPS=_F(SCHEMA="DEVOGE", PAS_MINI=pas, PAS_MAXI=pas),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=Tfin, PAS=pas),
    EXCIT=(_F(VECT_ASSE_GENE=CHARGENZ, FONC_MULT=ACC_Z), _F(VECT_ASSE_GENE=VGENZ, FONC_MULT=ACC_Z)),
)

C_TEMP = CALC_TRANSFERT(
    NOM_CHAM="ACCE",
    RESULTAT_X=TDYNGENX,
    RESULTAT_Y=TDYNGENY,
    RESULTAT_Z=TDYNGENZ,
    REPERE="RELATIF",
    ENTREE=_F(GROUP_NO="NO1996"),
    SORTIE=_F(GROUP_NO="NO2815"),
    ENTRAINEMENT=_F(DX=ACC_X, DY=ACC_Y, DZ=ACC_Z),
    SIGNAL=_F(
        MESURE_X=t_Abs_x,
        MESURE_Y=t_Abs_y,
        MESURE_Z=t_Abs_z,
        TYPE_RESU="HARMONIQUE",
        TABLE_RESU=CO("TABLE01"),
    ),
)

TEST_TABLE(
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=50.874056397,
    VALE_REFE=5.08741e01,
    NOM_PARA="Re_FX",
    TABLE=TABLE01,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)
TEST_TABLE(
    REFERENCE="AUTRE_ASTER",
    VALE_CALC=-19.1601110076,
    VALE_REFE=-1.91601e01,
    NOM_PARA="Im_FX",
    TABLE=TABLE01,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)


# Validation en temporel de CALC_TRANSFERT :
#
C_TEMP2 = CALC_TRANSFERT(
    NOM_CHAM="ACCE",
    RESULTAT_X=TDYNGENX,
    RESULTAT_Y=TDYNGENY,
    RESULTAT_Z=TDYNGENZ,
    REPERE="RELATIF",
    ENTREE=_F(GROUP_NO="NO1996"),
    SORTIE=_F(GROUP_NO="NO2815"),
    ENTRAINEMENT=_F(DX=ACC_X, DY=ACC_Y, DZ=ACC_Z),
    SIGNAL=_F(
        MESURE_X=t_Abs_x,
        MESURE_Y=t_Abs_y,
        MESURE_Z=t_Abs_z,
        TYPE_RESU="TEMPOREL",
        TABLE_RESU=CO("TABLE02"),
    ),
)

FXT = RECU_FONCTION(TABLE=TABLE02, PARA_X="INST", PARA_Y="FX", INTERPOL="LIN")

FXTH = CALC_FONCTION(FFT=_F(FONCTION=FXT))

# Les ecarts avec la reference sont dus au fait
# que les frequences ne sont pas tout a fait identiques
#
TEST_FONCTION(
    VALEUR=_F(
        VALE_CALC_C=(48.84869 - 22.56597j),
        VALE_REFE_C=(50.8741 - 19.1601j),
        VALE_PARA=10.009766,
        NOM_PARA="FREQ",
        REFERENCE="AUTRE_ASTER",
        PRECISION=8.0e-2,
        FONCTION=FXTH,
    )
)

# Validation en absolu de CALC_TRANSFERT :
# On va comparer relatif et absolu avec un entrainement nul
#

ACC_X2 = CALC_FONCTION(COMB=_F(FONCTION=ACC_X, COEF=0.0))
ACC_Y2 = CALC_FONCTION(COMB=_F(FONCTION=ACC_Y, COEF=0.0))
ACC_Z2 = CALC_FONCTION(COMB=_F(FONCTION=ACC_Z, COEF=0.0))

C_TEMPA = CALC_TRANSFERT(
    NOM_CHAM="ACCE",
    RESULTAT_X=TDYNGENX,
    RESULTAT_Y=TDYNGENY,
    RESULTAT_Z=TDYNGENZ,
    REPERE="ABSOLU",
    ENTREE=_F(GROUP_NO="NO1258"),
    SORTIE=_F(GROUP_NO="NO2815"),
    SIGNAL=_F(
        MESURE_X=t_Abs_x,
        MESURE_Y=t_Abs_y,
        MESURE_Z=t_Abs_z,
        TYPE_RESU="HARMONIQUE",
        TABLE_RESU=CO("TABLE_A"),
    ),
)

C_TEMP3 = CALC_TRANSFERT(
    NOM_CHAM="ACCE",
    RESULTAT_X=TDYNGENX,
    RESULTAT_Y=TDYNGENY,
    RESULTAT_Z=TDYNGENZ,
    REPERE="RELATIF",
    ENTREE=_F(GROUP_NO="NO1258"),
    SORTIE=_F(GROUP_NO="NO2815"),
    ENTRAINEMENT=_F(DX=ACC_X2, DY=ACC_Y2, DZ=ACC_Z2),
    SIGNAL=_F(
        MESURE_X=t_Abs_x,
        MESURE_Y=t_Abs_y,
        MESURE_Z=t_Abs_z,
        TYPE_RESU="HARMONIQUE",
        TABLE_RESU=CO("TABLE03"),
    ),
)

TEST_TABLE(
    VALE_CALC=555.484543524,
    NOM_PARA="Re_FX",
    TABLE=TABLE_A,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)
TEST_TABLE(
    VALE_CALC=-156.905320627526,
    NOM_PARA="Im_FX",
    TABLE=TABLE_A,
    TOLE_MACHINE=5.0e-6,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)
TEST_TABLE(
    VALE_CALC=555.484543524,
    NOM_PARA="Re_FX",
    TABLE=TABLE03,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)
TEST_TABLE(
    VALE_CALC=-156.905320627526,
    NOM_PARA="Im_FX",
    TABLE=TABLE03,
    TOLE_MACHINE=5.0e-6,
    FILTRE=_F(NOM_PARA="FREQ", VALE=1.0e01),
)


FIN()
