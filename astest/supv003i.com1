# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# aslint: disable=C2020
# Check other deprecation warnings
# + 'max' behaviour in commands catalogs

from code_aster.Commands import *
from code_aster import CA

POURSUITE(
    CODE="OUI",
    PAR_LOT="NON",
    ERREUR=_F(ERREUR_F="EXCEPTION", ALARME="EXCEPTION"),
    DEBUG=_F(HIST_ETAPE="OUI"),
    FORMAT_HDF="OUI",
)

test = CA.TestCase()

# check default value for "max" attribute: must be equivalent to "max=1"
# for simple keywords...
with test.assertRaisesRegex(CA.AsterError, "SUPERVIS_4"):
    LIRE_MAILLAGE(FORMAT=("MED", "ASTER"))

# ... and factor keywords
with test.assertRaisesRegex(CA.AsterError, "SUPERVIS_4"):
    MODI_MAILLAGE(
        reuse=MA, MAILLAGE=MA, ORIE_FISSURE=(_F(GROUP_MA="DCB_J"), _F(GROUP_MA="DCB_I")), INFO=1
    )

with test.assertRaisesRegex(CA.AsterError, "SUPERVIS_4"):
    CREA_MAILLAGE(RESTREINT=(_F(GROUP_MA="group1"), _F(GROUP_MA="group2")), MAILLAGE=MA)

# check proper handling of non-dict passed to FactorKeywords
with test.assertRaisesRegex(CA.AsterError, "Unexpected type.*str"):
    DEFI_LIST_REEL(VALE="a")

with test.assertRaisesRegex(CA.AsterError, "Unexpected type.*int"):
    DEFI_LIST_REEL(VALE=(0.0, 1.0), TITRE=12)

with test.assertRaisesRegex(CA.AsterError, "Unexpected type.*str"):
    DEFI_LIST_REEL(VALE=(0.0, 1.0), INTERVALLE="a")


with test.assertRaisesRegex(CA.AsterError, "Unexpected type.*float"):
    DEFI_LIST_REEL(VALE=(0.0, 1.0), INTERVALLE=45.0)

test.printSummary()

FIN(FORMAT_HDF="OUI")
