# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#####################################################################################
# NOUVEAU CAS TEST
# INGENIEUR RECHERCHE thuong-anh.nguyen@edf.fr
#####################################################################################
DEBUT(CODE="OUI")
#
# MESH AND FE-MODEL DEFINITIONS ##########
MESH = LIRE_MAILLAGE(FORMAT="MED")
MESH = MODI_MAILLAGE(
    reuse=MESH,
    MAILLAGE=MESH,
    ECHELLE=1.0e-3,
    # ABSC_CURV = _F(NOEUD_ORIG = 'PT_5',
    #               GROUP_MA   = ['BEAM_PT_10', 'BEAM_PT_11', 'BEAM_PT_12', 'BEAM_PT_20', 'BEAM_PT_90', 'BEAM_PT_21', 'BEAM_PT_22', 'BEAM_PT_23', 'BEAM_PT_30', 'BEAM_PT_31', 'BEAM_PT_32'])
)
#
MESH = DEFI_GROUP(
    reuse=MESH,
    MAILLAGE=MESH,
    CREA_GROUP_NO=(
        _F(
            NOM="N_CENTRAL",
            OPTION="ENV_SPHERE",
            POINT=(2.4375, 0.0),
            #  RAYON = l_elem/4.0,
            RAYON=0.001,
            #  PRECISION = l_elem/4.0,
            PRECISION=0.001,
        ),
    ),
)
#
MODEL = AFFE_MODELE(
    MAILLAGE=MESH,
    AFFE=(
        _F(
            GROUP_MA=[
                "BEAM_PT_10",
                "BEAM_PT_11",
                "BEAM_PT_12",
                "BEAM_PT_20",
                "BEAM_PT_90",
                "BEAM_PT_21",
                "BEAM_PT_22",
                "BEAM_PT_23",
                "BEAM_PT_30",
                "BEAM_PT_31",
                "BEAM_PT_32",
            ],
            PHENOMENE="MECANIQUE",
            MODELISATION="POU_D_T",
        ),
    ),
)
#
# MATERIAL DEFINITIONS ##########
#
# MAT_1 : MAT_1 (Elastic)
MAT_1 = DEFI_MATERIAU(ELAS=_F(E=200.0 * 1.0e9, NU=0.3, RHO=7800.0))
#
# MAT_2 : MAT_2 (Elastic)
MAT_2 = DEFI_MATERIAU(ELAS=_F(E=200.0 * 1.0e9, NU=0.3, RHO=7916.0))
#
# ASSIGNING MATERIAL TO ELEMENTS ##########
MATER_F = AFFE_MATERIAU(
    MAILLAGE=MESH,
    AFFE=(
        _F(
            GROUP_MA=[
                "BEAM_PT_10",
                "BEAM_PT_11",
                "BEAM_PT_12",
                "BEAM_PT_30",
                "BEAM_PT_31",
                "BEAM_PT_32",
            ],
            MATER=MAT_1,
        ),
        _F(
            GROUP_MA=["BEAM_PT_20", "BEAM_PT_90", "BEAM_PT_21", "BEAM_PT_22", "BEAM_PT_23"],
            MATER=MAT_2,
        ),
    ),
)
#
# FINITE ELEMENTS CARACTERISTICS (DIAMETER, THICKNESS) ##########
FE_CAR = AFFE_CARA_ELEM(
    MODELE=MODEL,
    POUTRE=(
        _F(
            GROUP_MA=[
                "BEAM_PT_10",
                "BEAM_PT_11",
                "BEAM_PT_12",
                "BEAM_PT_30",
                "BEAM_PT_31",
                "BEAM_PT_32",
            ],
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX", "AY", "AZ"),
            VALE=(
                2872.0 * 1.0e-6,
                100000000000.0 * 1.0e-12,
                19430000.0 * 1.0e-12,
                200000000000.0 * 1.0e-12,
                # 1e-20, # valeur NECS
                # 1e-20, # valeur NECS
                0.353,  # valeur recommandee AFNOR
                0.353,  # valeur recommandee AFNOR
            ),
        ),
        _F(
            GROUP_MA=["BEAM_PT_20", "BEAM_PT_90", "BEAM_PT_21", "BEAM_PT_22", "BEAM_PT_23"],
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX", "AY", "AZ"),
            VALE=(
                5356.0 * 1.0e-6,
                100000000000.0 * 1.0e-12,
                83560000.0 * 1.0e-12,
                200000000000.0 * 1.0e-12,
                # 1e-20, # valeur NECS
                # 1e-20, # valeur NECS
                0.369,  # valeur recommandee AFNOR
                0.369,  # valeur recommandee AFNOR
            ),
        ),
    ),
    COQUE=(),
    ORIENTATION=(),
    DISCRET=(),
)
#
# MECHANICAL BOUNDARY CONDITIONS ##########
BOUND_C = AFFE_CHAR_MECA(
    MODELE=MODEL,
    DDL_IMPO=(
        _F(GROUP_NO="ANCH_PT_5", LIAISON="ENCASTRE"),
        _F(GROUP_NO="ANCH_PT_32", LIAISON="ENCASTRE"),
    ),
    DDL_POUTRE=(),
    LIAISON_DDL=(),
    # THERMAL STRATIFICATION (FANNY)
    PRE_EPSI=(
        # KY and KZ are exchanged because of the local axis chosen (local Y and local Z are axchanged)
    ),
)
# -----------------------------------------------------------------------------#
# ANALYSE MODALE
# -----------------------------------------------------------------------------#

masel = CALC_MATR_ELEM(
    OPTION="MASS_MECA", MODELE=MODEL, CHAM_MATER=MATER_F, CARA_ELEM=FE_CAR, CHARGE=BOUND_C
)
rigel = CALC_MATR_ELEM(
    OPTION="RIGI_MECA", MODELE=MODEL, CHAM_MATER=MATER_F, CARA_ELEM=FE_CAR, CHARGE=BOUND_C
)

NUM = NUME_DDL(MATR_RIGI=rigel)

rigi = ASSE_MATRICE(MATR_ELEM=rigel, NUME_DDL=NUM)
mass = ASSE_MATRICE(MATR_ELEM=masel, NUME_DDL=NUM)


MODES = CALC_MODES(
    MATR_RIGI=rigi,
    SOLVEUR_MODAL=_F(
        NMAX_ITER_SOREN=30,
        PREC_SOREN=0.0,
        PARA_ORTHO_SOREN=0.717,
        APPROCHE="REEL",
        METHODE="SORENSEN",
    ),
    MATR_MASS=mass,
    OPTION="BANDE",
    # CALC_FREQ=_F(FREQ=(0.001,10.0,), ),
    CALC_FREQ=_F(FREQ=(0.001, 100.0)),
    NORM_MODE=_F(NORME="MASS_GENE"),
    # NORM_MODE=_F(NORME='TRAN_ROTA',),
    # FILTRE_MODE=_F(SEUIL=1e-04,),
    VERI_MODE=_F(STOP_ERREUR="NON"),
    IMPRESSION=_F(TOUT_PARA="OUI", CUMUL="OUI"),
)

# projeter les matrice
numgen2 = NUME_DDL_GENE(BASE=MODES, STOCKAGE="DIAG")
mgene = PROJ_MATR_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, MATR_ASSE=mass)
rgene = PROJ_MATR_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, MATR_ASSE=rigi)


#
# EXTERNAL FORCES AND CHARGING #############
#
# FOR_3 : CH_10 (Force)
FOR_3 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_10", FX=0.0, FY=-625.5 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_4 : CH_11 (Force)
FOR_4 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_11", FX=0.0, FY=-417 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_5 : CH_12 (Force)
FOR_5 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_12", FX=0.0, FY=-521 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_6 : CH_20 (Force)
FOR_6 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_20", FX=0.0, FY=-593.75 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_7 : CH_21 (Force)
FOR_7 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_21", FX=0.0, FY=-656.25 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_8 : CH_22 (Force)
FOR_8 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_22", FX=0.0, FY=-625.0 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_9 : CH_23 (Force)
FOR_9 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_23", FX=0.0, FY=-521.0 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_10 : CH_30 (Force)
FOR_10 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_30", FX=0.0, FY=-417.0 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#
# FOR_11 : CH_31 (Force)
FOR_11 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    FORCE_NODALE=_F(GROUP_NO="CH_31", FX=0.0, FY=-625.5 * 10.0 * 5000.0 / 5002.0, FZ=0.0),
)
#

# vecteur force

ASSEMBLAGE(
    MODELE=MODEL,
    CARA_ELEM=FE_CAR,
    CHAM_MATER=MATER_F,
    NUME_DDL=NUM,
    CHARGE=(BOUND_C),
    VECT_ASSE=(
        _F(VECTEUR=CO("FVECT_3"), OPTION="CHAR_MECA", CHARGE=FOR_3),
        _F(VECTEUR=CO("FVECT_4"), OPTION="CHAR_MECA", CHARGE=FOR_4),
        _F(VECTEUR=CO("FVECT_5"), OPTION="CHAR_MECA", CHARGE=FOR_5),
        _F(VECTEUR=CO("FVECT_6"), OPTION="CHAR_MECA", CHARGE=FOR_6),
        _F(VECTEUR=CO("FVECT_7"), OPTION="CHAR_MECA", CHARGE=FOR_7),
        _F(VECTEUR=CO("FVECT_8"), OPTION="CHAR_MECA", CHARGE=FOR_8),
        _F(VECTEUR=CO("FVECT_9"), OPTION="CHAR_MECA", CHARGE=FOR_9),
        _F(VECTEUR=CO("FVECT_10"), OPTION="CHAR_MECA", CHARGE=FOR_10),
        _F(VECTEUR=CO("FVECT_11"), OPTION="CHAR_MECA", CHARGE=FOR_11),
    ),
)
# projeter les charges sur les modes

FYGEN_3 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_3, TYPE_VECT="FORC")
FYGEN_4 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_4, TYPE_VECT="FORC")
FYGEN_5 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_5, TYPE_VECT="FORC")
FYGEN_6 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_6, TYPE_VECT="FORC")
FYGEN_7 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_7, TYPE_VECT="FORC")
FYGEN_8 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_8, TYPE_VECT="FORC")
FYGEN_9 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_9, TYPE_VECT="FORC")
FYGEN_10 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_10, TYPE_VECT="FORC")
FYGEN_11 = PROJ_VECT_BASE(BASE=MODES, NUME_DDL_GENE=numgen2, VECT_ASSE=FVECT_11, TYPE_VECT="FORC")

# DFOR_1 : GRAVITY (Gravity / Constant acceleration)
DFOR_1 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    PESANTEUR=_F(
        GROUP_MA=[
            "BEAM_PT_10",
            "BEAM_PT_11",
            "BEAM_PT_12",
            "BEAM_PT_20",
            "BEAM_PT_90",
            "BEAM_PT_21",
            "BEAM_PT_22",
            "BEAM_PT_23",
            "BEAM_PT_30",
            "BEAM_PT_31",
            "BEAM_PT_32",
        ],
        GRAVITE=9.81,
        DIRECTION=(0.0, -1.0, 0.0),
    ),
)
#
FFOR_ = DEFI_FONCTION(
    NOM_PARA="INST",
    VALE=(0, 0, 2.38e-2, 1.0, 5.95e-2, 1.0),
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
lr = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=5.95e-2, PAS=2.38e-4),))
list_arc = DEFI_LIST_REEL(VALE=(0.0, 2.38e-2, 5.95e-2))

# Dyna vibra base physique
DynaPhys = DYNA_VIBRA(
    BASE_CALCUL="PHYS",
    TYPE_CALCUL="TRAN",
    MODELE=MODEL,
    CARA_ELEM=FE_CAR,
    CHAM_MATER=MATER_F,
    MATR_MASS=mass,
    MATR_RIGI=rigi,
    # MATR_AMOR    = amogene,
    AMOR_MODAL=_F(MODE_MECA=MODES, AMOR_REDUIT=0.001),
    SCHEMA_TEMPS=_F(
        SCHEMA=("NEWMARK",),
        # BETA    =0.25,
        # GAMMA    =0.50,
    ),
    # ETAT_INIT    = _F(
    # DEPL    =dep0,
    # VITE    =vit0,
    # ACCE    =acc0, if absence, acc0 = Fext(t=0) - Cv0-Ku0
    # ),
    EXCIT=(
        _F(CHARGE=BOUND_C),
        _F(CHARGE=FOR_3, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_4, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_5, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_6, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_7, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_8, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_9, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_10, FONC_MULT=FFOR_),
        _F(CHARGE=FOR_11, FONC_MULT=FFOR_),
    ),
    # MODE_CORR        =psmodes,
    INCREMENT=_F(LIST_INST=lr),
    ARCHIVAGE=(_F(LIST_INST=list_arc),),
    INFO=2,
)

#
RESU_phy = RECU_FONCTION(RESULTAT=DynaPhys, NOM_CHAM="DEPL", NOM_CMP="DY", GROUP_NO="N_CENTRAL")
IMPR_FONCTION(FORMAT="TABLEAU", UNITE=98, COURBE=(_F(FONCTION=RESU_phy),))
#
# Dyna vibra base physique
DynaGene = DYNA_VIBRA(
    BASE_CALCUL="GENE",
    TYPE_CALCUL="TRAN",
    # MODELE         = MODEL,
    # CARA_ELEM     = FE_CAR,
    # CHAM_MATER    = MATER_F,
    MATR_MASS=mgene,
    MATR_RIGI=rgene,
    # MATR_AMOR    = amogene,
    AMOR_MODAL=_F(AMOR_REDUIT=0.001),
    SCHEMA_TEMPS=_F(
        SCHEMA=("NEWMARK",),
        # BETA    =0.25,
        # GAMMA    =0.50,
    ),
    # ETAT_INIT    = _F(
    # DEPL    =dep0,
    # VITE    =vit0,
    # ACCE    =acc0, if absence, acc0 = Fext(t=0) - Cv0-Ku0
    # ),
    EXCIT=(
        #    _F(CHARGE    = BOUND_C,),
        _F(VECT_ASSE_GENE=FYGEN_3, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_4, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_5, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_6, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_7, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_8, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_9, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_10, FONC_MULT=FFOR_),
        _F(VECT_ASSE_GENE=FYGEN_11, FONC_MULT=FFOR_),
    ),
    # MODE_CORR        =psmodes,
    INCREMENT=_F(LIST_INST=lr),
    ARCHIVAGE=(_F(LIST_INST=list_arc),),
    INFO=2,
)
RESU_res = REST_GENE_PHYS(
    RESU_GENE=DynaGene,
    MODE_MECA=MODES,
    TOUT_ORDRE="OUI",
    TOUT_CHAM="OUI",
    CRITERE="RELATIF",
    PRECISION=1.0e-06,
)
#
RESU_gen = RECU_FONCTION(RESULTAT=RESU_res, NOM_CHAM="DEPL", NOM_CMP="DY", GROUP_NO="N_CENTRAL")
# IMPR_FONCTION(FORMAT='TABLEAU', UNITE=98, COURBE=(_F(FONCTION=RESU_gen,),),)
# TEST MODE
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=1,
            PARA="FREQ",
            RESULTAT=MODES,
            VALE_CALC=6.20555e01,
            VALE_REFE=63.009,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=0.015132759,
        ),
    )
)
#
TEST_RESU(
    RESU=(
        _F(
            INST=5.95000e-02,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            GROUP_NO="N_CENTRAL",
            RESULTAT=RESU_res,
            VALE_CALC=-0.002563281375850705,
            VALE_REFE=-2.469e-03,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=0.04,
        ),
    )
)
#
FIN()
