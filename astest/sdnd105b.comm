# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
import numpy as np

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

MAILLAG0 = LIRE_MAILLAGE(FORMAT="ASTER")

MAILLAG0 = DEFI_GROUP(
    reuse=MAILLAG0, MAILLAGE=MAILLAG0, CREA_GROUP_NO=_F(NOM="GROUP_NO_GN2", GROUP_NO=("N02",))
)
MAILLAG0 = DEFI_GROUP(
    reuse=MAILLAG0, MAILLAGE=MAILLAG0, CREA_GROUP_NO=_F(NOM="GROUP_NO_GN3", GROUP_NO=("N03",))
)

MAILLAGE = CREA_MAILLAGE(
    MAILLAGE=MAILLAG0, CREA_POI1=(_F(NOM_GROUP_MA="GROUP_NO_AUTRE", GROUP_NO="GROUP_NO_AUTRE"),)
)


MODELE = AFFE_MODELE(
    MAILLAGE=MAILLAGE,
    AFFE=(
        _F(PHENOMENE="MECANIQUE", MODELISATION="DIS_TR", GROUP_MA="GROUP_MA_STRUC"),
        _F(PHENOMENE="MECANIQUE", MODELISATION="DIS_TR", GROUP_MA="GROUP_NO_AUTRE"),
    ),
)

CON_LIM = AFFE_CHAR_MECA(
    MODELE=MODELE,
    DDL_IMPO=(
        _F(GROUP_NO="GROUP_NO_ENCASTRE", DX=0.0, DY=0.0, DZ=0.0, DRX=0.0, DRY=0.0, DRZ=0.0),
        _F(GROUP_NO="GROUP_NO_AUTRE", DY=0.0, DZ=0.0, DRX=0.0, DRY=0.0, DRZ=0.0),
    ),
)

CARA_ELE = AFFE_CARA_ELEM(
    MODELE=MODELE,
    DISCRET=(
        _F(
            GROUP_MA="GROUP_NO_AUTRE",
            CARA="K_TR_N",
            VALE=(
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ),
        ),
        _F(
            GROUP_MA="GROUP_NO_AUTRE",
            CARA="M_TR_N",
            VALE=(
                1.0,
                0.0,
                1.0,
                0.0,
                0.0,
                1.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
            ),
        ),
        _F(
            GROUP_MA="GROUP_MA_STRUC",
            CARA="K_TR_D_L",
            VALE=(0.0000001, 0.0, 0.0, 0.0, 0.0, 0.0),
            REPERE="GLOBAL",
        ),
    ),
)

RIGI_ELE = CALC_MATR_ELEM(MODELE=MODELE, OPTION="RIGI_MECA", CARA_ELEM=CARA_ELE, CHARGE=CON_LIM)

MASS_ELE = CALC_MATR_ELEM(
    MODELE=MODELE, OPTION="MASS_MECA_DIAG", CARA_ELEM=CARA_ELE, CHARGE=CON_LIM
)

#

NUMEDDL = NUME_DDL(MATR_RIGI=RIGI_ELE)

#

RIGIDITE = ASSE_MATRICE(MATR_ELEM=RIGI_ELE, NUME_DDL=NUMEDDL)

MASSE = ASSE_MATRICE(MATR_ELEM=MASS_ELE, NUME_DDL=NUMEDDL)

#

MODE_MEC = CALC_MODES(
    MATR_RIGI=RIGIDITE, OPTION="PLUS_PETITE", CALC_FREQ=_F(NMAX_FREQ=2), MATR_MASS=MASSE
)


#
# -----------------------------------------------------------------------


PROJ_BASE(
    BASE=MODE_MEC,
    STOCKAGE="DIAG",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MASS_GEN"), MATR_ASSE=MASSE),
        _F(MATRICE=CO("RIGI_GEN"), MATR_ASSE=RIGIDITE),
    ),
)

#

V02 = 2.0

V03 = -2.0

VIT_INI1 = CREA_CHAMP(
    OPERATION="AFFE",
    TYPE_CHAM="NOEU_DEPL_R",
    MAILLAGE=MAILLAGE,
    AFFE=(
        _F(TOUT="OUI", NOM_CMP="DX", VALE=0.0),
        _F(TOUT="OUI", NOM_CMP="DY", VALE=0.0),
        _F(TOUT="OUI", NOM_CMP="DZ", VALE=0.0),
        _F(TOUT="OUI", NOM_CMP="DRX", VALE=0.0),
        _F(TOUT="OUI", NOM_CMP="DRY", VALE=0.0),
        _F(TOUT="OUI", NOM_CMP="DRZ", VALE=0.0),
        _F(GROUP_NO="N02", NOM_CMP="DX", VALE=V02),
        _F(GROUP_NO="N03", NOM_CMP="DX", VALE=V03),
    ),
)

# POUR TESTER LES MOTS CLES NUME_DDL ET CHAM_NO DE CREA_CHAMP :

VIT_INI2 = CREA_CHAMP(
    OPERATION="ASSE",
    TYPE_CHAM="NOEU_DEPL_R",
    MAILLAGE=MAILLAGE,
    NUME_DDL=NUMEDDL,
    ASSE=_F(TOUT="OUI", CHAM_GD=VIT_INI1),
)

VIT_INIT = CREA_CHAMP(
    OPERATION="ASSE",
    TYPE_CHAM="NOEU_DEPL_R",
    MAILLAGE=MAILLAGE,
    CHAM_NO=VIT_INI2,
    ASSE=_F(TOUT="OUI", CHAM_GD=VIT_INI1),
)

NUMEGE = NUME_DDL_GENE(BASE=MODE_MEC, STOCKAGE="DIAG")

#


VIT_GENE = PROJ_VECT_BASE(BASE=MODE_MEC, VECT_ASSE=VIT_INIT, TYPE_VECT="VITE", NUME_DDL_GENE=NUMEGE)

#

BI_PLANY = DEFI_OBSTACLE(TYPE="BI_PLAN_Y")

#

# References
tfl = pi / 6
dp = 3.0
t0 = pi / 6 + 2 * sqrt(3.0) + (pi + 6) / sqrt(2.0)

refinedInstants1 = [tfl + 1.0e-6 * i for i in range(-50, 51)]

###
KN = 0.5
F_max = 1.0
F_max2 = 0.5
AMOR_NOR = 0.0
AMOR_FL = 0.0
LARG_PLAT = 1e-6
ENFO_FL = 1e-7
DEPL_POST_FL = [10.0]
RIGI_POST_FL = [0.25]
AMOR_POST_FL = [0.0]

####################################################################################################
## Passage des paramètres de loi de flambage tabulée à des fonctions

# Calcul de la liste de deformation totale
DEPL_TOT_POST_FL = [j + F_max2 / RIGI_POST_FL[i] for i, j in enumerate(DEPL_POST_FL)]

# Listes pour un calcul en base physique
utot = []
crit = []
kchoc = []
cchoc = []

# Point 0
utot.append(0.0)
crit.append(F_max)
kchoc.append(KN)
cchoc.append(AMOR_NOR)

# debut du plateau
utot.append(F_max / KN)
crit.append(F_max)
kchoc.append(KN)
cchoc.append(AMOR_NOR)

# bout du plateau
utot.append(F_max / KN + LARG_PLAT)
crit.append(F_max)
kchoc.append(KN)
cchoc.append(AMOR_NOR)


# Pendant le flambage
nb = 500
eps = 1e-8
u = np.linspace(F_max / KN + LARG_PLAT + eps, F_max / KN + LARG_PLAT + ENFO_FL, nb, endpoint=True)
for i in range(len(u)):
    f = F_max - ((F_max2 - F_max) / ENFO_FL) * (-u[i] + F_max / KN + LARG_PLAT)
    c = AMOR_NOR - ((AMOR_FL - AMOR_NOR) / ENFO_FL) * (-u[i] + F_max / KN + LARG_PLAT)
    utot.append(u[i])
    crit.append(f)
    kchoc.append(f / (u[i] - LARG_PLAT))
    cchoc.append(c)

# Entre fl et 1er point
u = np.linspace(F_max / KN + LARG_PLAT + ENFO_FL + eps, DEPL_TOT_POST_FL[0], nb, endpoint=False)
for i in range(len(u)):
    alpha = (u[i] - (F_max / KN + LARG_PLAT + ENFO_FL)) / (
        DEPL_TOT_POST_FL[0] - (F_max / KN + LARG_PLAT + ENFO_FL)
    )
    defpla = (LARG_PLAT) + alpha * (DEPL_POST_FL[0] - (LARG_PLAT))
    rigifl = F_max2 / (u[i] - defpla)
    cfl = AMOR_FL + alpha * (AMOR_POST_FL[0] - AMOR_FL)
    utot.append(u[i])
    crit.append(F_max2)
    kchoc.append(rigifl)
    cchoc.append(cfl)


# Apres flambage
for i in range(len(DEPL_POST_FL) - 1):
    u = np.linspace(DEPL_TOT_POST_FL[i] + eps, DEPL_TOT_POST_FL[i + 1] + eps, nb, endpoint=False)
    for j in range(len(u)):
        alpha = (u[j] - DEPL_TOT_POST_FL[i]) / (DEPL_TOT_POST_FL[i + 1] - DEPL_TOT_POST_FL[i])
        defpla = DEPL_POST_FL[i] + alpha * (DEPL_POST_FL[i + 1] - DEPL_POST_FL[i])
        rigifl = F_max2 / (u[j] - defpla)
        cfl = AMOR_POST_FL[i] + alpha * (AMOR_POST_FL[i + 1] - AMOR_POST_FL[i])
        utot.append(u[j])
        crit.append(F_max2)
        kchoc.append(rigifl)
        cchoc.append(cfl)

SEUIL = DEFI_FONCTION(
    NOM_PARA="DX", ABSCISSE=(utot), ORDONNEE=(crit), PROL_DROITE="CONSTANT", PROL_GAUCHE="CONSTANT"
)

RIGI = DEFI_FONCTION(
    NOM_PARA="DX", ABSCISSE=(utot), ORDONNEE=(kchoc), PROL_DROITE="CONSTANT", PROL_GAUCHE="CONSTANT"
)

AMOR = DEFI_FONCTION(
    NOM_PARA="DX", ABSCISSE=(utot), ORDONNEE=(cchoc), PROL_DROITE="CONSTANT", PROL_GAUCHE="CONSTANT"
)

####################################################################################################

TRAN_GEN = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASS_GEN,
    MATR_RIGI=RIGI_GEN,
    SCHEMA_TEMPS=_F(SCHEMA="DIFF_CENTRE"),
    ETAT_INIT=_F(VITE=VIT_GENE),
    COMPORTEMENT=_F(
        RELATION="FLAMBAGE",
        GROUP_NO_1="GROUP_NO_GN2",
        GROUP_NO_2="GROUP_NO_GN3",
        OBSTACLE=BI_PLANY,
        NORM_OBST=(0.0, 1.0, 0.0),
        DIST_1=5.0,
        DIST_2=5.0,
        FX=SEUIL,
        RIGI_NOR=RIGI,
        AMOR_NOR=AMOR,
    ),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=3.0, PAS=1.0e-5),
    ARCHIVAGE=_F(PAS_ARCH=10, INST=refinedInstants1),
)

TRAN_GEN = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    reuse=TRAN_GEN,
    MATR_MASS=MASS_GEN,
    MATR_RIGI=RIGI_GEN,
    SCHEMA_TEMPS=_F(SCHEMA="DEVOGE", PAS_MAXI=1.0e-4),
    ETAT_INIT=_F(RESULTAT=TRAN_GEN, INST_INIT=3.0),
    COMPORTEMENT=_F(
        RELATION="FLAMBAGE",
        GROUP_NO_1="GROUP_NO_GN2",
        GROUP_NO_2="GROUP_NO_GN3",
        OBSTACLE=BI_PLANY,
        NORM_OBST=(0.0, 1.0, 0.0),
        DIST_1=5.0,
        DIST_2=5.0,
        FX=SEUIL,
        RIGI_NOR=RIGI,
        AMOR_NOR=AMOR,
    ),
    INCREMENT=_F(INST_FIN=12.0, PAS=1.0e-5),
    ARCHIVAGE=_F(PAS_ARCH=10, INST=[t0]),
)


TABLE = POST_DYNA_MODA_T(RESU_GENE=TRAN_GEN, CHOC=_F(OPTION="IMPACT"))

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    PRECISION=1.0e-4,
    VALE_CALC=0.523599775598,
    VALE_REFE=pi / 6,
    NOM_PARA="INST_FLAMB",
    TABLE=TABLE,
    FILTRE=(_F(NOM_PARA="CALCUL", VALE_K="FLAMBAGE"), _F(NOM_PARA="NOEUD", VALE_K="2")),
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    PRECISION=1.00e-4,
    VALE_CALC=3.00000741241,
    VALE_REFE=3.0,
    NOM_PARA="ECRAS_RESI",
    TABLE=TABLE,
    FILTRE=(_F(NOM_PARA="CALCUL", VALE_K="FLAMBAGE"), _F(NOM_PARA="NOEUD", VALE_K="3")),
)

TRAN = REST_GENE_PHYS(RESU_GENE=TRAN_GEN, NOM_CHAM="DEPL", INST=t0, PRECISION=1.0e-08)

TEST_RESU(
    RESU=_F(
        INST=t0,
        REFERENCE="ANALYTIQUE",
        RESULTAT=TRAN,
        NOM_CHAM="DEPL",
        GROUP_NO="N02",
        NOM_CMP="DX",
        VALE_CALC=7.4534998622e-06,
        VALE_REFE=0.0,
        CRITERE=("ABSOLU", "RELATIF"),
        PRECISION=1.00e-4,
    )
)

FIN()
#
