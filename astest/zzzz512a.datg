from code_aster.Utilities import sympy
from sympy import *

init_printing(use_unicode=True)

mu = sympy.Symbol("mu", positive=True, real=True)
lamba = sympy.Symbol("lamba", positive=True, real=True)

x = sympy.Symbol("x", real=True)
y = sympy.Symbol("y", real=True)
z = sympy.Symbol("z", real=True)

# deplacement a renseigner
ux = z * (x + 1)* y*x + x*x
uy = x * (y + 3) *z*y + y*y
uz = y * (z - 2) * x*z + z*z

# calcul G
G = simplify(
    sympy.Matrix(
        [
            [diff(ux, x), diff(ux, y), diff(ux, z)],
            [diff(uy, x), diff(uy, y), diff(uy, z)],
            [diff(uz, x), diff(uz, y), diff(uz, z)],
        ]
    )
)
pprint(G)
print("Gs =")
Gs = simplify(0.5 * (G + G.transpose()))
pprint(Gs)

divu = Gs.trace()


# calcul sigma
sigma = trigsimp(simplify(2 * mu * Gs + lamba * divu * eye(3)))

print("sigma =")
pprint(sigma)


fx = -simplify((diff(sigma[0, 0], x) + diff(sigma[0, 1], y) + diff(sigma[0, 2], z)))
fy = -simplify((diff(sigma[1, 0], x) + diff(sigma[1, 1], y) + diff(sigma[1, 2], z)))
fz = -simplify((diff(sigma[2, 0], x) + diff(sigma[2, 1], y) + diff(sigma[2, 2], z)))

# calcul force volumique
f = trigsimp(sympy.Matrix([[fx], [fy], [fz]]))

print("force f =")
pprint(f)
