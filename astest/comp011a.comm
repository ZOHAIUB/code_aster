# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: marina.bottoni at edf.fr
#
# CAS-TEST DE REFERENCE : SSNP129A
#
# =====================================================================

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="NON"))
# SDVERI='NON' car la verification est trop couteuse en CPU

import numpy as NP

TREF = 20.0

Tmax = 240.0

NCAL = 10

tmax = 1.0

ZERO = DEFI_CONSTANTE(VALE=0.0)

YOUN = DEFI_FONCTION(NOM_PARA="TEMP", VALE=(0.0, 30000.0e6, 500.0, 10000.0e6))

ALPH = DEFI_FONCTION(NOM_PARA="TEMP", VALE=(0.0, 0.5e-05, 500.0, 0.8e-05))


MATERI = DEFI_MATERIAU(
    ELAS_FO=_F(E=YOUN, NU=ZERO, TEMP_DEF_ALPHA=TREF, ALPHA=ALPH),
    BETON_REGLE_PR=_F(D_SIGM_EPSI=-10000.0e6, SYT=3.0e6, SYC=30.0e6, EPSC=1.0e-3, N=2.0),
)


LMAT2 = [None] * (NCAL)
time = 0.0
tmax = 1.0
for i in range(NCAL):
    timem = time
    time = timem + tmax / NCAL
    Ti = TREF + time / tmax * (Tmax - TREF)
    Tm = TREF + timem / tmax * (Tmax - TREF)
    LMAT2[i] = DEFI_MATERIAU(
        ELAS=_F(E=YOUN(Ti), NU=0.0, ALPHA=0.0),
        BETON_REGLE_PR=_F(D_SIGM_EPSI=-10000.0e6, SYT=3.0e6, SYC=30.0e6, EPSC=1.0e-3, N=2.0),
    )


compor = "BETON_REGLE_PR"


L_INST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=1, NOMBRE=NCAL),))

TIMP = DEFI_FONCTION(NOM_PARA="INST", NOM_RESU="TEMP", VALE=(0.0, TREF, 1.0, Tmax))

U = SIMU_POINT_MAT(
    COMPORTEMENT=_F(RELATION=compor),
    MATER=MATERI,
    MODELISATION="D_PLAN",
    SUPPORT="ELEMENT",
    AFFE_VARC=(_F(NOM_VARC="TEMP", VALE_FONC=TIMP, VALE_REF=TREF),),
    INCREMENT=_F(LIST_INST=L_INST),
    NEWTON=_F(REAC_ITER=1),
    EPSI_IMPOSE=_F(EPXX=ZERO),
)

IMPR_TABLE(TABLE=U)

MATER = [None] * NCAL
RESU = [None] * NCAL

SXM = 0.0
EXM = 0.0

Nbvari = 1

Vim = NP.zeros(Nbvari)

time = 0.0
tmax = 1.0
epsi = 1.0e-10

VERIF = FORMULE(VALE="abs ((VAL_CAL - VAL_REF)/VAL_REF)", NOM_PARA=["VAL_REF", "VAL_CAL"])

for i in range(NCAL - 1):

    timem = time

    time = timem + tmax / NCAL

    Ti = TREF + time / tmax * (Tmax - TREF)

    Tm = TREF + timem / tmax * (Tmax - TREF)

    # deformation mecanique imposee correspondant a la deformation thermique du premier calcul

    epsimp = DEFI_CONSTANTE(VALE=-ALPH(Ti) * (Ti - TREF))
    EXM = -ALPH(Tm) * (Tm - TREF)

    print("i=", i, " instant=", time, " Temperature=", Ti)

    listinst = DEFI_LIST_REEL(DEBUT=timem, INTERVALLE=(_F(JUSQU_A=time, NOMBRE=1),))

    RESU[i] = SIMU_POINT_MAT(
        COMPORTEMENT=_F(RELATION=compor),
        MATER=LMAT2[i],
        SUPPORT="ELEMENT",
        MODELISATION="D_PLAN",
        AFFE_VARC=(_F(NOM_VARC="TEMP", VALE_FONC=TIMP, VALE_REF=TREF),),
        INCREMENT=_F(LIST_INST=listinst),
        NEWTON=_F(REAC_ITER=1),
        EPSI_IMPOSE=_F(EPXX=epsimp),
        EPSI_INIT=_F(EPXX=EXM, EPYY=0.0, EPZZ=0.0, EPXY=0.0, EPXZ=0.0, EPYZ=0.0),
    )

    # recuperation des valeurs initiales du futur pas de temps dans la table resultat

    IMPR_TABLE(TABLE=RESU[i])

    DETRUIRE(NOM=epsimp)
    DETRUIRE(NOM=listinst)

    NOMPARA = "VMIS"
    TCOMPR = CALC_TABLE(
        TABLE=U,
        ACTION=(
            _F(OPERATION="FILTRE", NOM_PARA=("INST"), VALE=time),
            _F(OPERATION="EXTR", NOM_PARA=("INST", NOMPARA)),
            _F(OPERATION="RENOMME", NOM_PARA=(NOMPARA, "VAL_CAL")),
            _F(OPERATION="COMB", TABLE=RESU[i], NOM_PARA=("INST")),
            _F(OPERATION="EXTR", NOM_PARA=("INST", NOMPARA, "VAL_CAL")),
            _F(OPERATION="RENOMME", NOM_PARA=(NOMPARA, "VAL_REF")),
            _F(OPERATION="OPER", NOM_PARA="DIFF", FORMULE=VERIF),
        ),
    )

    TEST_TABLE(
        TABLE=TCOMPR,
        NOM_PARA="DIFF",
        TYPE_TEST="MAX",
        VALE_CALC=0.0,
        VALE_REFE=0.0,
        CRITERE="ABSOLU",
        PRECISION=1.0e-6,
        REFERENCE="AUTRE_ASTER",
    )
    DETRUIRE(NOM=TCOMPR)

    NOMPARA = "TRACE"
    TCOMPR = CALC_TABLE(
        TABLE=U,
        ACTION=(
            _F(OPERATION="FILTRE", NOM_PARA=("INST"), VALE=time),
            _F(OPERATION="EXTR", NOM_PARA=("INST", NOMPARA)),
            _F(OPERATION="RENOMME", NOM_PARA=(NOMPARA, "VAL_CAL")),
            _F(OPERATION="COMB", TABLE=RESU[i], NOM_PARA=("INST")),
            _F(OPERATION="EXTR", NOM_PARA=("INST", NOMPARA, "VAL_CAL")),
            _F(OPERATION="RENOMME", NOM_PARA=(NOMPARA, "VAL_REF")),
            _F(OPERATION="OPER", NOM_PARA="DIFF", FORMULE=VERIF),
        ),
    )

    TEST_TABLE(
        TABLE=TCOMPR,
        NOM_PARA="DIFF",
        TYPE_TEST="MAX",
        VALE_CALC=0.0,
        VALE_REFE=0.0,
        CRITERE="ABSOLU",
        PRECISION=1.0e-6,
        REFERENCE="AUTRE_ASTER",
    )
    DETRUIRE(NOM=TCOMPR)


FIN()
