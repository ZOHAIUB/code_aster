# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: sarah.plessis at edf.fr
#
#
# ----------------------------------------------------------------------
#    Cas test sslv135a : cube 3D
#                        Essai de chargement cyclique bi-axial
# ----------------------------------------------------------------------
#        Unites : Newton , Millimetre , Seconde (N,MM,S,->Mpa)
# ----------------------------------------------------------------------
#
#               y       a
#               I<------------->                     a = 10 mm
#                     Face1                                    2
#                   (dessus)                         S = 100 mm
#               P1              P2
#               o--------------o
#              /I             /I
#        P5   / I        P6  / I
#            o--+-----------o  I
#            I  I   Face5   I  I  Face4
#  Face3     I  I (derri.)  I  I (cote d.)
# (cote g.)  I  I           I  I
#            I  I  P3       I  I P4
#            I  o-----------I--o      - x
#            I /            I /
#         P7 I/          P8 I/
#            o--------------o
#
#          /       Face2
#         z      (dessous)
#
#
#    CHARGEMENT     FX(T) <=> +      FY(T) <=> x
#
#            I
#            I                 x
#            I
#   1.0E+4 N I     +        x     x
#            I  +     +        3s     4s
#           -I-----I-----I-----I-----I-----> T
#            I    1s    2s  +     +
#            I  x     x        +
#            I
#  -2.0E+4 N I     x
#            I
#
#
# L'AMPLITUDE DE FX(T) = 2.0E+4 N, SA VALEUR MOYENNE = 0.0
# L'AMPLITUDE DE FY(T) = 4.0E+4 N, SA VALEUR MOYENNE = 0.0
# A L'INSTANT 0S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 1S, FX(T) = 1.0E+4 N  ET  FY(T) = -2.0E+4 N
# A L'INSTANT 2S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
# A L'INSTANT 3S, FX(T) = -1.0E+4 N  ET  FY(T) = 2.0E+4 N
# A L'INSTANT 4S, FX(T) = 0.0 N  ET  FY(T) = 0.0 N
#
# ----------------------------------------------------------------------
#
# DANS CE CAS TEST NOUS TESTONS LE CRITERE DE MATAKE_MODI_AC AUX POINTS DE GAUSS
# ET AUX NOEUDS
# ----------------------------------------------------------------------
#
#
#
DEBUT(CODE="OUI", IGNORE_ALARM=("PREPOST4_27"), DEBUG=_F(SDVERI="OUI"))

CUBE = LIRE_MAILLAGE(FORMAT="MED")

CUBE = DEFI_GROUP(
    reuse=CUBE,
    MAILLAGE=CUBE,
    CREA_GROUP_MA=(_F(NOM="M60", MAILLE="M270"),),
    CREA_GROUP_NO=(_F(NOM="N206", NOEUD="N206"), _F(NOM="N1", NOEUD="N1")),
)

CUBE = DEFI_GROUP(
    reuse=CUBE,
    ALARME="OUI",
    CREA_GROUP_NO=(
        _F(GROUP_MA="FACE1", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE2", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE3", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE4", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE5", CRIT_NOEUD="TOUS"),
        _F(GROUP_MA="FACE6", CRIT_NOEUD="TOUS"),
    ),
    MAILLAGE=CUBE,
)

CUBE = DEFI_GROUP(
    reuse=CUBE,
    ALARME="OUI",
    CREA_GROUP_MA=(
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE1", NOM="FACE1_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE2", NOM="FACE2_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE3", NOM="FACE3_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE4", NOM="FACE4_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE5", NOM="FACE5_3D"),
        _F(OPTION="APPUI", TYPE_APPUI="AU_MOINS_UN", GROUP_NO="FACE6", NOM="FACE6_3D"),
    ),
    MAILLAGE=CUBE,
)

WHOL = DEFI_FONCTION(
    NOM_PARA="SIGM",
    INTERPOL="LOG",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
    VALE=(
        138.0,
        1000000.0,
        152.0,
        500000.0,
        165.0,
        200000.0,
        180.0,
        100000.0,
        200.0,
        50000.0,
        250.0,
        20000.0,
        295.0,
        12000.0,
        305.0,
        10000.0,
        340.0,
        5000.0,
        430.0,
        2000.0,
        540.0,
        1000.0,
        690.0,
        500.0,
        930.0,
        200.0,
        1210.0,
        100.0,
        1590.0,
        50.0,
        2210.0,
        20.0,
        2900.0,
        10.0,
    ),
)

WHOL_F = FORMULE(VALE=" 4098.3*(NBRUP**(-0.2693)) ", NOM_PARA="NBRUP")


#               _____________________________
#              I                             I
#              I     AMPLITUDE CONSTANTE     I
#              I_____________________________I
#

COEF = DEFI_FONCTION(
    NOM_PARA="INST",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
    VALE=(
        0.0,
        0.0,
        1.0,
        100.0,
        2.0,
        0.0,
        3.0,
        -100.0,
        4.0,
        0.0,
        #                                          5.,  100.,
        #                                          6.,    0.,
        #                                          7., -100.,
        #                                          8.,    0.,
    ),
)
ACIER = [None] * 2
ACIER[0] = DEFI_MATERIAU(
    ELAS=_F(E=200000.0, NU=0.3, ALPHA=0.0),
    FATIGUE=_F(WOHLER=WHOL),
    CISA_PLAN_CRIT=_F(CRITERE="MATAKE_MODI_AC", COEF_FLEX_TORS=1.5, MATAKE_A=1.0, MATAKE_B=2.0),
)

ACIER[1] = DEFI_MATERIAU(
    ELAS=_F(E=200000.0, NU=0.3, ALPHA=0.0),
    FATIGUE=_F(WOHLER=WHOL),
    CISA_PLAN_CRIT=_F(CRITERE="DANG_VAN_MODI_AC", D_VAN_A=1.0, D_VAN_B=2.0, COEF_CISA_TRAC=1.5),
)


LINST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=4.0, NOMBRE=8))

TROISD = AFFE_MODELE(MAILLAGE=CUBE, AFFE=_F(PHENOMENE="MECANIQUE", MODELISATION="3D", TOUT="OUI"))

MAT = [None] * 2
MAT[0] = AFFE_MATERIAU(MAILLAGE=CUBE, AFFE=_F(TOUT="OUI", MATER=ACIER[0]))

MAT[1] = AFFE_MATERIAU(MAILLAGE=CUBE, AFFE=_F(TOUT="OUI", MATER=ACIER[1]))


# CHARGEMENT SELON LES 2 AXES X ET Y
# ----------------------------------

TR_CS = AFFE_CHAR_MECA(
    MODELE=TROISD,
    FACE_IMPO=(_F(GROUP_MA="FACE3", DX=0.0), _F(GROUP_MA="FACE2", DY=0.0)),
    DDL_IMPO=(_F(GROUP_NO="P3", DZ=0.0)),
    FORCE_FACE=(_F(GROUP_MA="FACE4", FX=1.0), _F(GROUP_MA="FACE1", FY=-2.0)),
)

# CALCUL AVEC STAT_NON_LINE
# -------------------------

SOL_NL = STAT_NON_LINE(
    TITRE="TEST TRACTION-COMPRESSION ALTERNEE - PLAN CRITIQUE",
    MODELE=TROISD,
    CHAM_MATER=MAT[0],
    EXCIT=_F(CHARGE=TR_CS, FONC_MULT=COEF, TYPE_CHARGE="FIXE_CSTE"),
    COMPORTEMENT=_F(RELATION="ELAS", DEFORMATION="PETIT", TOUT="OUI"),
    INCREMENT=_F(LIST_INST=LINST),
    NEWTON=_F(MATRICE="ELASTIQUE", REAC_INCR=0),
)
SOL_NL = CALC_CHAMP(
    reuse=SOL_NL, RESULTAT=SOL_NL, CONTRAINTE=("SIGM_ELNO",), DEFORMATION=("EPSI_ELGA", "EPSI_ELNO")
)

SOL_NL = CALC_CHAMP(
    reuse=SOL_NL,
    RESULTAT=SOL_NL,
    GROUP_MA=("FACE1_3D", "FACE2_3D", "FACE3_3D", "CUBE"),
    CONTRAINTE="SIGM_NOEU",
    DEFORMATION="EPSI_NOEU",
)
# TEST DES CONTRAINTES OBTENUES AUX NOEUDS AVEC STAT_NON_LINE
# --------------------------------------------------------

TEST_RESU(
    RESU=(
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            RESULTAT=SOL_NL,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N1",
            NOM_CMP="SIXX",
            VALE_CALC=-100.00000000000,
            VALE_REFE=-100.0,
            PRECISION=1.0e-10,
        ),
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            RESULTAT=SOL_NL,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N1",
            NOM_CMP="SIYY",
            VALE_CALC=200.00000000000,
            VALE_REFE=200.0,
            PRECISION=1.0e-10,
        ),
    )
)

TEST_RESU(
    RESU=(
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            POINT=3,
            RESULTAT=SOL_NL,
            NOM_CHAM="SIEF_ELGA",
            NOM_CMP="SIXX",
            VALE_CALC=-100.00000000000,
            VALE_REFE=-100.0,
            PRECISION=1.0e-10,
            GROUP_MA="M60",
        ),
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            POINT=3,
            RESULTAT=SOL_NL,
            NOM_CHAM="SIEF_ELGA",
            NOM_CMP="SIYY",
            VALE_CALC=200.00000000000,
            VALE_REFE=200.0,
            PRECISION=1.0e-10,
            GROUP_MA="M60",
        ),
    )
)

####################
CRIT = [None] * 4

CRIT[0] = "MATAKE_MODI_AC"

CRIT[1] = "DANG_VAN_MODI_AC"

### POUR CALCULER 'NORMOY','EPNMAX', 'EPNMOY', IL NOUS FAUT AJOUTER DANS LA LISTE
### DES PARATMETRES MEME SI ON N4UTISE PAS DANS LA FORMULE
# POUR RETROUVER 'MATAKE_MODI_AC'
CRIT[2] = FORMULE(
    VALE=" 1.5*( DTAUMA + max(0,NORMAX) ) ",
    NOM_PARA=["DTAUMA", "NORMAX", "NORMOY", "EPNMAX", "EPNMOY"],
)


# POUR RETROUVER 'DANG_VAN_MODI_AC'
CRIT[3] = FORMULE(
    VALE=" 1.5*(DTAUMA + max(PHYDRM,0)) ",
    NOM_PARA=["DTAUMA", "PHYDRM", "NORMOY", "EPNMAX", "EPNMOY"],
)

## -----------------------------------------------------------------------


NPAR = [
    "DTAUM1",
    "VNM1X",
    "VNM1Y",
    "VNM1Z",
    "SINMAX1",
    "SINMOY1",
    "EPNMAX1",
    "EPNMOY1",
    "SIGEQ1",
    "NBRUP1",
    "ENDO1",
    "DTAUM2",
    "VNM2X",
    "VNM2Y",
    "VNM2Z",
    "SINMAX2",
    "SINMOY2",
    "EPNMAX2",
    "EPNMOY2",
    "SIGEQ2",
    "NBRUP2",
    "ENDO2",
]
CTEST = [
    "RELATIF",
    "RELATIF",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "RELATIF",
    "RELATIF",
    "RELATIF",
    "RELATIF",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "ABSOLU",
    "RELATIF",
    "RELATIF",
    "RELATIF",
]

RESU = [
    1.50e02,
    7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    3.0000000000000e02,
    1.0946000000000e04,
    9.1356470832402e-05,
    1.50e02,
    -7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    3.0000000000000e02,
    1.0946000000000e04,
    9.1356470832402e-05,
    # DANG_VAN
    1.50e02,
    7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    2.7500000000000e02,
    1.4903000000000e04,
    6.7099587679274e-05,
    1.50e02,
    -7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    2.7500000000000e02,
    1.4903000000000e04,
    6.7099587679274e-05,
]

RESUF = [
    1.50e02,
    7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    3.0000000000000e02,
    1.6519e04,
    6.05356e-05,
    1.50e02,
    -7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    3.0000000000000e02,
    1.6519e04,
    6.05356e-05,
    # DANG_VAN
    1.50e02,
    7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    2.7500000000000e02,
    2.2822e04,
    4.381737e-05,
    1.50e02,
    -7.0710678118655e-01,
    7.0710678118655e-01,
    0,
    5.0000000000000e01,
    0,
    1.7500000000000e-04,
    0,
    2.7500000000000e02,
    2.2822e04,
    4.381737e-05,
]

VALE_CALC_1 = [
    150.0,
    0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -9.8587804586716e-14,
    1.75e-04,
    -7.4538899358378e-20,
    300.0,
    10946.0,
    9.1356470832399e-05,
    150.0,
    -0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -1.0880185641327e-13,
    1.75e-04,
    -3.3881317890173e-21,
    300.0,
    10946.0,
    9.1356470832399e-05,
    150.0,
    0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -9.8587804586716e-14,
    1.75e-04,
    -7.4538899358378e-20,
    275.0,
    14903.0,
    6.7099587679273e-05,
    150.0,
    -0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -1.0880185641327e-13,
    1.75e-04,
    -3.3881317890173e-21,
    275.0,
    14903.0,
    6.7099587679273e-05,
]

VALE_CALC_2 = [
    150.0,
    0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -9.8587804586716e-14,
    1.75e-04,
    -7.4538899358378e-20,
    300.0,
    16460.0,
    6.0754412625264e-05,
    150.0,
    -0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -1.0880185641327e-13,
    1.75e-04,
    -3.3881317890173e-21,
    300.0,
    16460.0,
    6.0754412625264e-05,
    150.0,
    0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -9.8587804586716e-14,
    1.75e-04,
    -7.4538899358378e-20,
    275.0,
    22738.0,
    4.3980118706997e-05,
    150.0,
    -0.70710678118655,
    0.70710678118655,
    6.1232339957368e-17,
    49.999999999999,
    -1.0880185641327e-13,
    1.75e-04,
    -3.3881317890173e-21,
    275.0,
    22738.0,
    4.3980118706997e-05,
]

# CALCUL DE LA FATIGUE SUR LES FACE 1, 2 ET 3 DE LA STRUCTURE AUX NOEUDS
# ----------------------------------------------------------------------
FANL1 = [None] * 8
for i in range(2):

    FANL1[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE=CRIT[i],
        METHODE="CERCLE_EXACT",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FANL1[i],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###POUR CRITERE EN FORMULE
###OPTION 1: COURBE_GRD_VIE  = 'WOHLER'
for i in range(2):

    FANL1[i + 2] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="WOHLER",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FANL1[i + 2],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 2: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL
for i in range(2):

    FANL1[i + 4] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FANL1[i + 4],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 3: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL_F
for i in range(2):

    FANL1[i + 6] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL_F,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=5.0000000000000001e-3,
                CHAM_GD=FANL1[i + 6],
                VALE_CALC=VALE_CALC_2[j + 22 * i],
                VALE_REFE=RESUF[j + 22 * i],
            )
        )

# CALCUL DE LA FATIGUE SUR L'ENSEMBLE DE LA STRUCTURE AUX POINTS DE GAUSS
# -----------------------------------------------------------------------
FANL2 = [None] * 8
for i in range(1):
    FANL2[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        MAILLAGE=CUBE,
        GROUP_MA=("CUBE"),
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        COEF_PREECROU=1.0,
        CRITERE=CRIT[i],
        METHODE="CERCLE_EXACT",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FANL2[i],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###POUR CRITERE EN FORMULE
###OPTION 1: COURBE_GRD_VIE  = 'WOHLER'
for i in range(2):

    FANL2[i + 2] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="WOHLER",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FANL2[i + 2],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 2: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL
for i in range(2):

    FANL2[i + 4] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FANL2[i + 4],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 3: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL_F
for i in range(2):

    FANL2[i + 6] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_NL,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL_F,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=5.0000000000000001e-3,
                GROUP_MA="M60",
                CHAM_GD=FANL2[i + 6],
                VALE_CALC=VALE_CALC_2[j + 22 * i],
                VALE_REFE=RESUF[j + 22 * i],
            )
        )

#################################################################################"
# -------------------------
# CALCUL AVEC MECA_STATIQUE
# -------------------------

SOL_L = MECA_STATIQUE(
    TITRE="TEST TRACTION-COMPRESSION ALTERNEE - PLAN CRITIQUE",
    MODELE=TROISD,
    CHAM_MATER=MAT[0],
    EXCIT=_F(CHARGE=TR_CS, FONC_MULT=COEF),
    LIST_INST=LINST,
)

SOL_L = CALC_CHAMP(
    reuse=SOL_L,
    RESULTAT=SOL_L,
    CONTRAINTE=("SIGM_ELNO", "SIGM_NOEU"),
    DEFORMATION=("EPSI_ELGA", "EPSI_ELNO", "EPSI_NOEU"),
)

# TEST DES CONTRAINTES OBTENUES AUX POINTS DE GAUSS AVEC MECA_STATIQUE
# -----------------------------------------------------------------

TEST_RESU(
    RESU=(
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            POINT=3,
            RESULTAT=SOL_L,
            NOM_CHAM="SIEF_ELGA",
            NOM_CMP="SIXX",
            VALE_CALC=-100.00000000000,
            VALE_REFE=-100.0,
            PRECISION=1.0e-10,
            GROUP_MA="M60",
        ),
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            POINT=3,
            RESULTAT=SOL_L,
            NOM_CHAM="SIEF_ELGA",
            NOM_CMP="SIYY",
            VALE_CALC=200.00000000000,
            VALE_REFE=200.0,
            PRECISION=1.0e-10,
            GROUP_MA="M60",
        ),
    )
)

TEST_RESU(
    RESU=(
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            RESULTAT=SOL_L,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N206",
            NOM_CMP="SIXX",
            VALE_CALC=-100.00000000000,
            VALE_REFE=-100.0,
            PRECISION=1.0e-10,
        ),
        _F(
            INST=3.0,
            REFERENCE="ANALYTIQUE",
            RESULTAT=SOL_L,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N206",
            NOM_CMP="SIYY",
            VALE_CALC=200.00000000000,
            VALE_REFE=200.0,
            PRECISION=1.0e-10,
        ),
    )
)

# CALCUL DE LA FATIGUE SUR LES FACE 1, 2 ET 3 DE LA STRUCTURE AUX NOEUDS
# ----------------------------------------------------------------------
FALI1 = [None] * 8
for i in range(1):

    FALI1[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE=CRIT[i],
        METHODE="CERCLE_EXACT",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FALI1[i],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###POUR CRITERE EN FORMULE
###OPTION 1: COURBE_GRD_VIE  = 'WOHLER'
for i in range(2):

    FALI1[i + 2] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="WOHLER",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FALI1[i + 2],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 2: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL
for i in range(2):

    FALI1[i + 4] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                CHAM_GD=FALI1[i + 4],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 3: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL_F
for i in range(2):

    FALI1[i + 6] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_NOEUD",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("FACE1", "FACE2", "FACE3"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL_F,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_NO=_F(
                GROUP_NO="N1",
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                NOM_CMP=NPAR[j],
                PRECISION=5.0000000000000001e-3,
                CHAM_GD=FALI1[i + 6],
                VALE_CALC=VALE_CALC_2[j + 22 * i],
                VALE_REFE=RESUF[j + 22 * i],
            )
        )

# CALCUL DE LA FATIGUE SUR L'ENSEMBLE DE LA STRUCTURE AUX POINTS DE GAUSS
# -----------------------------------------------------------------------
FALI2 = [None] * 8
for i in range(1):
    FALI2[i] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        MAILLAGE=CUBE,
        GROUP_MA=("CUBE"),
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        COEF_PREECROU=1.0,
        CRITERE=CRIT[i],
        METHODE="CERCLE_EXACT",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FALI2[i],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###POUR CRITERE EN FORMULE
###OPTION 1: COURBE_GRD_VIE  = 'WOHLER'
for i in range(2):

    FALI2[i + 2] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="WOHLER",
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FALI2[i + 2],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 2: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL
for i in range(2):

    FALI2[i + 4] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=1.0e-10,
                GROUP_MA="M60",
                CHAM_GD=FALI2[i + 4],
                VALE_CALC=VALE_CALC_1[j + 22 * i],
                VALE_REFE=RESU[j + 22 * i],
            )
        )

###OPTION 3: COURBE_GRD_VIE  = 'FORM_VIE', FORMULE_VIE = WHOL_F
for i in range(2):

    FALI2[i + 6] = CALC_FATIGUE(
        TYPE_CALCUL="FATIGUE_MULTI",
        OPTION="DOMA_ELGA",
        TYPE_CHARGE="PERIODIQUE",
        RESULTAT=SOL_L,
        CHAM_MATER=MAT[i],
        GROUP_MA=("CUBE"),
        MAILLAGE=CUBE,
        CRITERE="FORMULE_CRITERE",
        FORMULE_GRDEQ=CRIT[i + 2],
        COURBE_GRD_VIE="FORM_VIE",
        FORMULE_VIE=WHOL_F,
    )

    for j in range(22):
        TEST_RESU(
            CHAM_ELEM=_F(
                CRITERE=CTEST[j],
                REFERENCE="ANALYTIQUE",
                POINT=3,
                NOM_CMP=NPAR[j],
                PRECISION=5.0000000000000001e-3,
                GROUP_MA="M60",
                CHAM_GD=FALI2[i + 6],
                VALE_CALC=VALE_CALC_2[j + 22 * i],
                VALE_REFE=RESUF[j + 22 * i],
            )
        )

# TEST LE CRITERE VON-MISES TRESCA

# CALCUL DE LA FATIGUE SUR LES FACE 4, 5 ET 6 DE LA STRUCTURE AUX NOEUDS

# TEST DES RESULTATS OBTENUS AUX POINTS DE GAUSS AVEC STAT_NON_LINE
# -----------------------------------------------------------------

FATI_NL = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_ELGA",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_NL,
    CHAM_MATER=MAT[0],
    GROUP_MA=("CUBE"),
    CRITERE="VMIS_TRESCA",
)

TEST_RESU(
    CHAM_ELEM=(
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=3,
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_NL,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=3,
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_NL,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=7,
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_NL,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=7,
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_NL,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
    )
)

# TEST DES RESULTATS OBTENUS AUX NOEUDS AVEC STAT_NON_LINE
# --------------------------------------------------------
FAT_NLNO = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_NOEUD",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_NL,
    CHAM_MATER=MAT[0],
    GROUP_MA=("FACE1", "FACE2", "FACE3"),
    CRITERE="VMIS_TRESCA",
)

TEST_RESU(
    CHAM_NO=(
        _F(
            GROUP_NO="N1",
            REFERENCE="ANALYTIQUE",
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            CHAM_GD=FAT_NLNO,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            GROUP_NO="N1",
            REFERENCE="ANALYTIQUE",
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            CHAM_GD=FAT_NLNO,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
    )
)

# TEST DES RESULTATS OBTENUS AUX POINTS DE GAUSS AVEC MECA_STATIQUE
# -----------------------------------------------------------------

FATI_L = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_ELGA",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_L,
    CHAM_MATER=MAT[0],
    GROUP_MA=("CUBE"),
    CRITERE="VMIS_TRESCA",
)

TEST_RESU(
    CHAM_ELEM=(
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=3,
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_L,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=3,
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_L,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=7,
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_L,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            REFERENCE="ANALYTIQUE",
            POINT=7,
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FATI_L,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
    )
)

# TEST DES RESULTATS OBTENUS AUX NOEUDS AVEC MECA_STATIQUE
# --------------------------------------------------------
FAT_LNO = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_NOEUD",
    TYPE_CHARGE="PERIODIQUE",
    RESULTAT=SOL_L,
    CHAM_MATER=MAT[0],
    GROUP_MA=("FACE4", "FACE5", "FACE6"),
    MAILLAGE=CUBE,
    CRITERE="VMIS_TRESCA",
)

TEST_RESU(
    CHAM_NO=(
        _F(
            GROUP_NO="N206",
            REFERENCE="ANALYTIQUE",
            NOM_CMP="VMIS",
            PRECISION=1.0e-10,
            CHAM_GD=FAT_LNO,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            GROUP_NO="N206",
            REFERENCE="ANALYTIQUE",
            NOM_CMP="TRESCA",
            PRECISION=1.0e-10,
            CHAM_GD=FAT_LNO,
            VALE_CALC=600.00000000000,
            VALE_REFE=600.0,
        ),
    )
)

# TEST CRITER VONMISES AVEC LA FORMULE
CRIT_FAT = FORMULE(VALE=" 2*DSIGEQ ", NOM_PARA="DSIGEQ")

# CALCUL DE LA FATIGUE SUR L'ENSEMBLE DE LA STRUCTURE AUX POINTS DE GAUSS
# -----------------------------------------------------------------------

FANLVMMA = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_ELGA",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_NL,
    CHAM_MATER=MAT[0],
    GROUP_MA=("CUBE"),
    CRITERE="FORMULE_CRITERE",
    FORMULE_GRDEQ=CRIT_FAT,
    COURBE_GRD_VIE="WOHLER",
)

TEST_RESU(
    CHAM_ELEM=(
        _F(
            REFERENCE="AUTRE_ASTER",
            POINT=3,
            NOM_CMP="SIGEQ1",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FANLVMMA,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
        _F(
            REFERENCE="AUTRE_ASTER",
            POINT=7,
            NOM_CMP="SIGEQ1",
            PRECISION=1.0e-10,
            GROUP_MA="M60",
            CHAM_GD=FANLVMMA,
            VALE_CALC=529.15026221292,
            VALE_REFE=529.15026221291998,
        ),
    )
)

# CALCUL DE LA FATIGUE SUR LES FACE 1, 2 ET 3 DE LA STRUCTURE AUX NOEUDS
# ----------------------------------------------------------------------

FANLVMNO = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_NOEUD",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_NL,
    CHAM_MATER=MAT[0],
    GROUP_MA=("FACE1", "FACE2", "FACE3"),
    CRITERE="FORMULE_CRITERE",
    FORMULE_GRDEQ=CRIT_FAT,
    COURBE_GRD_VIE="WOHLER",
)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="N1",
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="SIGEQ1",
        PRECISION=1.0e-10,
        CHAM_GD=FANLVMNO,
        VALE_CALC=529.15026221292,
        VALE_REFE=529.15026221291998,
    )
)

FANLVMN1 = CALC_FATIGUE(
    TYPE_CALCUL="FATIGUE_MULTI",
    OPTION="DOMA_NOEUD",
    TYPE_CHARGE="PERIODIQUE",
    MAILLAGE=CUBE,
    RESULTAT=SOL_NL,
    CHAM_MATER=MAT[0],
    GROUP_NO=("FACE1", "FACE2", "FACE3"),
    CRITERE="FORMULE_CRITERE",
    FORMULE_GRDEQ=CRIT_FAT,
    COURBE_GRD_VIE="WOHLER",
)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="N1",
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="SIGEQ1",
        PRECISION=1.0e-10,
        CHAM_GD=FANLVMN1,
        VALE_CALC=529.15026221292,
        VALE_REFE=529.15026221291998,
    )
)

FIN()
