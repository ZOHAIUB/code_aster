# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#

#  GUIDE D'ONDE INCIDENTE A SORTIE ANECHOIQUE

#           EN U,PSI - CAS AXIS

#           CAS TEST AHLV101I

#

import numpy

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

F = 500.0

# CREA_GROUP_COUL juste pour tester la fonctionnalite pas utile ici
MAIL = LIRE_MAILLAGE(FORMAT="IDEAS", UNITE=19, CREA_GROUP_COUL="OUI")

AIR = DEFI_MATERIAU(FLUIDE=_F(RHO=1.3, CELE_R=343.0))

CHAMPMAT = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=_F(TOUT="OUI", MATER=AIR))

GUIDE = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(TOUT="OUI", MODELISATION="AXIS_FLUIDE", FORMULATION="U_PSI", PHENOMENE="MECANIQUE"),
        _F(
            GROUP_MA="SORTIE",
            MODELISATION="AXIS_FLUI_ABSO",
            FORMULATION="U_PSI",
            PHENOMENE="MECANIQUE",
        ),
    ),
)

#

CHARMECA = AFFE_CHAR_MECA(MODELE=GUIDE, ONDE_FLUI=_F(GROUP_MA="ENTREE", PRES=1.0))

ASSEMBLAGE(
    MODELE=GUIDE,
    CHARGE=CHARMECA,
    CHAM_MATER=CHAMPMAT,
    NUME_DDL=CO("NUM"),
    MATR_ASSE=(
        _F(MATRICE=CO("MATASK"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MATASM"), OPTION="MASS_MECA"),
        _F(MATRICE=CO("MATASC"), OPTION="AMOR_MECA"),
        _F(MATRICE=CO("MATASI1"), OPTION="ONDE_FLUI"),
    ),
    VECT_ASSE=(_F(VECTEUR=CO("VECTASS"), OPTION="CHAR_MECA")),
)

MATASI = COMB_MATR_ASSE(
    COMB_R=(_F(MATR_ASSE=MATASI1, COEF_R=1.0), _F(MATR_ASSE=MATASC, COEF_R=1.0))
)

#

DYNAHARM = DYNA_VIBRA(
    TYPE_CALCUL="HARM",
    BASE_CALCUL="PHYS",
    MATR_MASS=MATASM,
    MATR_RIGI=MATASK,
    MATR_AMOR=MATASI,
    NOM_CHAM="DEPL",
    FREQ=F,
    EXCIT=_F(VECT_ASSE=VECTASS, COEF_MULT=1.0, PUIS_PULS=0, PHAS_DEG=0.0),
)

# EN HARMONIQUE : PRES = -RHO_F*I*OMEGA*PSI => PSI = PRES/(-1.0j*2*pi*freq*RHO_F)
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(0.5 + 0j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(0.49999652259292 + 1.2737649793476e-05j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N1",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(0.5 + 0j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(0.49999652259292 + 1.2737649793103e-05j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N3",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(-0.4825 - 0.1313j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(-0.48235155969704 - 0.13166993841987j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N151",
            NOM_CMP="PSI",
        ),
        _F(
            NUME_ORDRE=1,
            VALE_REFE_C=(-0.4825 - 0.1313j) / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            VALE_CALC_C=(-0.48235155969704 - 0.13166993841987j)
            / (-1.0j * 2.0 * numpy.pi * F * 1.3),
            PRECISION=1.0e-3,
            REFERENCE="ANALYTIQUE",
            RESULTAT=DYNAHARM,
            NOM_CHAM="DEPL",
            GROUP_NO="N153",
            NOM_CMP="PSI",
        ),
    )
)

FIN()
#
