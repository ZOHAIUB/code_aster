# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# ---------------------------------------------------------------------
#  Traction - compression confinee pour la loi ENDO_LOCA_TC (3D)
# ---------------------------------------------------------------------

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"), IMPR_MACRO="OUI")

import math


# Donnees d'entree
fc = 40.0
nu = 0.2
p = 1.5
Lf = 200.0


# Donnees estimees sur la base du fib model 2010 et estimation de la perte de linearite
young = (fc / 10) ** (1 / 3.0) * 21500.0
ft = 0.3 * (fc - 8) ** (2 / 3.0)
GF = 73e-3 * fc**0.18
sig0 = fc / 3.0


# Parametres internes du modele pour DEFI_MATERIAU
lbd = young * nu / (1 + nu) / (1 - 2 * nu)
dmu = young / (1 + nu)
ec = lbd + dmu
kappa = 2 * ec * GF / (Lf * ft**2)


# Autres parametres internes pour la solution analytique
m0 = 1.5 * pi * (p + 2) ** (-1.5)
D1 = 0.75 * pi * (p + 1) ** 0.5
r = (2 * (D1 - 1) - m0) / (2 - m0)
beta = fc / sig0


# Valeur cible pour l'endommagement en traction
b = 0.1  # endommagement cible en traction
rct = 15  # ratio deformation compression max / deformation traction max


print("fc    = ", fc)
print("nu    = ", nu)
print("p     = ", p)
print("Lf    = ", Lf)
print("young = ", young)
print("ft    = ", ft)
print("GF    = ", GF)
print("sig0  = ", sig0)
print("lambda = ", lbd)
print("mu     = ", 0.5 * dmu)
print("ec     = ", ec)
print("kappa  = ", kappa)
print("m0     = ", m0)
print("D1     = ", D1)
print("r      = ", r)
print("beta   = ", beta)
print("b      = ", b)
print("rct    = ", rct)


# Solution analytique en traction
eps_e = ft / ec
sig_t = (1 - b) * ft
h = 1 - b + 0.5 * kappa * b * (m0 + (D1 - m0) * b ** (r - 1))
stf_t = (1 - b) / h
eps_t = sig_t / (ec * stf_t)


# Post-traitements en traction
a = 0.5 * (m0 * b + (D1 - m0) * b**r - (D1 - m0) * (r - 1) / (r + 1) * b ** (r + 1))
wall_t = 0.5 * ec * eps_t**2
wneg_t = 0.0
wpos_t = wall_t - wneg_t


# Branche en compression
eps_c = -rct * eps_t
sigall_c = ec * eps_c
signeg_c = ec * min(eps_c, 0)
sigpos_c = sigall_c - signeg_c
chi_c = -signeg_c / sig0

if chi_c < 1:
    stf_c = 1.0
else:
    sqp = 1 + (beta - 1) * math.tanh((chi_c - 1) / (beta - 1))
    stf_c = sqp / chi_c

sig_c = stf_c * (stf_t * sigpos_c + signeg_c)


# Post-traitements en compression
wall_c = 0.5 * ec * eps_c**2
wneg_c = 0.5 * ec * min(eps_c, 0) ** 2
wpos_c = wall_c - wneg_c


# ----------------------------------------------------------------#
# MATERIAU                                                       #
# ----------------------------------------------------------------#


MATE = DEFI_MATER_GC(
    ENDO_LOCA_TC=_F(
        CODIFICATION="ESSAI",
        COEF_ECRO_TRAC=p,
        DIST_FISSURE=Lf,
        FC=fc,
        NU=nu,
        E=young,
        FT=ft,
        GF=GF,
        SIGM_COMP_SEUIL=sig0,
    )
)


TEMPS1 = DEFI_LIST_REEL(
    DEBUT=0.0,
    INTERVALLE=(_F(JUSQU_A=1.0, NOMBRE=2), _F(JUSQU_A=2.0, NOMBRE=5), _F(JUSQU_A=3.0, NOMBRE=5)),
)

DEFLIST1 = DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=TEMPS1), ECHEC=_F(ACTION="DECOUPE", SUBD_PAS=4, SUBD_NIVEAU=2)
)


# ----------------------------------------------------------------#
# ESSAI DE TRACRION A DEFORMATIONS IMPOSEES                    #
# ----------------------------------------------------------------#

HISTORY = DEFI_FONCTION(NOM_PARA="INST", VALE=(0.0, 0.0, 1.0, eps_e, 2.0, eps_t, 3.0, eps_c))


ZERO = DEFI_CONSTANTE(VALE=0.0)


evol = SIMU_POINT_MAT(
    SUPPORT="ELEMENT",
    MODELISATION="D_PLAN",
    COMPORTEMENT=_F(RELATION="ENDO_LOCA_TC", ITER_INTE_MAXI=20, RESI_INTE=1.0e-8),
    MATER=MATE,
    INCREMENT=_F(LIST_INST=DEFLIST1),
    NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_MAXI=1.0e-6, ITER_GLOB_MAXI=10),
    ARCHIVAGE=_F(LIST_INST=TEMPS1),
    EPSI_IMPOSE=_F(EPXX=HISTORY, EPYY=ZERO, EPZZ=ZERO, EPXY=ZERO, EPXZ=ZERO, EPYZ=ZERO),
)


# ----------------------------------------------------------------#
# TESTS PAR RAPPORT AUX RESULTAT ANALYTIQUE                      #
# ----------------------------------------------------------------#

from code_aster.Behaviours.endo_loca_tc import loi

vi_names = loi.get_nom_vari()
vi_num = dict()
vi_num.update(zip(vi_names, ["V" + repr(i) for i in range(1, len(vi_names) + 1)]))


tol = 1.0e-6

TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=2.721429467772542,
    VALE_REFE=sig_t,
    NOM_PARA="SIXX",
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=2.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.10000000000006483,
    VALE_REFE=b,
    NOM_PARA=vi_num["HISTTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=2.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.19167385922560198,
    VALE_REFE=1 - stf_t,
    NOM_PARA=vi_num["ENDOTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=2.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.00014945426341367903,
    VALE_REFE=wpos_t,
    NOM_PARA=vi_num["ENERTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=2.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


# ---------------------------------------------------------------------
# En compression
# ---------------------------------------------------------------------


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=-36.90674800974,
    VALE_REFE=sig_c,
    NOM_PARA="SIXX",
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=3.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.10000000000006483,
    VALE_REFE=b,
    NOM_PARA=vi_num["HISTTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=3.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.26919070676544277,
    VALE_REFE=1 - stf_c,
    NOM_PARA=vi_num["ENDOCOMP"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=3.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="ABSOLU",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol * wall_c,
    VALE_CALC=2.0134637013224932e-11,
    VALE_REFE=wpos_c,
    NOM_PARA=vi_num["ENERTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=3.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.03362720924794314,
    VALE_REFE=wneg_c,
    NOM_PARA=vi_num["ENERCOMP"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=3.0, CRITERE="RELATIF", PRECISION=1.0e-08),
)


FIN()
