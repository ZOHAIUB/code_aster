# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

#######################################################################
# cas test du superviseur                                             #
# Il valide aussi la recuperation en poursuite des parametres python  #
# de la premiere execution en plus des concepts ASTER standards       #
#######################################################################

test = CA.TestCase()

MA = LIRE_MAILLAGE(FORMAT="ASTER", INFO=2)

coord = MA.getCoordinates().getValues()
test.assertEqual(min(coord), 0.0, msg=str(coord))
test.assertEqual(max(coord), 0.1, msg=str(coord))

conn = MA.getConnectivity()
test.assertEqual(MA.getNumberOfCells(), 1)
test.assertSequenceEqual(conn[0], (0, 1), msg=str(conn))

nommai = MA.getGroupsOfCells()
test.assertSequenceEqual(nommai, ("RESSORT",), msg=str(nommai))

nomno = MA.getGroupsOfNodes()
test.assertSequenceEqual(nomno, ("NO1", "NO2"), msg=str(nomno))

UN = 1
DEUX = 2
TUP = (10.0, 11.0, 12.0, 13.0)

I02 = DEFI_LIST_ENTI(VALE=UN)
I03 = DEFI_LIST_ENTI(VALE=(5, 6, 7))

vale = I02.getValues()
test.assertSequenceEqual(vale, (1,), msg=str(vale))

FO3 = DEFI_FONCTION(NOM_PARA="X", NOM_RESU="Y", VALE=TUP)

# on teste la methode Valeurs de la SD fonction
# (on fait un traitement pour retrouver l'ordre du VALE)
lx, ly = FO3.Valeurs()
lv = []
for i in range(len(lx)):
    lv.append(lx[i])
    lv.append(ly[i])

# F04 est une fonction identique a F03
FO4 = DEFI_FONCTION(NOM_PARA="X", NOM_RESU="Y", VALE=lv)

TEST_FONCTION(
    VALEUR=(
        _F(VALE_CALC=11.0, VALE_PARA=10.0, FONCTION=FO4),
        _F(VALE_CALC=13.0, VALE_PARA=12.0, FONCTION=FO4),
    )
)

# on passe dans la programmation de la methode Parametres de la SD fonction
# on ne teste pas les valeurs retournees
dicpara = FO4.Parametres()
test.assertEqual(dicpara["PROL_DROITE"], "EXCLU", msg=str(dicpara))
test.assertEqual(dicpara["NOM_PARA"], "X", msg=str(dicpara))
test.assertSequenceEqual(dicpara["INTERPOL"], ["LIN", "LIN"], msg=str(dicpara))

# on v√©rifie que la variable x sera accessible en POURSUITE
x = 34.5

test.printSummary()

FIN()
