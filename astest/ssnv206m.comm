# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# ESSAI DE COMPRESSION TRIAXIALE
# PRESSION DE CONFINEMENT DE 5 MPA
# MODELE DE COMPORTEMENT : NLH_CSRM
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))

# >>>>
# Mesh
# <<<<

MAILLAGE = LIRE_MAILLAGE(FORMAT="ASTER")

MODELE = AFFE_MODELE(
    MAILLAGE=MAILLAGE, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="AXIS")
)

# >>>>>>>>>>
# Time steps
# <<<<<<<<<<

TEMPS1 = DEFI_LIST_REEL(
    DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=3600.0, NOMBRE=1), _F(JUSQU_A=7000.0, NOMBRE=1))
)

DEFLIST1 = DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=TEMPS1),
    ECHEC=_F(EVENEMENT="ERREUR", ACTION="DECOUPE", SUBD_METHODE="MANUEL", SUBD_NIVEAU=5),
)

# >>>>>>>>
# Material
# <<<<<<<<

young = 7.0e9
nu = 0.3
pci = 50.0e6
ci = 0.1e6
MCC = 0.5
Nd = 1.0
mB = 10.0
aB = 0.75
om = 15.0
tau = 2.0e2
nv = 2.0
Hp = young / 2.5
Hv = 0.01 * young
alphaT = 1.0e-5

SOL = DEFI_MATERIAU(
    ELAS=_F(E=young, NU=nu, ALPHA=alphaT),
    NLH_CSRM=_F(
        YoungModulus=young,
        PoissonRatio=nu,
        IsoCompElasLim=pci,
        IsoTensElasLim=ci,
        MCCSlopeCSL=MCC,
        NLHIndex=Nd,
        mBigoCritCoef=mB,
        aBigoCritCoef=aB,
        IncompIndex=om,
        Tau=tau,
        PerzynaExpo=nv,
        NLHModulusP=Hp,
        NLHModulusV=Hv,
    ),
)

CHMAT = AFFE_MATERIAU(MAILLAGE=MAILLAGE, AFFE=_F(TOUT="OUI", MATER=SOL))

# >>>>>>>>>>>>>>>>>>>
# Boundary conditions
# <<<<<<<<<<<<<<<<<<<

conf = 5.0e6

CHAR_U1 = AFFE_CHAR_MECA(MODELE=MODELE, PRES_REP=_F(GROUP_MA="M4", PRES=1.0))

CHAR_U2 = AFFE_CHAR_MECA(MODELE=MODELE, PRES_REP=_F(GROUP_MA="M3", PRES=1.0))

DEPL_1 = AFFE_CHAR_MECA(MODELE=MODELE, FACE_IMPO=_F(GROUP_MA="M2", DY=0.0))

COEF1 = DEFI_FONCTION(NOM_PARA="INST", PROL_DROITE="CONSTANT", VALE=(0.0, 0.0, 7000.0, conf))

# >>>>>>>>>>>>>>>>>>>>>>>
# Solution confining step
# <<<<<<<<<<<<<<<<<<<<<<<

U1 = STAT_NON_LINE(
    INFO=1,
    MODELE=MODELE,
    CHAM_MATER=CHMAT,
    EXCIT=(
        _F(CHARGE=CHAR_U1, FONC_MULT=COEF1),
        _F(CHARGE=CHAR_U2, FONC_MULT=COEF1),
        _F(CHARGE=DEPL_1),
    ),
    COMPORTEMENT=_F(RELATION="NLH_CSRM", RESI_INTE=1.0e-14, ITER_INTE_MAXI=100),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-8, ITER_GLOB_MAXI=50),
    INCREMENT=_F(LIST_INST=DEFLIST1),
)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>
# Compute the stress on nodes
# <<<<<<<<<<<<<<<<<<<<<<<<<<<

U1 = CALC_CHAMP(reuse=U1, CONTRAINTE="SIGM_ELNO", VARI_INTERNE="VARI_ELNO", RESULTAT=U1)

U1 = CALC_CHAMP(
    reuse=U1, RESULTAT=U1, TOUT_ORDRE="OUI", CONTRAINTE="SIGM_NOEU", VARI_INTERNE="VARI_NOEU"
)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Time steps for the second step
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

TEMPS2 = DEFI_LIST_REEL(DEBUT=7000.0, INTERVALLE=(_F(JUSQU_A=13000.00, NOMBRE=250),))

DEFLIST2 = DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=TEMPS2),
    ECHEC=_F(EVENEMENT="ERREUR", ACTION="DECOUPE", SUBD_METHODE="AUTO"),
)

ARCHI = DEFI_LIST_REEL(DEBUT=7000.0, INTERVALLE=(_F(JUSQU_A=13000.00, NOMBRE=10),))

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Boundary conditions for the second step
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

SIG_INI = CREA_CHAMP(
    OPERATION="EXTR", TYPE_CHAM="ELGA_SIEF_R", NOM_CHAM="SIEF_ELGA", RESULTAT=U1, INST=7000.0
)

VAR_INI = CREA_CHAMP(
    OPERATION="EXTR", TYPE_CHAM="ELGA_VARI_R", NOM_CHAM="VARI_ELGA", RESULTAT=U1, INST=7000.0
)

DEPL_2 = AFFE_CHAR_MECA(MODELE=MODELE, FACE_IMPO=_F(GROUP_MA="M4", DY=1.0))

dy_ini = -0.00028571428571428574
dy_end = dy_ini * 100.0

COEF2 = DEFI_FONCTION(
    NOM_PARA="INST",
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="CONSTANT",
    VALE=(7000.0, dy_ini, 13000.0, dy_end),
)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Solution for the second step
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<

U2 = STAT_NON_LINE(
    INFO=1,
    MODELE=MODELE,
    CHAM_MATER=CHMAT,
    EXCIT=(
        _F(CHARGE=CHAR_U2, FONC_MULT=COEF1),
        _F(CHARGE=DEPL_1),
        _F(CHARGE=DEPL_2, FONC_MULT=COEF2),
    ),
    COMPORTEMENT=_F(RELATION="NLH_CSRM", RESI_INTE=1.0e-14, ITER_INTE_MAXI=100),
    ETAT_INIT=_F(EVOL_NOLI=U1),
    INCREMENT=_F(LIST_INST=DEFLIST2),
    NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
    ARCHIVAGE=_F(LIST_INST=ARCHI),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-8, ITER_GLOB_MAXI=20),
)

U2 = CALC_CHAMP(reuse=U2, CONTRAINTE="SIGM_ELNO", VARI_INTERNE="VARI_ELNO", RESULTAT=U2)

U2 = CALC_CHAMP(
    reuse=U2, RESULTAT=U2, TOUT_ORDRE="OUI", CONTRAINTE="SIGM_NOEU", VARI_INTERNE="VARI_NOEU"
)

tab_depl = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="DEPL",
        GROUP_NO="N4",
        RESULTAT=U2,
        NOM_CHAM="DEPL",
        TOUT_CMP="OUI",
        LIST_INST=ARCHI,
        OPERATION="EXTRACTION",
    )
)

IMPR_TABLE(TABLE=tab_depl)

tab_sigm = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="SIGM_NOEU",
        GROUP_NO="N4",
        RESULTAT=U2,
        NOM_CHAM="SIGM_NOEU",
        TOUT_CMP="OUI",
        LIST_INST=ARCHI,
        OPERATION="EXTRACTION",
    )
)

IMPR_TABLE(TABLE=tab_sigm)

TEST_RESU(
    RESU=(
        _F(
            INST=7000.0, RESULTAT=U1, NOM_CHAM="DEPL", GROUP_NO="N4", NOM_CMP="DY", VALE_CALC=dy_ini
        ),
        _F(
            INST=1.3000e4,
            RESULTAT=U2,
            NOM_CHAM="DEPL",
            GROUP_NO="N4",
            NOM_CMP="DX",
            VALE_CALC=0.03126404395351442,
        ),
    )
)

TEST_RESU(
    RESU=(
        _F(
            INST=7000.0,
            RESULTAT=U1,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N4",
            NOM_CMP="SIYY",
            VALE_CALC=-conf,
        ),
        _F(
            INST=1.3000e4,
            RESULTAT=U2,
            NOM_CHAM="SIGM_NOEU",
            GROUP_NO="N4",
            NOM_CMP="SIYY",
            VALE_CALC=-25197120.854483284,
        ),
    )
)

FIN()
