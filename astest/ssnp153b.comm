# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------
from code_aster.CodeCommands.defi_fichier import DEFI_FICHIER
from code_aster.MacroCommands.defi_cont import DEFI_CONT

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"), ERREUR=_F(ERREUR_F="ABORT"))

MESH = LIRE_MAILLAGE(UNITE=20, FORMAT="MED")

MESH = MODI_MAILLAGE(
    reuse=MESH, MAILLAGE=MESH, ORIE_PEAU=(_F(GROUP_MA_PEAU="Master"), _F(GROUP_MA_PEAU="Slave"))
)

MESH = DEFI_GROUP(reuse=MESH, MAILLAGE=MESH, CREA_GROUP_NO=_F(TOUT_GROUP_MA="OUI"))

young = 68.96e8
Hard = DEFI_MATERIAU(ELAS=_F(E=young, NU=0.32), ECRO_LINE=_F(D_SIGM_EPSI=young / 10, SY=10.0e100))

Soft = DEFI_MATERIAU(
    ELAS=_F(E=young / 10, NU=0.32), ECRO_LINE=_F(D_SIGM_EPSI=young / 100, SY=10.0e100)
)
T1 = 1
T2 = 2

FONCx = DEFI_FONCTION(
    NOM_PARA="INST",
    VALE=(0.0, 0.0, T1, 0.0, T2, 10.0),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

FONCy = DEFI_FONCTION(
    NOM_PARA="INST",
    VALE=(0.0, 0.0, T1, 1.0, T2, 1.0),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

Npas1 = 2
Npas2 = 120
L_INST = DEFI_LIST_REEL(
    DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=T1, NOMBRE=Npas1), _F(JUSQU_A=T2, NOMBRE=Npas2))
)

L_ARCH = DEFI_LIST_REEL(
    DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=T1, NOMBRE=Npas1), _F(JUSQU_A=T2, NOMBRE=Npas2))
)

LINST = DEFI_LIST_INST(
    METHODE="MANUEL", DEFI_LIST=_F(LIST_INST=L_INST), ECHEC=_F(SUBD_PAS=4, SUBD_NIVEAU=4)
)

MO = AFFE_MODELE(MAILLAGE=MESH, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="D_PLAN"))

MAT = AFFE_MATERIAU(
    MAILLAGE=MESH, AFFE=(_F(GROUP_MA="Hard", MATER=Hard), _F(GROUP_MA="Soft", MATER=Soft))
)

CLx = AFFE_CHAR_CINE(
    MODELE=MO, MECA_IMPO=(_F(GROUP_MA="Bloq", DX=0.0), _F(GROUP_MA="Depl", DX=1.0))
)

CLy = AFFE_CHAR_CINE(
    MODELE=MO, MECA_IMPO=(_F(GROUP_MA="Bloq", DY=0.0), _F(GROUP_MA="Depl", DY=-1.0))
)

coef_coulomb = 0.3
coef = young / 100
contact_new = DEFI_CONT(
    MODELE=MO,
    ZONE=_F(
        GROUP_MA_MAIT="Master",
        GROUP_MA_ESCL="Slave",
        # TYPE_MATR_TANG="PERTURBATION",
        COEF_CONT=coef,
        FROTTEMENT="OUI",
        TYPE_FROT="COULOMB",
        COULOMB=coef_coulomb,
    ),
)

RESU = MECA_NON_LINE(
    MODELE=MO,
    CHAM_MATER=MAT,
    EXCIT=(_F(CHARGE=CLx, FONC_MULT=FONCx), _F(CHARGE=CLy, FONC_MULT=FONCy)),
    CONTACT=_F(DEFINITION=contact_new, ALGO_RESO_GEOM="NEWTON", RESI_GEOM=1e3),
    COMPORTEMENT=_F(RELATION="VMIS_ISOT_LINE", DEFORMATION="SIMO_MIEHE"),
    INCREMENT=_F(LIST_INST=LINST, INST_FIN=T1 + 0.2),
    NEWTON=_F(PREDICTION="TANGENTE", MATRICE="TANGENTE", REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-6, ITER_GLOB_MAXI=20),
    # CONVERGENCE=_F(RESI_GLOB_MAXI=1.0),
    ARCHIVAGE=_F(LIST_INST=L_ARCH),
)

RESU = CALC_CHAMP(reuse=RESU, RESULTAT=RESU, CRITERES=("SIEQ_ELGA"), CONTRAINTE=("SIGM_ELNO"))


RESU = CALC_CHAMP(
    reuse=RESU, RESULTAT=RESU, CONTRAINTE="SIGM_NOEU", FORCE=("FORC_NODA", "REAC_NODA")
)

IMPR_RESU(FORMAT="MED", UNITE=81, RESU=_F(RESULTAT=RESU))

IMPR_RESU(FORMAT="MED", UNITE=80, RESU=_F(RESULTAT=RESU, NOM_CHAM="DEPL", NOM_CMP=("DX", "DY")))

TAB_N = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="FORCE",
        GROUP_NO="Depl",
        RESULTAT=RESU,
        NOM_CHAM="REAC_NODA",
        RESULTANTE="DY",
        OPERATION="EXTRACTION",
    )
)

TAB_T = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="FORCE",
        GROUP_NO="Depl",
        RESULTAT=RESU,
        NOM_CHAM="REAC_NODA",
        RESULTANTE="DX",
        OPERATION="EXTRACTION",
    )
)

IMPR_TABLE(
    TABLE=TAB_N,
    FORMAT="XMGRACE",
    PILOTE="PNG",
    UNITE=29,
    NOM_PARA=("INST", "DY"),
    TITRE="RESULTANTE N",
)


IMPR_TABLE(
    TABLE=TAB_T,
    FORMAT="XMGRACE",
    PILOTE="PNG",
    UNITE=30,
    NOM_PARA=("INST", "DX"),
    TITRE="RESULTANTE T",
)

IMPR_TABLE(TABLE=TAB_N)
IMPR_TABLE(TABLE=TAB_T)

# Tests de la force normale
TEST_TABLE(
    VALE_CALC=-93863322.0188579, NOM_PARA="DY", TABLE=TAB_N, FILTRE=_F(NOM_PARA="INST", VALE=0.5)
)


TEST_TABLE(
    VALE_CALC=-330670402.75192857, NOM_PARA="DY", TABLE=TAB_N, FILTRE=_F(NOM_PARA="INST", VALE=1.0)
)

TEST_TABLE(
    VALE_CALC=-402762962.94010764, NOM_PARA="DY", TABLE=TAB_N, FILTRE=_F(NOM_PARA="INST", VALE=1.1)
)


TEST_TABLE(
    VALE_CALC=-416287037.19393307, NOM_PARA="DY", TABLE=TAB_N, FILTRE=_F(NOM_PARA="INST", VALE=1.2)
)

# Tests de la force tangentielle

TEST_TABLE(
    VALE_CALC=63646006.187741645, NOM_PARA="DX", TABLE=TAB_T, FILTRE=_F(NOM_PARA="INST", VALE=1.0)
)


TEST_TABLE(
    VALE_CALC=126992808.72138466, NOM_PARA="DX", TABLE=TAB_T, FILTRE=_F(NOM_PARA="INST", VALE=1.1)
)

TEST_TABLE(
    VALE_CALC=127586831.83378169, NOM_PARA="DX", TABLE=TAB_T, FILTRE=_F(NOM_PARA="INST", VALE=1.2)
)

FIN()
