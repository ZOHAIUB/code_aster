# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import json
import os.path as osp
import numpy as np

from code_aster.Commands import *
from code_aster.Utilities import ExecutionParameter

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), IMPR_MACRO="NON")

testname = "mac3c11a"

mac3c = osp.join(ExecutionParameter().get_option("rcdir"), "tests_data", "mac3c")
with open(osp.join(mac3c, "%s.json" % testname)) as f:
    testconfig = json.load(f)

conception = testconfig["conception"]
u20 = osp.join(mac3c, testconfig["unit20"])
u32 = osp.join(mac3c, testconfig["unit32"])
u38 = "%s.38" % testname

with open(osp.join(mac3c, "mac3c00a.38")) as fin, open(u38, "w") as fout:
    fout.write(fin.read() % conception)

DEFI_FICHIER(ACTION="ASSOCIER", UNITE=20, FICHIER=u20)
DEFI_FICHIER(ACTION="ASSOCIER", UNITE=32, FICHIER=u32)
DEFI_FICHIER(ACTION="ASSOCIER", UNITE=38, FICHIER=u38)

tabn = LIRE_TABLE(UNITE=38, FORMAT="LIBRE", SEPARATEUR="\t")

MA1 = LIRE_MAILLAGE(FORMAT="MED", UNITE=20, INFO=1)

MA1 = DEFI_GROUP(reuse=MA1, MAILLAGE=MA1, CREA_GROUP_NO=_F(GROUP_MA="CR_A_A"))

FLEXLOCK = CALC_MAC3COEUR(
    TYPE_COEUR="MONO_FROID",
    TABLE_N=tabn,
    MAILLAGE_N=MA1,
    DEFORMATION=_F(
        UNITE_THYC=32,
        NIVE_FLUENCE=0.0,
        TYPE_MAINTIEN="FORCE",
        FORCE_MAINTIEN=testconfig["compression"],
        MAINTIEN_GRILLE="OUI",
        ARCHIMEDE="NON",
    ),
)

POSTLOCK = POST_RELEVE_T(
    ACTION=_F(
        OPERATION="MOYENNE",
        INTITULE="DEPL",
        RESULTAT=FLEXLOCK,
        PRECISION=1e-08,
        NOM_CHAM="DEPL",
        NOM_CMP=("DY", "DZ"),
        GROUP_NO=("LISPG"),
    )
)

IMPR_TABLE(TABLE=POSTLOCK, UNITE=50)

FLEX = CALC_MAC3COEUR(
    TYPE_COEUR="MONO_FROID",
    TABLE_N=tabn,
    MAILLAGE_N=MA1,
    DEFORMATION=_F(
        UNITE_THYC=32,
        NIVE_FLUENCE=0.0,
        TYPE_MAINTIEN="FORCE",
        FORCE_MAINTIEN=testconfig["compression"],
        MAINTIEN_GRILLE="NON",
        ARCHIMEDE="NON",
    ),
)

FLEX = CALC_CHAMP(reuse=FLEX, RESULTAT=FLEX, PRECISION=1e-08, FORCE=("FORC_NODA"))

IMPR_RESU(FORMAT="RESULTAT", RESU=_F(RESULTAT=FLEX, NOM_CHAM="FORC_NODA", GROUP_NO="GRIL_6"))

POSTP = [None] * 10
efforts = []
ig = []

for i in range(10):

    POSTP[i] = POST_RELEVE_T(
        ACTION=_F(
            INTITULE="FORCE",
            GROUP_NO=("GRIL_%d" % (i + 1)),
            RESULTAT=FLEX,
            PRECISION=1e-08,
            NOM_CHAM="FORC_NODA",
            RESULTANTE=("DX", "DY", "DZ"),
            REPERE="GLOBAL",
            INST=0.005,
            OPERATION="EXTRACTION",
        )
    )
    tab = POSTP[i]
    efforts.append(tab["DY", 1])
    ig.append(i + 1)

print(efforts)


POSTC = POST_RELEVE_T(
    ACTION=_F(
        INTITULE="FORCE",
        GROUP_NO=("CR_A_A"),
        RESULTAT=FLEX,
        PRECISION=1e-08,
        NOM_CHAM="FORC_NODA",
        RESULTANTE=("DX", "DY", "DZ"),
        REPERE="GLOBAL",
        INST=0.005,
        OPERATION="EXTRACTION",
    )
)

IMPR_TABLE(TABLE=POSTC)

fgrille = CREA_TABLE(LISTE=(_F(LISTE_R=efforts, PARA="EFFORT"), _F(LISTE_I=ig, PARA="N_GRILLE")))


# Grilles bloquees, leur deplacement est nul
TEST_TABLE(
    CRITERE="ABSOLU",
    VALE_CALC=0.0,
    ORDRE_GRANDEUR=1.0e-6,
    NOM_PARA="DY",
    TABLE=POSTLOCK,
    TYPE_TEST="SOMM",
)

TEST_TABLE(
    CRITERE="ABSOLU",
    VALE_CALC=0.0,
    ORDRE_GRANDEUR=1.0e-6,
    NOM_PARA="DZ",
    TABLE=POSTLOCK,
    TYPE_TEST="SOMM",
)

# Grilles libres, on retrouve les efforts appliques via l'unite THYC
TEST_TABLE(
    CRITERE="RELATIF",
    VALE_CALC=1000.0,
    NOM_PARA="EFFORT",
    TABLE=fgrille,
    FILTRE=_F(NOM_PARA="N_GRILLE", VALE_I=6),
)

TEST_TABLE(CRITERE="RELATIF", VALE_CALC=1000.0, NOM_PARA="EFFORT", TABLE=fgrille, TYPE_TEST="SOMM")

TEST_TABLE(CRITERE="RELATIF", VALE_CALC=500.0, NOM_PARA="DY", TABLE=POSTC, TYPE_TEST="SOMM")

FIN()
