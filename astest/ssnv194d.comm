# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: david.haboussa at edf.fr
#
DEBUT(CODE="OUI", DEBUG=_F(SDVERI="NON"), IGNORE_ALARM=("COMPOR4_62",))

# SDVERI='NON' car la verification est trop couteuse en CPU

# IGNORE_ALARM='COMPOR4_62' car pour RUNGE_KUTTA, RESI_GLOB_RELA=1.E-4 suffit pour une bonne precision

TEMP = 50

format_courbe = "TABLEAU"

# coef=1.e3 # Pa, m
coef = 1.0  # MPa, mm

E = (236 - 0.0459 * TEMP) * 1000.0 * coef * coef  # Pa
Nu = 0.35
MU = E / 2.0 / (1.0 + Nu)

tau_f = 0.0  # Pa
tau_0 = 363.0 * coef * coef  # Pa
y_at = 2.0e-6 / coef  # m
N = 50.0
gamma0 = 1.0e-6  # s**-1
GH = 1.0e11  # s**-1
b = 2.48e-7 / coef  # m
DeltaG0 = 0.84  # eV
epsi_1 = 3.0e-4  # s**-1
D = 10.0e-6 / coef  # m
d_lat = 0.25 / coef
K_self = 100.0
k = 8.62e-5  # "Constante de Boltzmann, en eV/K"
K_self_sur_K_f = 3.0
denom = min(K_self_sur_K_f, 1.0 + (K_self_sur_K_f - 1.0) * TEMP / 300.0)
K_f = K_self / denom
l_c = 500.0 * b * (TEMP / 300.0) ** 2
a_coli = 0.7
a_ncol = 0.1
a_self = 0.1
rho_ini = 6.0e5 * coef * coef  # en m**-2

ACIERDD = DEFI_MATERIAU(
    ELAS=_F(E=E, NU=Nu, ALPHA=0.0),
    MONO_DD_CC=_F(
        B=b,
        GH=GH,
        DELTAG0=DeltaG0,
        TAU_0=tau_0,
        TAU_F=tau_f,
        GAMMA0=gamma0,
        N=N,
        RHO_MOB=rho_ini,
        D=D,
        D_LAT=d_lat,
        Y_AT=y_at,
        K_F=K_f,
        K_SELF=K_self,
        K_BOLTZ=k,
        H1=a_self,
        H2=a_coli,
        H3=a_ncol,
        H4=a_ncol,
        H5=a_ncol,
        H6=a_ncol,
        DEPDT=epsi_1,
    ),
)

# DD_CC
COMPORT = DEFI_COMPOR(
    MONOCRISTAL=_F(MATER=ACIERDD, ECOULEMENT="MONO_DD_CC", ELAS="ELAS", FAMI_SYST_GLIS="CUBIQUE1")
)

FIN()
