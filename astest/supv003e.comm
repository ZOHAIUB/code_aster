# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os

from code_aster.Commands import *
from code_aster import CA
from code_aster.CA import MPI
from code_aster.Supervis import FinalizeOptions

CA.init("--test")

rank = MPI.ASTER_COMM_WORLD.Get_rank()
size = MPI.ASTER_COMM_WORLD.Get_size()
print("Run on processor #%d/%d" % (rank, size))

# check for MPI_Bcast
NB = 5
iarray = [rank] * NB
if rank == 0:
    iarray = list(range(NB))
print("Processor #{}: array is {}".format(rank, iarray))

buffer = MPI.ASTER_COMM_WORLD.bcast(iarray, 0)
print("Broadcast returns:", buffer)

tab = CREA_TABLE(LISTE=_F(PARA="SUM", LISTE_I=sum(buffer)))

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC_I=NB * (NB - 1) / 2,
    VALE_REFE_I=NB * (NB - 1) / 2,
    NOM_PARA="SUM",
    TABLE=tab,
)

# check for MPI_Gather
cwd = os.getcwd()
paths = MPI.ASTER_COMM_WORLD.gather(cwd, 0)
if rank == 0:
    print("Collected paths:", paths)
    ok = True
    for i, dname in enumerate(paths):
        # this value is as_run dependant!
        ok = ok and dname.endswith("proc.%d" % i)
else:
    print("Here, it should be None:", paths)
    ok = paths is None

tbool = CREA_TABLE(LISTE=_F(PARA="BOOL", LISTE_I=int(ok)))
TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC_I=int(True),
    VALE_REFE_I=int(True),
    NOM_PARA="BOOL",
    TABLE=tbool,
)

CA.saveObjects(options=FinalizeOptions.SaveBase | FinalizeOptions.OnlyProc0)
CA.close()
