#!/usr/bin/env python
# coding: utf-8
# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# CAS_TEST__: SDLv126F
#
# BUT DE LA FAMILLE DE TEST
# Ce test unitaire permet de verifier la bone implémentation des
# routines de calcul des matrices de rigidité pour les matériaux
# élastique et viscoélastique 3D.
#
# BUT DE L'INDICE F
# test de retrocompatibilité avec AMOR_MECA sur 3D
# ### Import des packages et démarrage d'aster

# In[ ]:


import numpy as np


from code_aster.Commands import *
from code_aster import CA

CA.init("--test", ERREUR=_F(ALARME="EXCEPTION"))

test = CA.TestCase()


# ### Import du maillage

# In[ ]:


mail = CA.Mesh()
mail.readMedFile("sdlv126a.med")


# ### Declaration du modèle

# In[ ]:


model = AFFE_MODELE(
    AFFE=(_F(GROUP_MA=("3D"), PHENOMENE="MECANIQUE", MODELISATION="3D")), MAILLAGE=mail
)


# ### Déclaration des matériaux

# In[ ]:


# matériau viscoélastique: deltane350
freq = 100.0

G0 = 1400000.0
Ginf = 540000000.0
tauG = 5.2e-07
alphaG = 0.59

G = (G0 + Ginf * (1j * freq * 2 * np.pi) ** alphaG) / (1.0 + (1j * freq * 2 * np.pi) ** alphaG)
nu = 0.3
Ev = 2 * G * (1.0 + nu)

deltane = DEFI_MATERIAU(ELAS_VISCO=_F(G=G, NU=complex(nu, 0.0)))
deltane_hyst = DEFI_MATERIAU(ELAS=_F(E=Ev.real, NU=0.3, AMOR_HYST=Ev.imag / Ev.real))


# ### Affectation des matériaux

# In[ ]:


mater_vhyst = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=("3D"), MATER=deltane_hyst),), MODELE=model)

mater_v = AFFE_MATERIAU(AFFE=(_F(GROUP_MA=("3D"), MATER=deltane),), MODELE=model)


# ### Construction de la matrice par RIGI_MECA_HYST

# In[ ]:


nddl = NUME_DDL(MODELE=model)

# Matrice viscoélastique
KV_elem = CALC_MATR_ELEM(OPTION="RIGI_MECA", MODELE=model, CHAM_MATER=mater_v)
KVc_elem = CALC_MATR_ELEM(
    OPTION="RIGI_MECA_HYST", MODELE=model, CHAM_MATER=mater_v, RIGI_MECA=KV_elem
)
KV = ASSE_MATRICE(MATR_ELEM=KVc_elem, NUME_DDL=nddl)

# Matrice viscoélastique hysteretique
KVh_elem = CALC_MATR_ELEM(OPTION="RIGI_MECA", MODELE=model, CHAM_MATER=mater_vhyst)
KVhc_elem = CALC_MATR_ELEM(
    OPTION="RIGI_MECA_HYST", MODELE=model, CHAM_MATER=mater_vhyst, RIGI_MECA=KVh_elem
)
KVh = ASSE_MATRICE(MATR_ELEM=KVhc_elem, NUME_DDL=nddl)


# ### Test des matrices

# In[ ]:


kv = KV.toNumpy()
kvh = KVh.toNumpy()
np.savetxt("test.txt", np.real(kv - kvh))
TEST_FICHIER(
    FICHIER="test.txt", TYPE_TEST="SOMM_ABS", NB_VALE=576, VALE_CALC=1e-7, CRITERE="ABSOLU"
)
np.savetxt("test.txt", np.imag(kv - kvh))
TEST_FICHIER(
    FICHIER="test.txt",
    TYPE_TEST="SOMM_ABS",
    NB_VALE=576,
    VALE_CALC=1e-7,
    CRITERE="ABSOLU",
    TOLE_MACHINE=1e-5,
)


# In[ ]:


FIN()
