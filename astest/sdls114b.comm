# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# PAR RECOMBINAISON MODALE SUR UNE PLAQUE FISSUREE


DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION", ERREUR_F="ABORT"), DEBUG=_F(SDVERI="OUI"))

# DEFINITION DES PARAMETRES DU CALCUL
tau = 0.001
n_mode = 10
tfin = 0.005
pas = 5e-7
nbpas = 100

M = LIRE_MAILLAGE(FORMAT="MED")

MO = AFFE_MODELE(MAILLAGE=M, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="3D"))

M = MODI_MAILLAGE(reuse=M, MAILLAGE=M, ORIE_PEAU=(_F(GROUP_MA_PEAU="SR_INF"),))

MA = DEFI_MATERIAU(ELAS=_F(E=200.0e9, NU=0.3, ALPHA=0.0, RHO=7800))


CM = AFFE_MATERIAU(MAILLAGE=M, AFFE=_F(TOUT="OUI", MATER=MA))


BLOCAGE = AFFE_CHAR_MECA(MODELE=MO, DDL_IMPO=_F(GROUP_MA="SR_SUP", DX=0, DY=0, DZ=0))

CHAR = AFFE_CHAR_MECA(MODELE=MO, FORCE_FACE=_F(GROUP_MA="SR_INF", FX=-1.0e6, FY=-5e6, FZ=-0.4e6))

RAMPE = DEFI_FONCTION(
    NOM_PARA="INST",
    VALE=(0.0, 0.0, tau, 1.0, 0.2, 1.0),
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="LINEAIRE",
)

##################################
#  CONSTRUCTION DES MATRICES
##################################

MRIGI = CALC_MATR_ELEM(OPTION="RIGI_MECA", MODELE=MO, CHAM_MATER=CM, CHARGE=BLOCAGE)

MMASSE = CALC_MATR_ELEM(OPTION="MASS_MECA", MODELE=MO, CHAM_MATER=CM, CHARGE=BLOCAGE)

MAMOR = CALC_MATR_ELEM(
    OPTION="AMOR_MECA", MODELE=MO, RIGI_MECA=MRIGI, MASS_MECA=MMASSE, CHAM_MATER=CM, CHARGE=BLOCAGE
)

VCHA = CALC_VECT_ELEM(OPTION="CHAR_MECA", CHARGE=(BLOCAGE, CHAR))


NUM = NUME_DDL(MODELE=MO, CHARGE=BLOCAGE)

RIG_ASS = ASSE_MATRICE(MATR_ELEM=MRIGI, NUME_DDL=NUM)

MA_ASS = ASSE_MATRICE(MATR_ELEM=MMASSE, NUME_DDL=NUM)

AMO_ASS = ASSE_MATRICE(MATR_ELEM=MAMOR, NUME_DDL=NUM)


VE_ASS = ASSE_VECTEUR(VECT_ELEM=VCHA, NUME_DDL=NUM)


###################################
#  CALCUL DES MODES PROPRES ET DES K MODAUX
###################################

MODE = CALC_MODES(
    MATR_RIGI=RIG_ASS, MATR_MASS=MA_ASS, CALC_FREQ=_F(NMAX_FREQ=n_mode), CHAM_MATER=CM
)


MODE = NORM_MODE(reuse=MODE, MODE=MODE, NORME="MASS_GENE")


NFF1 = DEFI_FOND_FISS(
    MAILLAGE=M,
    SYME="NON",
    FOND_FISS=_F(GROUP_MA="FN_FS"),
    # GROUP_NO_ORIG='PFINI',),
    LEVRE_SUP=_F(GROUP_MA="LEV_SUP"),
    LEVRE_INF=_F(GROUP_MA="LEV_INF"),
)

LISTi = DEFI_LIST_ENTI(VALE=list(range(1, 16)))

GLMO1 = CALC_G(
    OPTION="K",
    RESULTAT=MODE,
    LIST_MODE=LISTi,
    THETA=_F(FISSURE=NFF1, R_INF=9.0e-5, R_SUP=3.0e-4, DISCRETISATION="LINEAIRE"),
)

IMPR_TABLE(TABLE=GLMO1, UNITE=6)


T1_K = POST_K1_K2_K3(FOND_FISS=NFF1, RESULTAT=MODE, ABSC_CURV_MAXI=2.0e-4, TOUT_ORDRE="OUI")

IMPR_TABLE(TABLE=T1_K)


# TEST DE NON REGRESSION SUR LES 5 PREMIERS MODES
Kg_ref = [
    4.7766941731643e09,
    7.2709228280643e09,
    5.8808817594795e10,
    -2.8886770832225e11,
    -8.1421171769903e10,
]
Ku_ref = [
    5.4279234187835e09,
    8.2759353853514e09,
    6.6890260623771e10,
    -2.5728548289868e11,
    -9.2723778647471e10,
]

for i in range(0, 5):
    imode = i + 1
    TEST_TABLE(
        TABLE=GLMO1,
        NOM_PARA="K1",
        FILTRE=(_F(NOM_PARA="NUME_MODE", VALE_I=imode), _F(NOM_PARA="NUM_PT", VALE_I=3)),
        VALE_CALC=Kg_ref[i],
    )

    TEST_TABLE(
        TABLE=T1_K,
        NOM_PARA="K1",
        FILTRE=(
            _F(NOM_PARA="ABSC_CURV", VALE=2.00000e-03),
            _F(NOM_PARA="NUME_ORDRE", VALE_I=imode),
        ),
        VALE_CALC=Ku_ref[i],
    )

##############################################
# CALCUL TRANSITOIRE EN COORDONNEES MODALES
##############################################

PROJ_BASE(
    BASE=MODE,
    STOCKAGE="DIAG",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MASS_GE"), MATR_ASSE=MA_ASS),
        _F(MATRICE=CO("RIGI_GE"), MATR_ASSE=RIG_ASS),
        _F(MATRICE=CO("AMOR_GE"), MATR_ASSE=AMO_ASS),
    ),
    VECT_ASSE_GENE=_F(VECTEUR=CO("CHA_ASS"), VECT_ASSE=VE_ASS, TYPE_VECT="FORC"),
)


RES_DYNA = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASS_GE,
    MATR_RIGI=RIGI_GE,
    MATR_AMOR=AMOR_GE,
    SCHEMA_TEMPS=_F(SCHEMA="DIFF_CENTRE"),
    INCREMENT=_F(INST_INIT=0.0, INST_FIN=tfin, VERI_PAS="OUI", PAS=pas),
    EXCIT=_F(VECT_ASSE_GENE=CHA_ASS, FONC_MULT=RAMPE),
    ARCHIVAGE=_F(PAS_ARCH=nbpas),
    IMPRESSION=_F(TOUT="OUI"),
)


KT2 = POST_K_TRANS(
    RESU_TRANS=RES_DYNA, NUME_ORDRE=2500, K_MODAL=_F(TABL_K_MODA=GLMO1, FOND_FISS=NFF1)
)

IMPR_TABLE(TABLE=KT2, TRI=_F(NOM_PARA=("ABSC_CURV", "INST"), ORDRE="CROISSANT"))

TEST_TABLE(
    VALE_CALC=2.0089573504309e06,
    NOM_PARA="K1",
    TABLE=KT2,
    FILTRE=(_F(NOM_PARA="INST", VALE=1.25e-3), _F(NOM_PARA="NUM_PT", VALE_I=3)),
)

FIN()
