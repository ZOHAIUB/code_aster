# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# ---------------------------------------------------------------------
#  Traction confinee pour la loi ENDO_LOCA_TC (3D) avec viscosité
# ---------------------------------------------------------------------

DEBUT(
    CODE="OUI",
    DEBUG=_F(SDVERI="OUI"),
    # IMPR_MACRO="OUI",
)

import math
import numpy as np


# Donnees d'entree
fc = 40.0
nu = 0.2
p = 1.5
Lf = 200.0


# Donnees estimees sur la base du fib model 2010 et estimation de la perte de linearite
young = (fc / 10) ** (1 / 3.0) * 21500.0
ft = 0.3 * (fc - 8) ** (2 / 3.0)
GF = 73e-3 * fc**0.18
sig0 = fc / 3.0


# Parametres internes du modele pour DEFI_MATERIAU
lbd = young * nu / (1 + nu) / (1 - 2 * nu)
dmu = young / (1 + nu)
ec = lbd + dmu
kappa = 2 * ec * GF / (Lf * ft**2)
eps_c = ft / ec


# Autres parametres internes pour la solution analytique
m0 = 1.5 * pi * (p + 2) ** (-1.5)
D1 = 0.75 * pi * (p + 1) ** 0.5
r = (2 * (D1 - 1) - m0) / (2 - m0)


# Valeurs cible et asymptotique pour l'endommagement en traction
b_cib = 0.1  # endommagement cible en traction
b_max = 0.2  # endommagement asymptotique (essai à déformation imposée)


# Parametres de regularisation numerique
tauv = 2.0


print("nu    = ", nu)
print("p     = ", p)
print("Lf    = ", Lf)
print("young = ", young)
print("ft    = ", ft)
print("GF    = ", GF)
print("lambda = ", lbd)
print("mu     = ", 0.5 * dmu)
print("ec     = ", ec)
print("kappa  = ", kappa)
print("m0     = ", m0)
print("D1     = ", D1)
print("r      = ", r)
print("tauv   = ", tauv)


# Solution analytique en traction


def H(b):
    """
    H**2 = Phi
    """
    return 1 - b + 0.5 * kappa * b * (m0 + (D1 - m0) * b ** (r - 1))


h_max = H(b_max)
eps_max = eps_c * h_max


# Durée pour atteindre l'endommagement cible
Npts = 1001  # nombre de points pour le calcul de l'intégrale
spl_b = np.linspace(0, b_cib, Npts)
spl_f = h_max**2 / (h_max**2 - H(spl_b) ** 2)
t_cib = np.trapz(y=spl_f, x=spl_b) * tauv


# raideurs cible et min
A_c = (1 - b_cib) / H(b_cib)
A_m = (1 - b_max) / H(b_max)


# ----------------------------------------------------------------#
# MATERIAU                                                       #
# ----------------------------------------------------------------#


MATE = DEFI_MATER_GC(
    ENDO_LOCA_TC=_F(
        CODIFICATION="FIB_MODEL_CODE",
        UNITE_CONTRAINTE="MPa",
        UNITE_LONGUEUR="mm",
        COEF_ECRO_TRAC=p,
        DIST_FISSURE=Lf,
        FC=fc,
        SIGM_COMP_SEUIL=fc / 3.0,
        TAU_REGU_VISC=tauv,
    )
)


TEMPS1 = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=t_cib, NOMBRE=100))

DEFLIST1 = DEFI_LIST_INST(
    DEFI_LIST=_F(LIST_INST=TEMPS1), ECHEC=_F(ACTION="DECOUPE", SUBD_PAS=4, SUBD_NIVEAU=2)
)


# ----------------------------------------------------------------#
# ESSAI DE TRACRION A DEFORMATIONS IMPOSEES                    #
# ----------------------------------------------------------------#

HISTORY = DEFI_CONSTANTE(VALE=eps_max)


ZERO = DEFI_CONSTANTE(VALE=0.0)


evol = SIMU_POINT_MAT(
    SUPPORT="ELEMENT",
    MODELISATION="3D",
    COMPORTEMENT=_F(RELATION="ENDO_LOCA_TC", ITER_INTE_MAXI=20, RESI_INTE=1.0e-8),
    MATER=MATE,
    INCREMENT=_F(LIST_INST=DEFLIST1),
    NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
    CONVERGENCE=_F(RESI_GLOB_MAXI=1.0e-6, ITER_GLOB_MAXI=10),
    EPSI_IMPOSE=_F(EPXX=HISTORY, EPYY=ZERO, EPZZ=ZERO, EPXY=ZERO, EPXZ=ZERO, EPYZ=ZERO),
)


# ----------------------------------------------------------------#
# TESTS PAR RAPPORT AUX RESULTAT ANALYTIQUE                      #
# ----------------------------------------------------------------#

from code_aster.Behaviours.endo_loca_tc import loi

vi_names = loi.get_nom_vari()
vi_num = dict()
vi_num.update(zip(vi_names, ["V" + repr(i) for i in range(1, len(vi_names) + 1)]))


tol = 1.0e-2


TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.09979140733546707,
    VALE_REFE=b_cib,
    NOM_PARA=vi_num["HISTTRAC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=t_cib, CRITERE="RELATIF", PRECISION=1.0e-08),
)

TEST_TABLE(
    TABLE=evol,
    CRITERE="RELATIF",
    REFERENCE="ANALYTIQUE",
    PRECISION=tol,
    VALE_CALC=0.6286922475853159,
    VALE_REFE=ec * eps_max * (A_c - A_m),
    NOM_PARA=vi_num["SIGMVISC"],
    FILTRE=_F(NOM_PARA="INST", CRIT_COMP="EQ", VALE=t_cib, CRITERE="RELATIF", PRECISION=1.0e-08),
)

FIN()
