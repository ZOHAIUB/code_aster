# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import json
import tempfile
import os.path as osp
from math import pi

from code_aster.Commands import *

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))

testname = "hplv108a"

with open("%s.json" % testname) as f:
    testresu = json.load(f)

MA = LIRE_MAILLAGE(UNITE=20, FORMAT="MED")

UN = DEFI_CONSTANTE(VALE=1.0)
POISSON = DEFI_CONSTANTE(VALE=0.3)
ZERO = DEFI_CONSTANTE(VALE=0.0)

MATEUNI = DEFI_MATERIAU(
    ELAS_FO=_F(E=UN, NU=POISSON, ALPHA=UN, RHO=UN, TEMP_DEF_ALPHA=20.0),
    THER_FO=_F(LAMBDA=UN, RHO_CP=UN),
)

side = 32.54
diam = 22.6
ratio = 1 - (pi / 4 * diam**2) / (side**2)

TAB_HOMO = CALC_MATE_HOMO(
    MAILLAGE=MA,
    AFFE=_F(GROUP_MA="plaque", MATER=MATEUNI),
    VARC=_F(NOM_VARC="TEMP", VALE=(20,)),
    TYPE_HOMO="MASSIF",
    CORR_MECA=CO("CORR_MECA"),
    CORR_THER=CO("CORR_THER"),
)

IMPR_CORR_HOMO(UNITE=80, CORR_MECA=CORR_MECA)

IMPR_CORR_HOMO(UNITE=80, CORR_THER=CORR_THER)

testrefe = {
    "A1111": 0.48437,
    "A1122": 0.12246,
    "A1133": 0.18205,
    "A1212": 0.16161,
    "A2222": 0.48437,
    "A2233": 0.18205,
    "A2323": 0.344589,
    "A3131": 0.344589,
    "A3333": 0.73037,
    "K11": 0.447967,
    "K22": 0.447967,
    "K33": 0.62115,
    "ALPHA_T": 1.0,
    "ALPHA_N": 1.0,
    "ALPHA_L": 1.0,
    "RHO_CP": 1.0 * ratio,
    "RHO": 1.0 * ratio,
}


def update_refe(para, value):
    upvalue = value
    if para in ("A3131", "A2323", "A1212"):
        upvalue = value / 2
    return upvalue


temp = "20.0"
for para, value in testrefe.items():
    vale_calc = testresu[temp][para]
    vale_refe = update_refe(para, value)
    TEST_TABLE(
        TABLE=TAB_HOMO,
        NOM_PARA=para,
        VALE_REFE=vale_refe,
        REFERENCE="SOURCE_EXTERNE",
        VALE_CALC=vale_calc,
        FILTRE=_F(NOM_PARA="TEMP", VALE=float(temp)),
    )

tab_values = {
    para: items
    for para, items in TAB_HOMO.EXTR_TABLE().values().items()
    if all(abs(i) > 1.0e-12 for i in items)
}

vale_calc = {
    temp: {para: item[i] for para, item in tab_values.items()}
    for i, temp in enumerate(tab_values["TEMP"])
}

tmpdir = tempfile.mkdtemp()
with open(osp.join(tmpdir, "%s.json" % testname), "w") as f:
    json.dump(vale_calc, f, indent=1, sort_keys=True)

MAT_HOMO = DEFI_MATERIAU(
    TABLE=_F(
        TABLE=TAB_HOMO,
        NOM_PARA="TEMP",
        COMPOR=("ELAS_ORTH_FO", "THER_NL_ORTH"),
        INTERPOL="LIN",
        PROL_GAUCHE="EXCLU",
        PROL_DROITE="EXCLU",
    )
)

FIN()
