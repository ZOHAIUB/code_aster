# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os

from code_aster.MacroCommands.defi_cont import DEFI_CONT
from code_aster.Commands import *
from code_aster import CA

# Restart with DEFI_CONT do not currently work.
# This variable allows to check restart during the development phase.
CHECK_RESTART = "CHECK_RESTART" in os.environ

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"), INFO=1)

Mail = LIRE_MAILLAGE(UNITE=20, FORMAT="MED")

Mail = MODI_MAILLAGE(
    reuse=Mail,
    MAILLAGE=Mail,
    ORIE_PEAU=_F(GROUP_MA_PEAU=("Group_2", "Group_1", "Group_3", "Group_4")),
)

MODI = AFFE_MODELE(MAILLAGE=Mail, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="D_PLAN"))

mat1 = DEFI_MATERIAU(ELAS=_F(E=2000, NU=0.3))

AFFE = AFFE_MATERIAU(MAILLAGE=Mail, MODELE=MODI, AFFE=_F(TOUT="OUI", MATER=mat1))

DEFICO = DEFI_CONT(
    MODELE=MODI,
    INFO=2,
    ZONE=_F(
        APPARIEMENT="MORTAR",
        GROUP_MA_MAIT="Group_2",
        GROUP_MA_ESCL="Group_1",
        ALGO_CONT="LAGRANGIEN",
        FROTTEMENT="OUI",
        COEF_CONT=2000.0,
        CONTACT_INIT="INTERPENETRE",
    ),
)

CHAR1 = AFFE_CHAR_CINE(
    MODELE=MODI, MECA_IMPO=(_F(GROUP_MA="Sym", DX=0), _F(GROUP_MA="Group_3", DY=0))
)
CHAR2 = AFFE_CHAR_MECA(MODELE=MODI, PRES_REP=_F(GROUP_MA="Group_4", PRES=25))

lisi = DEFI_LIST_REEL(DEBUT=0, INTERVALLE=_F(JUSQU_A=1, PAS=0.5))

LINST = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=lisi), ECHEC=_F(EVENEMENT="ERREUR", ACTION="DECOUPE"))

RAMPE = DEFI_FONCTION(NOM_PARA="INST", VALE=(0, 0, 1, 1))

# the same checks are done at restart
test = CA.TestCase()
zones = DEFICO.getContactZones()

test.assertEqual(len(zones), 1)
z0 = zones[0]

# check friction
test.assertTrue(DEFICO.hasFriction)

# check PairingParameter
pairing = z0.getPairingParameter()
test.assertEqual(pairing.getAlgorithm(), CA.PairingAlgo.Mortar)

# check ContactParameter
cp = z0.getContactParameter()
test.assertEqual(cp.getAlgorithm(), CA.ContactAlgo.Lagrangian)
test.assertAlmostEqual(cp.getCoefficient(), 2000.0)

# check MeshPairing
mesh_pairing = z0.getMeshPairing()
test.assertTrue(mesh_pairing.compute())
lp = mesh_pairing.getListOfPairs()
test.assertEqual(len(lp), 26)

FIN()
