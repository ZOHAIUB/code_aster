# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_VIBRA Schéma RK54
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE="OUI")

MAIL = LIRE_MAILLAGE(FORMAT="ASTER")
#
# Modèle
Modele = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(GROUP_MA=("MASSE", "GM0203"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),
        _F(GROUP_MA=("PT01"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),
    ),
)

U01 = 2.00
Sy = 200.0
Su = Sy + 250.0
Kp = 4.0 * Sy / U01
Puiss = 1.50
Masse = 200.0


def FctRp(p):
    return Sy + Kp * p / pow(1.0 + pow(Kp * p / (Su - Sy), Puiss), 1.0 / Puiss)


Lt_p = NU.arange(0.0, U01 * 20.0, 0.01)
Lt_rp = list(map(FctRp, Lt_p))
Lt_p += Sy / Kp
Lt_p = list(Lt_p)
Lt_p.insert(0, 0.0)
Lt_rp.insert(0, 0.0)

fctsy = DEFI_FONCTION(NOM_PARA="DX", ABSCISSE=Lt_p, ORDONNEE=Lt_rp)

# Caractéristiques : Ressorts / Masse
caraElem = AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F(REPERE="LOCAL", CARA="M_T_D_N", GROUP_MA="PT01", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_N", GROUP_MA="PT01", VALE=(Kp, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_N", GROUP_MA="MASSE", VALE=(Masse)),
        _F(REPERE="LOCAL", CARA="K_T_D_N", GROUP_MA="MASSE", VALE=(0.0, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_L", GROUP_MA="GM0203", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="GM0203", VALE=(Kp, 400.0, 400.0)),
    ),
)
#
# condition aux limites en déplacement
Blocage = AFFE_CHAR_MECA(
    MODELE=Modele,
    DDL_IMPO=(
        _F(GROUP_NO="N01", DX=0.0, DY=0.0, DZ=0.0),
        _F(GROUP_NO="N02", DY=0.0, DZ=0.0),
        _F(GROUP_NO="N03", DX=0.0, DY=0.0, DZ=0.0),
    ),
)
#
Frequence = 0.50
Pulsation = 2.0 * pi * Frequence
Amplitude = U01 * 3.0
#
Tsignal = 4.0 / Frequence
LinstF = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=4.0 * Tsignal, PAS=0.5 / Frequence / 80.0))
#
DEPL = FORMULE(
    VALE="Amplitude*sin(Pulsation*INST)/(Pulsation**2)",
    Amplitude=Amplitude,
    Pulsation=Pulsation,
    NOM_PARA="INST",
)

VITE = FORMULE(
    VALE="""Amplitude*cos(Pulsation*INST)/Pulsation""",
    Amplitude=Amplitude,
    Pulsation=Pulsation,
    NOM_PARA="INST",
)

ACCE = FORMULE(
    VALE="""-Amplitude*sin(Pulsation*INST)""",
    Amplitude=Amplitude,
    Pulsation=Pulsation,
    NOM_PARA="INST",
)
#
DEPLI = CALC_FONC_INTERP(
    NOM_RESU="DEPL",
    FONCTION=DEPL,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
)
#
VITEI = CALC_FONC_INTERP(
    NOM_RESU="VITE",
    FONCTION=VITE,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
)
ACCEI = CALC_FONC_INTERP(
    NOM_RESU="ACCE",
    FONCTION=ACCE,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
)
#
ASSEMBLAGE(
    MODELE=Modele,
    CARA_ELEM=caraElem,
    CHARGE=Blocage,
    NUME_DDL=CO("NumeDDL"),
    MATR_ASSE=(
        _F(MATRICE=CO("Rigidite"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("Masse"), OPTION="MASS_MECA"),
    ),
)
#
# Mode de la structure
ModeStr = CALC_MODES(
    MATR_RIGI=Rigidite, OPTION="BANDE", CALC_FREQ=_F(FREQ=(0.0, 3.0)), MATR_MASS=Masse
)
#
# calcul des modes statiques aux points d'ancrage et des chargements sismiques
ModeSta = MODE_STATIQUE(
    MATR_RIGI=Rigidite, MATR_MASS=Masse, MODE_STAT=_F(GROUP_NO=("GPT01", "GPT03"), AVEC_CMP="DX")
)
#
DeplSis1 = CALC_CHAR_SEISME(
    MATR_MASS=Masse, MODE_STAT=ModeSta, GROUP_NO="N01", DIRECTION=(1.0, 0.0, 0.0)
)
#
DeplSis3 = CALC_CHAR_SEISME(
    MATR_MASS=Masse, MODE_STAT=ModeSta, GROUP_NO="N03", DIRECTION=(1.0, 0.0, 0.0)
)

# projection des matrices et vecteurs sur la base modale
PROJ_BASE(
    BASE=ModeStr,
    STOCKAGE="DIAG",
    MATR_ASSE_GENE=(
        _F(MATRICE=CO("MasseGen"), MATR_ASSE=Masse),
        _F(MATRICE=CO("RigidGen"), MATR_ASSE=Rigidite),
    ),
    VECT_ASSE_GENE=(
        _F(VECTEUR=CO("Depl1Gen"), VECT_ASSE=DeplSis1, TYPE_VECT="FORC"),
        _F(VECTEUR=CO("Depl3Gen"), VECT_ASSE=DeplSis3, TYPE_VECT="FORC"),
    ),
)
#
# --------------------------------------------------------------------------------------------------
#
dt = 0.5 / Frequence / 4000.0
archivedInstants = (
    1.2750000000e00,
    2.5250000000e00,
    3.6250000000e00,
    4.5250000000e00,
    5.3750000000e00,
    6.4000000000e00,
    7.5250000000e00,
    8.5500000000e00,
    9.5000000000e00,
    1.0450000000e01,
    1.1450000000e01,
    1.2525000000e01,
    1.3525000000e01,
    1.4500000000e01,
    1.5475000000e01,
    1.6475000000e01,
    1.7500000000e01,
    1.8525000000e01,
    1.9500000000e01,
    2.0500000000e01,
    2.1475000000e01,
    2.2500000000e01,
    2.3525000000e01,
    2.4525000000e01,
    2.5500000000e01,
    2.7475000000e01,
    2.8500000000e01,
    2.9525000000e01,
    3.0500000000e01,
    3.1500000000e01,
)


unite = 38
Resultat = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MasseGen,
    MATR_RIGI=RigidGen,
    SCHEMA_TEMPS=_F(SCHEMA="RUNGE_KUTTA_54", PAS_MINI=dt, PAS_MAXI=dt),
    INCREMENT=_F(PAS=dt, INST_INIT=0.0, INST_FIN=4.0 * Tsignal),
    MODE_STAT=ModeSta,
    EXCIT=(
        _F(VECT_ASSE_GENE=Depl1Gen, ACCE=ACCEI, VITE=VITEI, DEPL=DEPLI),
        _F(VECT_ASSE_GENE=Depl3Gen, ACCE=ACCEI, VITE=VITEI, DEPL=DEPLI),
    ),
    COMPORTEMENT=_F(RELATION="DIS_ECRO_TRAC", GROUP_NO_1="N01", GROUP_NO_2="N02", FX=fctsy),
    ARCHIVAGE=_F(PAS_ARCH=10**8, INST=archivedInstants),
    IMPRESSION=_F(UNITE_DIS_ECRO_TRAC=unite),
)

# dans unite=38 : INST FORCE DEPLVISC DEPL PUISS
Forc = LIRE_FONCTION(
    UNITE=unite, NOM_PARA="INST", NOM_RESU="Forc", INDIC_PARA=[1, 1], INDIC_RESU=[1, 2]
)
Depl = LIRE_FONCTION(
    UNITE=unite, NOM_PARA="INST", NOM_RESU="Depl", INDIC_PARA=[1, 1], INDIC_RESU=[1, 3]
)
Puiss = LIRE_FONCTION(
    UNITE=unite, NOM_PARA="INST", NOM_RESU="Puiss", INDIC_PARA=[1, 1], INDIC_RESU=[1, 8]
)

# NUME_ORDRE
#       INST               Force              Ux                 Puiss
ResuIntgr = {
    1: (1.2750000000e00, 4.0518740236e02, 1.7698015276e00, 2.7734834978e02),
    2: (2.5250000000e00, -4.3582912726e02, -2.0648757759e00, 1.0140662250e03),
    3: (3.6250000000e00, 4.3921107599e02, 7.7218942654e-01, 1.2983031315e03),
    4: (4.5250000000e00, -9.1478381784e01, -5.5453421789e-01, 1.2983031315e03),
    5: (5.3750000000e00, 3.5606416545e02, 5.6432215021e-01, 1.2983031315e03),
    6: (6.4000000000e00, -4.3979316667e02, -1.5725469233e00, 1.3630098041e03),
    7: (7.5250000000e00, 4.4217637172e02, 1.4184536073e00, 1.7097266231e03),
    8: (8.5500000000e00, -4.4220270597e02, -8.0338570155e-01, 1.7145427812e03),
    9: (9.5000000000e00, 2.2749841532e02, 8.7086710166e-01, 1.7145427812e03),
    10: (1.0450000000e01, -4.0784744847e02, -7.1749755780e-01, 1.7145427812e03),
    11: (1.1450000000e01, 4.1834388837e02, 1.3479807843e00, 1.7145427812e03),
    12: (1.2525000000e01, -4.4303839862e02, -1.1860129583e00, 1.8829817237e03),
    13: (1.3525000000e01, 4.0984820595e02, 9.4620355313e-01, 1.8829817237e03),
    14: (1.4500000000e01, -3.2995693895e02, -9.0330930913e-01, 1.8829817237e03),
    15: (1.5475000000e01, 3.8963392034e02, 8.9566783909e-01, 1.8829817237e03),
    16: (1.6475000000e01, -4.2731664080e02, -1.1467085638e00, 1.8829817237e03),
    17: (1.7500000000e01, 4.4325707678e02, 1.1421263296e00, 1.9327919033e03),
    18: (1.8525000000e01, -4.2313655725e02, -1.0238577554e00, 1.9327919033e03),
    19: (1.9500000000e01, 3.6607681470e02, 9.4917567444e-01, 1.9327919033e03),
    20: (2.0500000000e01, -3.7880104186e02, -9.1301896697e-01, 1.9327919033e03),
    21: (2.1475000000e01, 4.0796445912e02, 1.0538947855e00, 1.9327919033e03),
    22: (2.2500000000e01, -4.4331880345e02, -1.1071432058e00, 1.9473449759e03),
    23: (2.3525000000e01, 4.3376974297e02, 1.0855781603e00, 1.9473449759e03),
    24: (2.4525000000e01, -3.9590140110e02, -9.8859969994e-01, 1.9473449759e03),
    25: (2.5500000000e01, 3.7186114905e02, 9.3080667545e-01, 1.9473449759e03),
    26: (2.7475000000e01, 4.3092147714e02, 1.0784574957e00, 1.9473449759e03),
    27: (2.8500000000e01, -4.4332400707e02, -1.1099092344e00, 1.9485654485e03),
    28: (2.9525000000e01, 4.1637863975e02, 1.0393473826e00, 1.9485654485e03),
    29: (3.0500000000e01, -3.7902427448e02, -9.4915990295e-01, 1.9485654485e03),
    30: (3.1500000000e01, 3.7763177185e02, 9.4248021287e-01, 1.9485654485e03),
}

ResuCalc = {
    1: (1.2750000000e00, 4.0488913151e02, 1.7698015185e00, 2.7761584657e02),
    2: (2.5250000000e00, -4.3561384847e02, -2.0647488879e00, 1.0148609295e03),
    3: (3.6250000000e00, 4.3922358796e02, 7.7296791458e-01, 1.2996130460e03),
    4: (4.5250000000e00, -9.2191379991e01, -5.5542392865e-01, 1.2996769868e03),
    5: (5.3750000000e00, 3.5611548451e02, 5.6534323261e-01, 1.2996769868e03),
    6: (6.4000000000e00, -4.3980527510e02, -1.5716822132e00, 1.3643845599e03),
    7: (7.5250000000e00, 4.4218288121e02, 1.4182590182e00, 1.7108836949e03),
    8: (8.5500000000e00, -4.4221384804e02, -8.0447108474e-01, 1.7165452753e03),
    9: (9.5000000000e00, 2.2850594731e02, 8.7186811306e-01, 1.7167488224e03),
    10: (1.0450000000e01, -4.0808988908e02, -7.1962147791e-01, 1.7167488224e03),
    11: (1.1450000000e01, 4.1860406623e02, 1.3471134104e00, 1.7167488224e03),
    12: (1.2525000000e01, -4.4296916162e02, -1.1859087056e00, 1.8845500254e03),
    13: (1.3525000000e01, 4.1017472669e02, 9.4695101522e-01, 1.8845500254e03),
    14: (1.4500000000e01, -3.3052654492e02, -9.0480216380e-01, 1.8845500254e03),
    15: (1.5475000000e01, 3.9001303409e02, 8.9654678371e-01, 1.8845500254e03),
    16: (1.6475000000e01, -4.2726758634e02, -1.1466547674e00, 1.8845500254e03),
    17: (1.7500000000e01, 4.4326342211e02, 1.1417965112e00, 1.9342382838e03),
    18: (1.8525000000e01, -4.2334649413e02, -1.0245824415e00, 1.9343029284e03),
    19: (1.9500000000e01, 3.6671819976e02, 9.5057929325e-01, 1.9343029284e03),
    20: (2.0500000000e01, -3.7923485056e02, -9.1430333255e-01, 1.9343029284e03),
    21: (2.1475000000e01, 4.0802897048e02, 1.0538562200e00, 1.9343029284e03),
    22: (2.2500000000e01, -4.4325186355e02, -1.1068051610e00, 1.9486919475e03),
    23: (2.3525000000e01, 4.3388530777e02, 1.0860377673e00, 1.9486919475e03),
    24: (2.4525000000e01, -3.9645857730e02, -9.8982194537e-01, 1.9486919475e03),
    25: (2.5500000000e01, 3.7236788201e02, 9.3224420290e-01, 1.9486919475e03),
    26: (2.7475000000e01, 4.3073605410e02, 1.0781646331e00, 1.9486919475e03),
    27: (2.8500000000e01, -4.4332991350e02, -1.1098333431e00, 1.9499479191e03),
    28: (2.9525000000e01, 4.1679364010e02, 1.0404006700e00, 1.9499811116e03),
    29: (3.0500000000e01, -3.7970419864e02, -9.5084392682e-01, 1.9499811116e03),
    30: (3.1500000000e01, 3.7800091336e02, 9.4341885317e-01, 1.9499811116e03),
}

for nume_ordre in list(ResuIntgr.keys()):
    TEST_FONCTION(
        VALEUR=(
            _F(
                FONCTION=Forc,
                NOM_PARA="INST",
                VALE_PARA=ResuIntgr[nume_ordre][0],
                VALE_CALC=ResuCalc[nume_ordre][1],
                REFERENCE="AUTRE_ASTER",
                VALE_REFE=ResuIntgr[nume_ordre][1],
                PRECISION=1.0e-02,
            ),
            _F(
                FONCTION=Depl,
                NOM_PARA="INST",
                VALE_PARA=ResuIntgr[nume_ordre][0],
                VALE_CALC=ResuCalc[nume_ordre][2],
                REFERENCE="AUTRE_ASTER",
                VALE_REFE=ResuIntgr[nume_ordre][2],
                PRECISION=1.0e-02,
            ),
            _F(
                FONCTION=Puiss,
                NOM_PARA="INST",
                VALE_PARA=ResuIntgr[nume_ordre][0],
                VALE_CALC=ResuCalc[nume_ordre][3],
                REFERENCE="AUTRE_ASTER",
                VALE_REFE=ResuIntgr[nume_ordre][3],
                PRECISION=1.0e-02,
            ),
        )
    )


FIN()
