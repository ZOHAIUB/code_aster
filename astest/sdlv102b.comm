# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA
import numpy as np
from code_aster.Applications.dynamic_substructuring import (
    SubStructure,
    Structure,
    Interface,
    macPlot,
)
from code_aster.Utilities import SharedTmpdir
import os.path as osp

test = CA.TestCase()

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

# ------------------------------------------------------#
# --                                                  --#
# -- DEFINITION D'UN PREMIER CALCUL SUR MODELE REDUIT --#
# --     ET ASSSEMBLAGE DU MODELE EF DE REFERENCE     --#
# --                                                  --#
# ------------------------------------------------------#

# -- MAILLAGES DES DEUX BOUTS DE TUYAU
MAILLA1 = LIRE_MAILLAGE(FORMAT="MED", UNITE=20)
MAILLA1 = MODI_MAILLAGE(
    reuse=MAILLA1,
    MAILLAGE=MAILLA1,
    ORIE_NORM_COQUE=_F(GROUP_MA=("IFS_2D",), GROUP_NO=("nNormDZ",), VECT_NORM=(0.0, 0.0, 1.0)),
)
MAILLA1 = DEFI_GROUP(reuse=MAILLA1, MAILLAGE=MAILLA1, CREA_GROUP_NO=_F(TOUT_GROUP_MA="OUI"))


MAILLA2 = LIRE_MAILLAGE(FORMAT="MED", UNITE=21)
MAILLA2 = MODI_MAILLAGE(
    reuse=MAILLA2,
    MAILLAGE=MAILLA2,
    ORIE_NORM_COQUE=_F(GROUP_MA=("IFS_2D",), GROUP_NO=("nNormDZ",), VECT_NORM=(0.0, 0.0, 1.0)),
)
MAILLA2 = DEFI_GROUP(reuse=MAILLA2, MAILLAGE=MAILLA2, CREA_GROUP_NO=_F(TOUT_GROUP_MA="OUI"))


# -- CONSTRUCTION DES MODELES
MODELE1 = AFFE_MODELE(
    AFFE=(
        _F(GROUP_MA=("s1Tuyau", "Tuyau"), MODELISATION="3D", PHENOMENE="MECANIQUE"),
        _F(
            FORMULATION="U_P",
            GROUP_MA=("s1Eau", "Eau"),
            MODELISATION="3D_FLUIDE",
            PHENOMENE="MECANIQUE",
        ),
        _F(
            FORMULATION="U_P", GROUP_MA=("IFS_2D",), MODELISATION="FLUI_STRU", PHENOMENE="MECANIQUE"
        ),
    ),
    MAILLAGE=MAILLA1,
)


MODELE2 = AFFE_MODELE(
    AFFE=(
        _F(GROUP_MA=("s2Tuyau", "Tuyau"), MODELISATION="3D", PHENOMENE="MECANIQUE"),
        _F(
            FORMULATION="U_P",
            GROUP_MA=("s2Eau", "Eau"),
            MODELISATION="3D_FLUIDE",
            PHENOMENE="MECANIQUE",
        ),
        _F(
            FORMULATION="U_P", GROUP_MA=("IFS_2D",), MODELISATION="FLUI_STRU", PHENOMENE="MECANIQUE"
        ),
    ),
    MAILLAGE=MAILLA2,
)

# -- DEFINITION DU MATERIAU
scaling = 1.0e10
acier = DEFI_MATERIAU(ELAS=_F(E=190.0e9 / scaling, NU=0.3, RHO=7800.0 / scaling))

eau = DEFI_MATERIAU(FLUIDE=_F(CELE_R=970.0, RHO=732.0 / scaling))

# -- AFFECTATION DES MATERIAUX
CHAMAT1 = AFFE_MATERIAU(
    AFFE=(_F(GROUP_MA=("Tuyau"), MATER=(acier,)), _F(GROUP_MA=("IFS_2D", "Eau"), MATER=(eau,))),
    MODELE=MODELE1,
)

CHAMAT2 = AFFE_MATERIAU(
    AFFE=(_F(GROUP_MA=("Tuyau"), MATER=(acier,)), _F(GROUP_MA=("IFS_2D", "Eau"), MATER=(eau,))),
    MODELE=MODELE2,
)


# -- DEFINITION DES CONDITIONS AUX LIMITES
CHARGE_1 = AFFE_CHAR_MECA(
    FACE_IMPO=(
        _F(DX=0.0, DY=0.0, DZ=0.0, GROUP_MA=("s1Tuyau",)),
        _F(GROUP_MA=("s1Eau",), PRES=0.0),
        _F(DX=0.0, DY=0.0, DZ=0.0, PRES=0.0, GROUP_MA=("Interface",)),
    ),
    MODELE=MODELE1,
)

CHARGE_2 = AFFE_CHAR_MECA(
    FACE_IMPO=(
        _F(DX=0.0, DY=0.0, DZ=0.0, GROUP_MA=("s2Tuyau",)),
        _F(GROUP_MA=("s2Eau",), PRES=0.0),
        _F(DX=0.0, DY=0.0, DZ=0.0, PRES=0.0, GROUP_MA=("Interface",)),
    ),
    MODELE=MODELE2,
)


# -- ASSEMBLAGE DES MATRICES
ASSEMBLAGE(
    MODELE=MODELE1,
    NUME_DDL=CO("NUME1"),
    CHARGE=CHARGE_1,
    CHAM_MATER=CHAMAT1,
    MATR_ASSE=(
        _F(MATRICE=CO("RAID1"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MASS1"), OPTION="MASS_MECA"),
    ),
)

ASSEMBLAGE(
    MODELE=MODELE2,
    NUME_DDL=CO("NUME2"),
    CHARGE=CHARGE_2,
    CHAM_MATER=CHAMAT2,
    MATR_ASSE=(
        _F(MATRICE=CO("RAID2"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MASS2"), OPTION="MASS_MECA"),
    ),
)

# -- CALCULS DES MODES AVEC LES C.L. ASSOCIEES AUX TYPES D'INTERFACE


def printToMedFile(resu, filename: str):
    DEFI_FICHIER(ACCES="NEW", ACTION="ASSOCIER", FICHIER=filename, TYPE="BINARY", UNITE=99)
    IMPR_RESU(FORMAT="MED", UNITE=99, RESU=_F(RESULTAT=resu, NOM_CHAM="DEPL", PARTIE="REEL"))
    DEFI_FICHIER(ACTION="LIBERER", UNITE=99)


nModes1 = 20

MODES_1 = CALC_MODES(
    OPTION="CENTRE",
    CALC_FREQ=_F(NMAX_FREQ=nModes1, FREQ=3.0),
    MATR_RIGI=RAID1,
    MATR_MASS=MASS1,
    TYPE_RESU="DYNAMIQUE",
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
    VERI_MODE=_F(STOP_ERREUR="NON"),
)


with SharedTmpdir("sdlv102b") as tmpdir:
    printToMedFile(MODES_1, osp.join(tmpdir.path, "modes1.resu.med"))

nModes2 = nModes1

MODES_2 = CALC_MODES(
    OPTION="CENTRE",
    CALC_FREQ=_F(NMAX_FREQ=nModes2, FREQ=3.0),
    MATR_RIGI=RAID2,
    MATR_MASS=MASS2,
    TYPE_RESU="DYNAMIQUE",
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
    VERI_MODE=_F(STOP_ERREUR="NON"),
)

with SharedTmpdir("sdlv102b") as tmpdir:
    printToMedFile(MODES_2, osp.join(tmpdir.path, "modes2.resu.med"))

# --  DEFINITION DES INTERFACES


# #-- import maillage et divers
subS1 = SubStructure(RAID1, MASS1, MODES_1)
subS2 = SubStructure(RAID2, MASS2, MODES_2)

interface = Interface(subS1, subS2, "Interface")
interface.computeInterfaceDofs("IFS")

ResuS_Tuyau1 = subS1.computeInterfaceModes()
ResuS_Tuyau2 = subS2.computeInterfaceModes()

with SharedTmpdir("sdlv102b") as tmpdir:
    ResuS_Tuyau1.printMedFile(osp.join(tmpdir.path, "interface1.resu.med"))
    ResuS_Tuyau2.printMedFile(osp.join(tmpdir.path, "interface2.resu.med"))


myStructure = Structure([subS1, subS2], [interface])

nmodes = 6
omega, resuSub = myStructure.computeGlobalModes(nmodes=nmodes)

with SharedTmpdir("sdlv102b") as tmpdir:
    for isub, resu in enumerate(resuSub):
        resu.printMedFile(osp.join(tmpdir.path, f"resu{isub}.resu.med"))

print("**** Eigen Pulses ****")
print(omega)

ref = [13.20488867, 28.29162118, 37.16467596, 55.20705775, 68.77735238, 69.5050201]

for idx, val in enumerate(omega):
    test.assertAlmostEqual(val, ref[idx], delta=1.0e-2)


# =======================================
#  Global modes
# =======================================


MAILLAG = LIRE_MAILLAGE(FORMAT="MED", UNITE=22)
MAILLAG = MODI_MAILLAGE(
    reuse=MAILLAG,
    MAILLAGE=MAILLAG,
    ORIE_NORM_COQUE=_F(GROUP_MA=("IFS_2D",), GROUP_NO=("nNormDZ",), VECT_NORM=(0.0, 0.0, 1.0)),
)

MODELEG = AFFE_MODELE(
    AFFE=(
        _F(GROUP_MA=("s1Tuyau", "Tuyau"), MODELISATION="3D", PHENOMENE="MECANIQUE"),
        _F(
            FORMULATION="U_P",
            GROUP_MA=("s1Eau", "Eau"),
            MODELISATION="3D_FLUIDE",
            PHENOMENE="MECANIQUE",
        ),
        _F(
            FORMULATION="U_P", GROUP_MA=("IFS_2D",), MODELISATION="FLUI_STRU", PHENOMENE="MECANIQUE"
        ),
    ),
    MAILLAGE=MAILLAG,
)


CHAMATG = AFFE_MATERIAU(
    AFFE=(_F(GROUP_MA=("Tuyau"), MATER=(acier,)), _F(GROUP_MA=("IFS_2D", "Eau"), MATER=(eau,))),
    MODELE=MODELEG,
)

CL = AFFE_CHAR_MECA(
    FACE_IMPO=(
        _F(DX=0.0, DY=0.0, DZ=0.0, GROUP_MA=("s1Tuyau", "s2Tuyau")),
        _F(GROUP_MA=("s1Eau", "s2Eau"), PRES=0.0),
    ),
    MODELE=MODELEG,
)

ASSEMBLAGE(
    CHAM_MATER=CHAMATG,
    CHARGE=CL,
    MATR_ASSE=(
        _F(MATRICE=CO("MASS_G"), OPTION="MASS_MECA"),
        _F(MATRICE=CO("RAID_G"), MODE_FOURIER=0, OPTION="RIGI_MECA"),
    ),
    MODELE=MODELEG,
    NUME_DDL=CO("NDDL"),
)

nModesG = 6
MODES_G = CALC_MODES(
    CALC_FREQ=_F(FREQ=3.0, NMAX_FREQ=nModesG),
    MATR_MASS=MASS_G,
    MATR_RIGI=RAID_G,
    OPTION="CENTRE",
    TYPE_RESU="DYNAMIQUE",
    SOLVEUR=_F(METHODE="MUMPS", NPREC=11),
    VERI_MODE=_F(STOP_ERREUR="NON"),
)


# =======================================
#  MAC computation
# =======================================

# Project Global result on substructure 1
Proj_Gto1 = PROJ_CHAMP(
    MODELE_1=MODELEG,
    MODELE_2=MODELE1,
    RESULTAT=MODES_G,
    NOM_CHAM="DEPL",
    TOUT_ORDRE="OUI",
    PROJECTION="OUI",
    DISTANCE_MAX=0.1,
    NUME_DDL=NUME1,
    VIS_A_VIS=(
        _F(GROUP_MA_1="Tuyau", GROUP_MA_2="Tuyau"),
        _F(GROUP_MA_1="Eau", GROUP_MA_2="Eau"),
        _F(GROUP_MA_1="IFS_2D", GROUP_MA_2="IFS_2D"),
    ),
)

# Project Global result on substructure 2
Proj_Gto2 = PROJ_CHAMP(
    MODELE_1=MODELEG,
    MODELE_2=MODELE2,
    RESULTAT=MODES_G,
    NOM_CHAM="DEPL",
    TOUT_ORDRE="OUI",
    PROJECTION="OUI",
    DISTANCE_MAX=0.1,
    NUME_DDL=NUME2,
    VIS_A_VIS=(
        _F(GROUP_MA_1="Tuyau", GROUP_MA_2="Tuyau"),
        _F(GROUP_MA_1="Eau", GROUP_MA_2="Eau"),
        _F(GROUP_MA_1="IFS_2D", GROUP_MA_2="IFS_2D"),
    ),
)

# ------------------------------------------------------------------------------

mac = macPlot(
    resuSub,
    [Proj_Gto1, Proj_Gto2],
    [MASS1, MASS2],
    fluid_material=eau,
    name1="Approche Sous-structuree",
    name2="Approche Globale",
    normalize=True,
    dof=["DX", "DY", "DZ", "PRES"],
)

mac_ref = np.array(
    [
        [
            1.00000000e00,
            3.54309575e-08,
            5.12860849e-12,
            4.01344372e-13,
            3.23938051e-13,
            1.43626954e-10,
        ],
        [
            2.88642381e-10,
            1.00000000e00,
            5.69581392e-14,
            1.92112238e-11,
            1.30543173e-11,
            1.88604716e-06,
        ],
        [
            6.35831912e-13,
            8.49466186e-14,
            1.00000000e00,
            3.81864478e-13,
            2.37297188e-13,
            5.13751168e-12,
        ],
        [
            7.98852579e-10,
            2.81751970e-10,
            2.42519833e-12,
            1.00000000e00,
            1.12767681e-04,
            1.67646811e-09,
        ],
        [
            6.17497592e-10,
            8.41127142e-11,
            1.38565927e-13,
            1.16194022e-06,
            1.00000000e00,
            3.70376913e-06,
        ],
        [
            9.01008623e-12,
            1.00335522e-06,
            1.12993941e-16,
            2.74407076e-11,
            2.18654144e-08,
            1.00000000e00,
        ],
    ]
)
for (idx, jdx), val in np.ndenumerate(mac):
    test.assertAlmostEqual(val, mac_ref[idx, jdx], delta=1.0e-2)

# ------------------------------------------------------------------------------

mac = macPlot(
    resuSub,
    [Proj_Gto1, Proj_Gto2],
    [MASS1, MASS2],
    name1="Approche Sous-structuree",
    list1=range(1, 4),
)

mac_ref = np.array(
    [
        [1.00000000e00, 3.85456575e-08, 2.54611054e-12],
        [3.16437206e-12, 1.00000000e00, 2.92547841e-14],
        [2.56023829e-14, 2.48604950e-14, 1.00000000e00],
        [3.95293465e-13, 1.27893010e-12, 1.22663066e-15],
        [1.25537894e-13, 1.51684359e-12, 6.41989958e-15],
        [1.42589321e-15, 1.39562192e-04, 1.11488999e-13],
    ]
)

for (idx, jdx), val in np.ndenumerate(mac):
    test.assertAlmostEqual(val, mac_ref[idx, jdx], delta=1.0e-2)

test.assertTrue(True)


FIN()
