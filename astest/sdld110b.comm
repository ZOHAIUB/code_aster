# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#       ON MODELISE UNE BARRE AVEC 1 ELEMENTS DISCRET 2D
#       A 2 NOEUDS
#       ON EXERCE UNE FORCE SINUSOIDALE A UNE EXTREMITE
#       LE PROBLEME EST SUR BASE MODALE
###################################################################
#                     ATTENTION
#                    ***********
# CE TEST SERT À DE LA VERIFICATION! IL N'ILLUSTRE PAS LE BON
# USAGE DE LA MODÉLISATION SUR BASE MODALE
###################################################################
import numpy as np
from code_aster.Applications.dynamic_substructuring import import_array

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

tmax = 9
npas = 90 * 4

SIN = FORMULE(VALE="sin(2*INST)", NOM_PARA="INST", tmax=tmax, npas=npas)

L_INST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=tmax, NOMBRE=npas),))

# On définit ici les matrices et le vecteur nécessaires pour le test en important des
# matrices et un vecteur au format numpy

# Matrice de rigidité
RIGIDGEN = import_array(
    np.array(
        [
            [1.0000001e07, 0.0, -1.0, 0.0],
            [0.0, 1.0000001e07, 0.0, -1.0],
            [-1.0, 0.0, 1.0, 0.0],
            [0.0, -1.0, 0.0, 1.0],
        ]
    )
)

# Matrice de masse
MASSEGEN = import_array(np.diag(np.ones(4)), reference_matrix=RIGIDGEN)

# Vecteur second membre (force appliquée)
VECT_X = import_array(-np.array([-10000000.0, 0.0, 0.0, 0.0]), reference_matrix=RIGIDGEN)

GENE = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    MATR_MASS=MASSEGEN,
    MATR_RIGI=RIGIDGEN,
    INCREMENT=_F(LIST_INST=L_INST),
    SCHEMA_TEMPS=_F(SCHEMA="TRBDF2"),
    EXCIT=(_F(VECT_ASSE_GENE=VECT_X, FONC_MULT=SIN),),
)

d3 = []
for inst in L_INST.getValues():
    recu_gene = RECU_GENE(RESU_GENE=GENE, INST=inst, NOM_CHAM="DEPL")
    d3.append(recu_gene.getValues()[2])

DP3 = DEFI_FONCTION(
    NOM_PARA="INST", NOM_RESU="DEPL", VALE=np.ravel(list(zip(L_INST.getValues(), d3)))
)


v3 = []
for inst in L_INST.getValues():
    recu_gene = RECU_GENE(RESU_GENE=GENE, INST=inst, NOM_CHAM="VITE")
    v3.append(recu_gene.getValues()[2])

VP3 = DEFI_FONCTION(
    NOM_PARA="INST", NOM_RESU="DEPL", VALE=np.ravel(list(zip(L_INST.getValues(), v3)))
)

a3 = []
for inst in L_INST.getValues():
    recu_gene = RECU_GENE(RESU_GENE=GENE, INST=inst, NOM_CHAM="ACCE")
    a3.append(recu_gene.getValues()[2])

AP3 = DEFI_FONCTION(
    NOM_PARA="INST", NOM_RESU="DEPL", VALE=np.ravel(list(zip(L_INST.getValues(), a3)))
)


foncDX = FORMULE(VALE="1./3 *(2 * sin(INST) - sin(2*INST))", NOM_PARA="INST")
REFDX = CALC_FONC_INTERP(FONCTION=foncDX, NOM_RESU="DEPL", LIST_PARA=L_INST, NOM_PARA="INST")

foncVX = FORMULE(VALE="1./3 *(2 * cos(INST) - 2*cos(2*INST))", NOM_PARA="INST")
REFVX = CALC_FONC_INTERP(FONCTION=foncVX, NOM_RESU="DEPL", LIST_PARA=L_INST, NOM_PARA="INST")

foncAX = FORMULE(VALE="1./3 *(-2 * sin(INST) + 4*sin(2*INST))", NOM_PARA="INST")
REFAX = CALC_FONC_INTERP(FONCTION=foncAX, NOM_RESU="DEPL", LIST_PARA=L_INST, NOM_PARA="INST")


IMPR_FONCTION(
    FORMAT="XMGRACE",  # PILOTE='INTERACTIF',
    UNITE=29,
    COURBE=(
        _F(FONCTION=DP3, LEGENDE="Calc", FREQ_MARQUEUR=0),
        _F(FONCTION=REFDX, LEGENDE="Ref", FREQ_MARQUEUR=1.0e8),
    ),
    LEGENDE_X="Time",
    LEGENDE_Y="Displ",
)

IMPR_FONCTION(
    FORMAT="XMGRACE",  # PILOTE='INTERACTIF',
    UNITE=29,
    COURBE=(
        _F(FONCTION=VP3, LEGENDE="Calc", FREQ_MARQUEUR=0),
        _F(FONCTION=REFVX, LEGENDE="Ref", FREQ_MARQUEUR=1.0e8),
    ),
    LEGENDE_X="Time",
    LEGENDE_Y="Velocity",
)

IMPR_FONCTION(
    FORMAT="XMGRACE",  # PILOTE='INTERACTIF',
    UNITE=29,
    COURBE=(
        _F(FONCTION=AP3, LEGENDE="Calc", FREQ_MARQUEUR=0),
        _F(FONCTION=REFAX, LEGENDE="Ref", FREQ_MARQUEUR=1.0e8),
    ),
    LEGENDE_X="Time",
    LEGENDE_Y="acceleration",
)

# ==============================================================================
# Tests

# DEPL
formDX = FORMULE(VALE="abs(DP3(INST)-REFDX(INST))", NOM_PARA="INST", DP3=DP3, REFDX=REFDX)
diffDX = CALC_FONC_INTERP(FONCTION=formDX, NOM_RESU="DEPL", LIST_PARA=L_INST, NOM_PARA="INST")
maxDX = INFO_FONCTION(MAX=_F(FONCTION=diffDX))
TEST_TABLE(
    CRITERE="ABSOLU",
    REFERENCE="ANALYTIQUE",
    VALE_REFE=0.0e00,
    VALE_CALC=0.00021795427367399256,
    NOM_PARA="DEPL",
    TYPE_TEST="SOMM_ABS",
    TABLE=maxDX,
)

# VITE
formVX = FORMULE(VALE="abs(VP3(INST)-REFVX(INST))", NOM_PARA="INST", VP3=VP3, REFVX=REFVX)
diffVX = CALC_FONC_INTERP(FONCTION=formVX, NOM_RESU="VITE", LIST_PARA=L_INST, NOM_PARA="INST")
maxVX = INFO_FONCTION(MAX=_F(FONCTION=diffVX))
TEST_TABLE(
    CRITERE="ABSOLU",
    REFERENCE="ANALYTIQUE",
    VALE_REFE=0.0e00,
    VALE_CALC=0.00023899780637193224,
    NOM_PARA="VITE",
    TYPE_TEST="SOMM_ABS",
    TABLE=maxVX,
)

# ACCE
formAX = FORMULE(VALE="abs(AP3(INST)-REFAX(INST))", NOM_PARA="INST", AP3=AP3, REFAX=REFAX)
diffAX = CALC_FONC_INTERP(FONCTION=formAX, NOM_RESU="VITE", LIST_PARA=L_INST, NOM_PARA="INST")
maxAX = INFO_FONCTION(MAX=_F(FONCTION=diffAX))
TEST_TABLE(
    CRITERE="ABSOLU",
    REFERENCE="ANALYTIQUE",
    VALE_REFE=0.0e00,
    PRECISION=0.0011,
    VALE_CALC=0.0002177432283503311,
    NOM_PARA="VITE",
    TYPE_TEST="SOMM_ABS",
    TABLE=maxAX,
)


FIN()
