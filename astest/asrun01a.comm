# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: mathieu.courtois at edf.fr
#
# This file must be kept as the exact copy of that included with asrun
# except the keyword CODE.

"""
Jeu de données pour changer le format d'un maillage et
lancer MACR_INFO_MAIL en option.

Les unités attendues sont :
   70 : fichier de paramètres
   71 : maillage en entrée
   72 : maillage en sortie

Le fichier de paramètres contient les variables suivantes :
   format_in/out : 'aster', 'gmsh', 'gibi', 'ideas', 'med'
   info_mail     : 1 / 0
   info_cmd      : 1 / 2 niveau d'info des commandes
"""

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))

import os

fpara = "fort.70"
unite_in = 71
unite_out = 72

# -----------------------------------------------------------------------------
# version de Code_Aster
from code_aster.Utilities import get_version

vers = get_version()

# -----------------------------------------------------------------------------
# lecture du fichier de paramètres
if os.path.exists(fpara):
    s_para = open(fpara, "r").read()
    print(
        (
            """
# ========================================= #
#           FICHIER DE PARAMETRES           #

%s
# ========================================= #
"""
            % s_para
        )
    )
    exec(compile(open(fpara).read(), fpara, "exec"))
else:
    raise CA.AsterError(
        """ <meshtool> File not found : %s
            It should have been created by meshtool script..."""
        % fpara
    )

# -----------------------------------------------------------------------------
unite_mail = 20
if format_in in ("aster", "med"):
    # lecture directe du fichier IN
    unite_mail = unite_in

# -----------------------------------------------------------------------------
# conversion du maillage
if format_in == "gibi":
    PRE_GIBI(UNITE_GIBI=unite_in, UNITE_MAILLAGE=unite_mail)
elif format_in == "gmsh":
    PRE_GMSH(UNITE_GMSH=unite_in, UNITE_MAILLAGE=unite_mail)
elif format_in == "ideas":
    PRE_IDEAS(UNITE_IDEAS=unite_in, UNITE_MAILLAGE=unite_mail)

# -----------------------------------------------------------------------------
# lecture directe
if format_in == "med":
    ma = LIRE_MAILLAGE(UNITE=unite_mail, FORMAT="MED", INFO=info_cmd)
else:
    ma = LIRE_MAILLAGE(INFO=1, FORMAT="ASTER", UNITE=71)

# -----------------------------------------------------------------------------
# sortie du maillage
if format_out == "gibi":
    format_out = "castem"
format_out = format_out.upper()

IMPR_RESU(FORMAT=format_out, UNITE=unite_out, RESU=_F(MAILLAGE=ma), INFO=info_cmd)

# -----------------------------------------------------------------------------
# analyse du maillage par homard
CA.onFatalError("EXCEPTION")
if info_mail:
    # options
    opts_info_mail = {"LANGUE": lang}
    opts_info_mail["ELEMENTS_ACCEPTES"] = "IGNORE_PYRA"
    try:
        MACR_INFO_MAIL(MAILLAGE=ma, **opts_info_mail)
    except CA.AsterError as msg:
        print("""Erreur lors de l'appel à HOMARD...""")
        print(msg)

CA.onFatalError("ABORT")

FIN()
