# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# This testcase is a copy of ssnp15f, but using MECA_NON_LINE.

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI", ERREUR=_F(ALARME="ALARME"), DEBUG=_F(SDVERI="NON"), IGNORE_ALARM=("QUALITY1_2"))

test = CA.TestCase()

# ......................................................................
# MODELISATION S : Check event-driven for HPC solvers
# ......................................................................

MA = CA.ParallelMesh.buildRectangle(lx=300, ly=10, nx=48, ny=16)

MA = MODI_MAILLAGE(reuse=MA, MAILLAGE=MA, ORIE_PEAU=_F(GROUP_MA_PEAU=("LEFT", "RIGHT")), INFO=2)

MO = AFFE_MODELE(MAILLAGE=MA, AFFE=_F(MODELISATION="D_PLAN", PHENOMENE="MECANIQUE", TOUT="OUI"))


ACIER = DEFI_MATERIAU(
    ELAS=_F(E=195000.0, NU=0.3), ECRO_LINE=_F(D_SIGM_EPSI=1930.0, SY=181.0), PRAGER=_F(C=0.0)
)

CM = AFFE_MATERIAU(MAILLAGE=MA, AFFE=_F(TOUT="OUI", MATER=ACIER))


CISAIL = AFFE_CHAR_MECA(MODELE=MO, PRES_REP=(_F(GROUP_MA="RIGHT", CISA_2D=2.0),))

LIAISON = AFFE_CHAR_CINE(MODELE=MO, MECA_IMPO=(_F(GROUP_MA="LEFT", DX=0.0, DY=0.0),))

RAMPE = DEFI_FONCTION(NOM_PARA="INST", VALE=(0, 0, 1, 1))

L_INST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=(_F(JUSQU_A=1.0, NOMBRE=1),))

# gestion manuelle avec event-driven

DEFLIST = DEFI_LIST_INST(
    METHODE="MANUEL",
    DEFI_LIST=_F(LIST_INST=L_INST),
    MODELE=MO,
    ECHEC=(
        _F(
            EVENEMENT="DELTA_GRANDEUR",
            SUBD_NIVEAU=15,
            VALE_REF=0.1e-2,
            NOM_CHAM="VARI_ELGA",
            NOM_CMP="V1",
            GROUP_MA="SURFACE",
        ),
        _F(
            EVENEMENT="DELTA_GRANDEUR",
            SUBD_NIVEAU=15,
            VALE_REF=2.0,
            SUBD_PAS=2,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            GROUP_MA="RIGHT",
        ),
    ),
)

for solver in [STAT_NON_LINE, MECA_NON_LINE]:

    resu = solver(
        MODELE=MO,
        CHAM_MATER=CM,
        EXCIT=(_F(CHARGE=LIAISON), _F(CHARGE=CISAIL, FONC_MULT=RAMPE)),
        COMPORTEMENT=_F(RELATION="VMIS_ECMI_LINE"),
        INCREMENT=_F(LIST_INST=DEFLIST),
        NEWTON=_F(MATRICE="TANGENTE", REAC_ITER=1),
        SOLVEUR=_F(METHODE="PETSC"),
    )

    # extract the internal variables at the last time step
    v = resu.getField("VARI_ELGA", resu.getNumberOfIndexes() - 1)

    # extract the cumulated plastic strain
    vs = v.toSimpleFieldOnCells()
    v1 = vs.restrict(["V1"])
    fed = MO.getFiniteElementDescriptor()
    v1 = v1.toFieldOnCells(fed)

    # Verification with respect to a sequential solve
    test.assertAlmostEqual(v1.norm("NORM_2"), 0.014707223929383924)
    test.assertEqual(
        resu.getAccessParameters()["INST"],
        [0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.8125, 0.875, 0.9375, 1.0],
    )

FIN()
