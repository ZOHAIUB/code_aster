# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# CAS D'UN FOND FERME CIRCULAIRE AVEC SYMETRIE DE LA FISSURE

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

import aster

M = LIRE_MAILLAGE(FORMAT="MED")

FISS0 = DEFI_FOND_FISS(
    MAILLAGE=M,
    FOND_FISS=_F(TYPE_FOND="FERME", GROUP_MA="LFF", GROUP_NO_ORIG="N49", GROUP_MA_ORIG="M3233"),
    SYME="OUI",
    LEVRE_SUP=_F(GROUP_MA="LEVINF"),
)


import numpy as np

nb_comp_basloc = 9
basloc = FISS0.getCrackFrontNodeBasis().getValues()
basloc = np.array(basloc).reshape((len(basloc) // nb_comp_basloc), nb_comp_basloc)[:, 3:]
index_by_nodename = {M.getNodeName(i): i for i in M.getNodes()}
lnoff = FISS0.getCrackFrontNodes()
basloc = basloc[[index_by_nodename[nodename] for nodename in lnoff], :]
basloc = basloc.reshape((len(basloc), 2, 3))
norm = np.linalg.norm(basloc, axis=2)
norm = norm.reshape((len(basloc), 2, 1))
norm = np.concatenate((norm, norm, norm), axis=2)
basefond0 = (basloc / norm).flatten()

ndfon = []
# listes des composantes des vecteurs normaux au plan de la fissure
vnorX = []
vnorY = []
vnorZ = []
# listes des composantes des vecteurs de direction de propagation de
# la fissure
vdirX = []
vdirY = []
vdirZ = []

# np.set_printoptions(precision=16, linewidth=150)
# print(basefond0)

for i in range(0, len(basefond0) // 6):
    ndfon.append(i + 1)
    vdirX.append(basefond0[6 * i])
    vdirY.append(basefond0[6 * i + 1])
    vdirZ.append(basefond0[6 * i + 2])
    vnorX.append(basefond0[6 * i + 3])
    vnorY.append(basefond0[6 * i + 4])
    vnorZ.append(basefond0[6 * i + 5])

TABL0 = CREA_TABLE(
    LISTE=(
        _F(LISTE_I=ndfon, PARA="ND_FOND"),
        _F(LISTE_R=vnorX, PARA="VNORX"),
        _F(LISTE_R=vnorY, PARA="VNORY"),
        _F(LISTE_R=vnorZ, PARA="VNORZ"),
        _F(LISTE_R=vdirX, PARA="VDIRX"),
        _F(LISTE_R=vdirY, PARA="VDIRY"),
        _F(LISTE_R=vdirZ, PARA="VDIRZ"),
    )
)

# Calcul des valeurs analytiques des vecteurs de direction de
# propagation de fissure :
# Comme la fissure est un cercle ayant pour centre, l'origine du repere:
# les valeurs analytiques des vecteurs de direction de
# propagation de la fissure sont les coordonnees des noeuds du fond

vdirX_ana = []
vdirY_ana = []
vdirZ_ana = []

l_numeros_noeuds_fissure = []
# Noms des noeuds du fond
l_noms_noeuds_fissure = FISS0.getCrackFrontNodes()


coords = M.getCoordinates().getValues()

for i in range(0, len(ndfon)):
    index = index_by_nodename[l_noms_noeuds_fissure[i]]
    l_numeros_noeuds_fissure.append(index)

    coor = coords[l_numeros_noeuds_fissure[i] * 3 : l_numeros_noeuds_fissure[i] * 3 + 3]

    norme = sqrt(coor[0] ** 2 + coor[1] ** 2 + coor[2] ** 2)

    vdirX_ana.append(coor[0] / norme)
    vdirY_ana.append(coor[1] / norme)
    vdirZ_ana.append(coor[2] / norme)

VALE_CALC = [
    1.7453283658983739e-03,
    -6.1094793322220130e-17,
    -9.9999847691328769e-01,
    9.9999844722045572e-01,
    -1.3944936280513701e-17,
    1.7622589700578366e-03,
    1.7285603936145924e-03,
    -1.7024833895480852e-04,
    -9.9999849154609655e-01,
    9.9518316637945137e-01,
    -9.8016986654140353e-02,
    1.7707857609572575e-03,
    1.7117923707433470e-03,
    -3.4049667292712578e-04,
    -9.9999847691328769e-01,
    9.8078375745990898e-01,
    -1.9509001908387075e-01,
    1.7622589700578533e-03,
    1.6621327870758261e-03,
    -5.0420246867461055e-04,
    -9.9999849154609655e-01,
    9.5693883540063784e-01,
    -2.9028422213385929e-01,
    1.7707857609572846e-03,
    1.6124731547648894e-03,
    -6.6790824966627576e-04,
    -9.9999847691328769e-01,
    9.2387809793004649e-01,
    -3.8268283814208598e-01,
    1.7622589700578908e-03,
    1.5318303496645366e-03,
    -8.1878038028320756e-04,
    -9.9999849154609655e-01,
    8.8191988163486135e-01,
    -4.7139599775023633e-01,
    1.7707857609573006e-03,
    1.4511874997341556e-03,
    -9.6965248693798797e-04,
    -9.9999847691328769e-01,
    8.3146832121354231e-01,
    -5.5556937034150466e-01,
    1.7622589700578869e-03,
    1.3426605309759627e-03,
    -1.1018930210548311e-03,
    -9.9999849154609655e-01,
    7.7300924140422378e-01,
    -6.3439228953499671e-01,
    1.7707857609572768e-03,
    1.2341335229239258e-03,
    -1.2341335229240399e-03,
    -9.9999847691328769e-01,
    7.0710568320560319e-01,
    -7.0710568320560085e-01,
    1.7622589700578412e-03,
    1.1018930210546899e-03,
    -1.3426605309760536e-03,
    -9.9999849154609655e-01,
    6.3439228953499605e-01,
    -7.7300924140422456e-01,
    1.7707857609572581e-03,
    9.6965248693782924e-04,
    -1.4511874997342152e-03,
    -9.9999847691328769e-01,
    5.5556937034150611e-01,
    -8.3146832121354153e-01,
    1.7622589700578488e-03,
    8.1878038028305913e-04,
    -1.5318303496646161e-03,
    -9.9999849154609655e-01,
    4.7139599775023711e-01,
    -8.8191988163486101e-01,
    1.7707857609573008e-03,
    6.6790824966613785e-04,
    -1.6124731547649885e-03,
    -9.9999847691328769e-01,
    3.8268283814208620e-01,
    -9.2387809793004638e-01,
    1.7622589700579288e-03,
    5.0420246867463646e-04,
    -1.6621327870759144e-03,
    -9.9999849154609655e-01,
    2.9028422213385929e-01,
    -9.5693883540063784e-01,
    1.7707857609573451e-03,
    3.4049667292731638e-04,
    -1.7117923707434244e-03,
    -9.9999847691328769e-01,
    1.9509001908387094e-01,
    -9.8078375745990898e-01,
    1.7622589700579359e-03,
    1.7024833895502660e-04,
    -1.7285603936146308e-03,
    -9.9999849154609655e-01,
    9.8016986654140104e-02,
    -9.9518316637945137e-01,
    1.7707857609573106e-03,
    3.0764237098810934e-16,
    -1.7453283658983730e-03,
    -9.9999847691328769e-01,
    -1.3247689466488018e-16,
    -9.9999844722045572e-01,
    1.7622589700578598e-03,
    -1.7024833895456327e-04,
    -1.7285603936145920e-03,
    -9.9999849154609655e-01,
    -9.8016986654140575e-02,
    -9.9518316637945137e-01,
    1.7707857609572575e-03,
    -3.4049667292700402e-04,
    -1.7117923707433470e-03,
    -9.9999847691328769e-01,
    -1.9509001908387105e-01,
    -9.8078375745990887e-01,
    1.7622589700578297e-03,
    -5.0420246867448955e-04,
    -1.6621327870758277e-03,
    -9.9999849154609655e-01,
    -2.9028422213385957e-01,
    -9.5693883540063773e-01,
    1.7707857609572503e-03,
    -6.6790824966615466e-04,
    -1.6124731547648929e-03,
    -9.9999847691328769e-01,
    -3.8268283814208576e-01,
    -9.2387809793004660e-01,
    1.7622589700578473e-03,
    -8.1878038028308580e-04,
    -1.5318303496645402e-03,
    -9.9999849154609655e-01,
    -4.7139599775023572e-01,
    -8.8191988163486168e-01,
    1.7707857609572464e-03,
    -9.6965248693786643e-04,
    -1.4511874997341593e-03,
    -9.9999847691328769e-01,
    -5.5556937034150422e-01,
    -8.3146832121354264e-01,
    1.7622589700578225e-03,
    -1.1018930210547097e-03,
    -1.3426605309759651e-03,
    -9.9999849154609655e-01,
    -6.3439228953499660e-01,
    -7.7300924140422400e-01,
    1.7707857609572022e-03,
    -1.2341335229239185e-03,
    -1.2341335229239267e-03,
    -9.9999847691328769e-01,
    -7.0710568320560085e-01,
    -7.0710568320560319e-01,
    1.7622589700577560e-03,
    -1.3426605309759313e-03,
    -1.1018930210546904e-03,
    -9.9999849154609655e-01,
    -7.7300924140422456e-01,
    -6.3439228953499605e-01,
    1.7707857609571636e-03,
    -1.4511874997340923e-03,
    -9.6965248693782924e-04,
    -9.9999847691328769e-01,
    -8.3146832121354153e-01,
    -5.5556937034150611e-01,
    1.7622589700577460e-03,
    -1.5318303496644932e-03,
    -8.1878038028305891e-04,
    -9.9999849154609655e-01,
    -8.8191988163486101e-01,
    -4.7139599775023711e-01,
    1.7707857609571924e-03,
    -1.6124731547648658e-03,
    -6.6790824966613742e-04,
    -9.9999847691328769e-01,
    -9.2387809793004638e-01,
    -3.8268283814208620e-01,
    1.7622589700578154e-03,
    -1.6621327870758235e-03,
    -5.0420246867448261e-04,
    -9.9999849154609655e-01,
    -9.5693883540063784e-01,
    -2.9028422213385929e-01,
    1.7707857609572442e-03,
    -1.7117923707433652e-03,
    -3.4049667292700901e-04,
    -9.9999847691328769e-01,
    -9.8078375745990898e-01,
    -1.9509001908387094e-01,
    1.7622589700578488e-03,
    -1.7285603936146015e-03,
    -1.7024833895468844e-04,
    -9.9999849154609655e-01,
    -9.9518316637945137e-01,
    -9.8016986654140104e-02,
    1.7707857609572553e-03,
    -1.7453283658983739e-03,
    6.1325186287277308e-17,
    -9.9999847691328769e-01,
    -9.9999844722045572e-01,
    1.3944936280513701e-16,
    1.7622589700578366e-03,
    -1.7285603936145924e-03,
    1.7024833895480890e-04,
    -9.9999849154609655e-01,
    -9.9518316637945137e-01,
    9.8016986654140575e-02,
    1.7707857609572577e-03,
    -1.7117923707433468e-03,
    3.4049667292712632e-04,
    -9.9999847691328769e-01,
    -9.8078375745990887e-01,
    1.9509001908387105e-01,
    1.7622589700578533e-03,
    -1.6621327870758277e-03,
    5.0420246867461196e-04,
    -9.9999849154609655e-01,
    -9.5693883540063773e-01,
    2.9028422213385957e-01,
    1.7707857609572857e-03,
    -1.6124731547648929e-03,
    6.6790824966627717e-04,
    -9.9999847691328769e-01,
    -9.2387809793004660e-01,
    3.8268283814208576e-01,
    1.7622589700578939e-03,
    -1.5318303496645402e-03,
    8.1878038028320810e-04,
    -9.9999849154609655e-01,
    -8.8191988163486168e-01,
    4.7139599775023572e-01,
    1.7707857609573041e-03,
    -1.4511874997341591e-03,
    9.6965248693798873e-04,
    -9.9999847691328769e-01,
    -8.3146832121354264e-01,
    5.5556937034150422e-01,
    1.7622589700578906e-03,
    -1.3426605309759644e-03,
    1.1018930210548315e-03,
    -9.9999849154609655e-01,
    -7.7300924140422400e-01,
    6.3439228953499660e-01,
    1.7707857609572789e-03,
    -1.2341335229239258e-03,
    1.2341335229240399e-03,
    -9.9999847691328769e-01,
    -7.0710568320560319e-01,
    7.0710568320560085e-01,
    1.7622589700578412e-03,
    -1.1018930210546899e-03,
    1.3426605309760536e-03,
    -9.9999849154609655e-01,
    -6.3439228953499605e-01,
    7.7300924140422456e-01,
    1.7707857609572581e-03,
    -9.6965248693782924e-04,
    1.4511874997342152e-03,
    -9.9999847691328769e-01,
    -5.5556937034150611e-01,
    8.3146832121354153e-01,
    1.7622589700578488e-03,
    -8.1878038028305913e-04,
    1.5318303496646161e-03,
    -9.9999849154609655e-01,
    -4.7139599775023711e-01,
    8.8191988163486101e-01,
    1.7707857609573008e-03,
    -6.6790824966613785e-04,
    1.6124731547649885e-03,
    -9.9999847691328769e-01,
    -3.8268283814208620e-01,
    9.2387809793004638e-01,
    1.7622589700579288e-03,
    -5.0420246867463646e-04,
    1.6621327870759144e-03,
    -9.9999849154609655e-01,
    -2.9028422213385929e-01,
    9.5693883540063784e-01,
    1.7707857609573451e-03,
    -3.4049667292731638e-04,
    1.7117923707434244e-03,
    -9.9999847691328769e-01,
    -1.9509001908387094e-01,
    9.8078375745990898e-01,
    1.7622589700579359e-03,
    -1.7024833895502671e-04,
    1.7285603936146310e-03,
    -9.9999849154609655e-01,
    -9.8016986654140159e-02,
    9.9518316637945137e-01,
    1.7707857609573106e-03,
    -3.0787276395316655e-16,
    1.7453283658983732e-03,
    -9.9999847691328769e-01,
    1.3944936280513701e-17,
    9.9999844722045572e-01,
    1.7622589700578598e-03,
    1.7024833895456257e-04,
    1.7285603936145920e-03,
    -9.9999849154609655e-01,
    9.8016986654140215e-02,
    9.9518316637945137e-01,
    1.7707857609572575e-03,
    3.4049667292700375e-04,
    1.7117923707433470e-03,
    -9.9999847691328769e-01,
    1.9509001908387097e-01,
    9.8078375745990898e-01,
    1.7622589700578297e-03,
    5.0420246867448825e-04,
    1.6621327870758261e-03,
    -9.9999849154609655e-01,
    2.9028422213385935e-01,
    9.5693883540063784e-01,
    1.7707857609572488e-03,
    6.6790824966615390e-04,
    1.6124731547648892e-03,
    -9.9999847691328769e-01,
    3.8268283814208631e-01,
    9.2387809793004638e-01,
    1.7622589700578436e-03,
    8.1878038028308678e-04,
    1.5318303496645355e-03,
    -9.9999849154609655e-01,
    4.7139599775023727e-01,
    8.8191988163486090e-01,
    1.7707857609572434e-03,
    9.6965248693786827e-04,
    1.4511874997341538e-03,
    -9.9999847691328769e-01,
    5.5556937034150611e-01,
    8.3146832121354142e-01,
    1.7622589700578197e-03,
    1.1018930210547043e-03,
    1.3426605309759612e-03,
    -9.9999849154609655e-01,
    6.3439228953499605e-01,
    7.7300924140422433e-01,
    1.7707857609571955e-03,
    1.2341335229239154e-03,
    1.2341335229239163e-03,
    -9.9999847691328769e-01,
    7.0710568320560341e-01,
    7.0710568320560063e-01,
    1.7622589700577462e-03,
    1.3426605309759230e-03,
    1.1018930210546856e-03,
    -9.9999849154609655e-01,
    7.7300924140422378e-01,
    6.3439228953499671e-01,
    1.7707857609571532e-03,
    1.4511874997340866e-03,
    9.6965248693782057e-04,
    -9.9999847691328769e-01,
    8.3146832121354242e-01,
    5.5556937034150466e-01,
    1.7622589700577358e-03,
    1.5318303496644904e-03,
    8.1878038028305436e-04,
    -9.9999849154609655e-01,
    8.8191988163486146e-01,
    4.7139599775023622e-01,
    1.7707857609571870e-03,
    1.6124731547648660e-03,
    6.6790824966613677e-04,
    -9.9999847691328769e-01,
    9.2387809793004649e-01,
    3.8268283814208592e-01,
    1.7622589700578156e-03,
    1.6621327870758238e-03,
    5.0420246867448251e-04,
    -9.9999849154609655e-01,
    9.5693883540063784e-01,
    2.9028422213385929e-01,
    1.7707857609572445e-03,
    1.7117923707433657e-03,
    3.4049667292700863e-04,
    -9.9999847691328769e-01,
    9.8078375745990898e-01,
    1.9509001908387069e-01,
    1.7622589700578490e-03,
    1.7285603936146017e-03,
    1.7024833895468885e-04,
    -9.9999849154609655e-01,
    9.9518316637945137e-01,
    9.8016986654140312e-02,
    1.7707857609572553e-03,
    1.7453283658983739e-03,
    -6.1094793322220130e-17,
    -9.9999847691328769e-01,
    9.9999844722045572e-01,
    -1.3944936280513701e-17,
    1.7622589700578366e-03,
]

# Quand la fissure est definie avec un plan de symetrie,
# le vecteur de direction de propagation appartient au plan de
# la levre.
# Or,la levre definie n'est pas plane. Donc, la precision des
# resultats est alteree suivant l'axe Z pour vdir et comme
# la normale au plan de la fissure est calculee a partir de vdir,
# la precision de vnorx et/ou de vnory l'est egalement.

for i in range(0, len(ndfon)):

    if abs(vnorX[i]) >= 1.0e-3:
        prec = 1.8e-3
    else:
        prec = 1.0e-3

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VNORX",
        VALE_CALC=VALE_CALC[i * 6 + 0],
        VALE_REFE=0.0,
        CRITERE="ABSOLU",
        PRECISION=prec,
        REFERENCE="ANALYTIQUE",
    )

    if abs(vnorY[i]) >= 1.0e-3:
        prec = 1.8e-3
    else:
        prec = 1.0e-3

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VNORY",
        VALE_CALC=VALE_CALC[i * 6 + 1],
        VALE_REFE=0.0,
        CRITERE="ABSOLU",
        PRECISION=prec,
        REFERENCE="ANALYTIQUE",
    )

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VNORZ",
        VALE_CALC=VALE_CALC[i * 6 + 2],
        VALE_REFE=-1.0,
        CRITERE="ABSOLU",
        REFERENCE="ANALYTIQUE",
    )

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VDIRX",
        VALE_CALC=VALE_CALC[i * 6 + 3],
        VALE_REFE=vdirX_ana[i],
        CRITERE="ABSOLU",
        REFERENCE="ANALYTIQUE",
    )

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VDIRY",
        VALE_CALC=VALE_CALC[i * 6 + 4],
        VALE_REFE=vdirY_ana[i],
        CRITERE="ABSOLU",
        REFERENCE="ANALYTIQUE",
    )

    TEST_TABLE(
        TABLE=TABL0,
        FILTRE=_F(NOM_PARA="ND_FOND", VALE_I=i + 1),
        NOM_PARA="VDIRZ",
        VALE_CALC=VALE_CALC[i * 6 + 5],
        VALE_REFE=vdirZ_ana[i],
        CRITERE="ABSOLU",
        PRECISION=1.8e-3,
        REFERENCE="ANALYTIQUE",
    )

FIN()
