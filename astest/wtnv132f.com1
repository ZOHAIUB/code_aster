# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: marc.kham at edf.fr
#
#                    POST-TRAITEMENT ET VALIDATION
#                    =============================

# ATTENTION:
# =========
#
# on ne garantit pas la transposabilite de ce post-traitement
# a un autre maillage.


POURSUITE(CODE="OUI", ERREUR=_F(ALARME="ALARME"))

#       ---------------
# FIN-  Post-traitement
#       ---------------

#    ----------------------------------------------------
# 1- On cherche d'abord à créer une table de la forme:
#
#                    temps noeu_1  noeu_2   ....   noeu_n
#                t1
#                t2
#  noeu_depl =    .
#                 .
#                 .
#                tn
#    ----------------------------------------------------


n_pas_temps_max = 10000
n_pas_incr = 1
noeu_depl = dict()
noeu_depl["TEMPS"] = [0.0]
cle = []
list_pas_temps = []
noeu_tass_0 = []

# -->20: début boucle for
for n in range(nbcouche):

    cle.append("ELEMEN" + str(n))
    noeu_depl[cle[n]] = [0.0] * n_pas_temps_max

    tab = T_DEP[n].EXTR_TABLE()
    t = tab.INST.values()
    dy = tab.DY.values()

    n_pas_temps = int(len(t) / (n + 1))

    n_pas_incr_0 = n_pas_incr
    n_pas_incr += n_pas_temps

    list_pas_temps.append(n_pas_incr - 2)

    noeu_depl["TEMPS"] += t[:: n + 1]
    noeu_tass_0.append(dy[(n + 1) * n_pas_temps - 1])

    # -->30: début boucle for
    for m in range(n + 1):

        noeu_depl[cle[m]][n_pas_incr_0:n_pas_incr] = dy[m :: n + 1]

    # <--30: fin boucle for

    # DETRUIRE(NOM=(v))

# <--20: fin boucle for


# -->50: début boucle for
for n in range(nbcouche):

    del noeu_depl[cle[n]][n_pas_incr:]

# <--50: fin boucle for


#    -------------------------------------------------
# 2- On calcule le tassement
#
#                    temps_1  temps_2   ....   temps_n
#                H1
#                H2
#  noeu_tass =    .
#                 .
#                 .
#                Hn
#    -------------------------------------------------


n_pas_temps = len(noeu_depl["TEMPS"])
noeu_tass = dict()

# -->100: début boucle for
for n in range(n_pas_temps - 1):

    noeu_tass["TEMPS" + str(n)] = []

# <--100: fin boucle for


# -->300: début boucle for
for n in range(n_pas_temps - 1):

    # -->40: début boucle for
    for m in range(nbcouche):

        tass_value = 0.0
        if noeu_depl[cle[m]][n + 1] != 0.0:
            tass_value = noeu_depl[cle[m]][n + 1] - noeu_tass_0[m]

        noeu_tass["TEMPS" + str(n)].append(tass_value)

    # <--40: fin boucle for

# <--300: fin boucle for


#    ----------------------------
# 3- Impression au format XMGRACE
#    ----------------------------


tass = [0.0] * n_pas_temps
COURBE = []
n_pas_temps = len(list_pas_temps)

# -->200: début boucle for
for n in range(n_pas_temps):

    def_courbe = {"ABSCISSE": noeu_tass["TEMPS" + str(list_pas_temps[n])]}
    def_courbe["ORDONNEE"] = list(range(1, nbcouche + 1))
    def_courbe["LEGENDE"] = "TEMPS" + str(list_pas_temps[n])
    def_courbe["COULEUR"] = list_pas_temps[n] + 1
    def_courbe["MARQUEUR"] = list_pas_temps[n] + 1

    COURBE.append(def_courbe)

    l_cote = DEFI_LIST_REEL(TITRE="COTE", VALE=def_courbe["ORDONNEE"])

    l_tass = DEFI_LIST_REEL(TITRE="TASSEMENT", VALE=def_courbe["ABSCISSE"])

    tass[n] = DEFI_FONCTION(NOM_PARA="Z", NOM_RESU="TASSEMENT", VALE_PARA=l_cote, VALE_FONC=l_tass)

    IMPR_FONCTION(FORMAT="TABLEAU", UNITE=8, COURBE=_F(FONCTION=tass[n]))

    del def_courbe
    DETRUIRE(NOM=(l_cote, l_tass))

# <--200: fin boucle for

IMPR_FONCTION(FORMAT="XMGRACE", UNITE=25, COURBE=COURBE)


#              ------------------------------------
# VALIDATION-  Comparaison des valeurs de tassement
#              par rapport à GEFDYN (ECP)
#              ------------------------------------


# tassement de la première couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-4.647252376363e-03,
            VALE_REFE=-4.6480000000000002e-3,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.07,
            FONCTION=tass[2],
        ),
        _F(
            VALE_CALC=-8.371511749364e-03,
            VALE_REFE=-8.3909999999999992e-3,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.035,
            FONCTION=tass[3],
        ),
        _F(
            VALE_CALC=-0.01186230913491,
            VALE_REFE=-0.011939999999999999,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[4],
        ),
        _F(
            VALE_CALC=-0.01528481122012,
            VALE_REFE=-0.015440000000000001,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.02,
            FONCTION=tass[5],
        ),
        _F(
            VALE_CALC=-0.01873023842606,
            VALE_REFE=-0.01898,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.02,
            FONCTION=tass[6],
        ),
        _F(
            VALE_CALC=-0.02227680344813,
            VALE_REFE=-0.02265,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=2.0e-2,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.02596461844467,
            VALE_REFE=-0.02647,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=2.0e-2,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.02981747307258,
            VALE_REFE=-0.03049,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.025,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.03384892407635,
            VALE_REFE=-0.034729999999999997,
            CRITERE="RELATIF",
            VALE_PARA=2.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la deuxième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-8.364237039784e-03,
            VALE_REFE=-8.4089999999999998e-3,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.089999999999999997,
            FONCTION=tass[3],
        ),
        _F(
            VALE_CALC=-0.01557600366586,
            VALE_REFE=-0.015720000000000001,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.050000000000000003,
            FONCTION=tass[4],
        ),
        _F(
            VALE_CALC=-0.02248730412340,
            VALE_REFE=-0.022780000000000002,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.040000000000000001,
            FONCTION=tass[5],
        ),
        _F(
            VALE_CALC=-0.02935328902908,
            VALE_REFE=-0.029829999999999999,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.040000000000000001,
            FONCTION=tass[6],
        ),
        _F(
            VALE_CALC=-0.03634298690856,
            VALE_REFE=-0.03703,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.04357486064963,
            VALE_REFE=-0.044510000000000001,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.05111271369368,
            VALE_REFE=-0.052359999999999997,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.025,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.05899387046922,
            VALE_REFE=-0.060609999999999997,
            CRITERE="RELATIF",
            VALE_PARA=3.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la troixième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.01185561261936,
            VALE_REFE=-0.011979999999999999,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.12,
            FONCTION=tass[4],
        ),
        _F(
            VALE_CALC=-0.02248875274519,
            VALE_REFE=-0.022800000000000001,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.070000000000000007,
            FONCTION=tass[5],
        ),
        _F(
            VALE_CALC=-0.03284417116838,
            VALE_REFE=-0.033410000000000002,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.059999999999999998,
            FONCTION=tass[6],
        ),
        _F(
            VALE_CALC=-0.04325512422723,
            VALE_REFE=-0.044119999999999999,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.050000000000000003,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.05393109437319,
            VALE_REFE=-0.055149999999999998,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.040000000000000001,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.06501403303917,
            VALE_REFE=-0.066650000000000001,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.07658129191475,
            VALE_REFE=-0.078729999999999994,
            CRITERE="RELATIF",
            VALE_PARA=4.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la quatrième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.01527435476095,
            VALE_REFE=-0.015469999999999999,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.089999999999999997,
            FONCTION=tass[5],
        ),
        _F(
            VALE_CALC=-0.02934984150659,
            VALE_REFE=-0.029839999999999998,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.050000000000000003,
            FONCTION=tass[6],
        ),
        _F(
            VALE_CALC=-0.04324825999715,
            VALE_REFE=-0.044110000000000003,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.040000000000000001,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.05734314467581,
            VALE_REFE=-0.058650000000000001,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.07186723046581,
            VALE_REFE=-0.073690000000000005,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.08697605010714,
            VALE_REFE=-0.089429999999999996,
            CRITERE="RELATIF",
            VALE_PARA=5.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la cinquième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.01871647592125,
            VALE_REFE=-0.019019999999999999,
            CRITERE="RELATIF",
            VALE_PARA=6.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.059999999999999998,
            FONCTION=tass[6],
        ),
        _F(
            VALE_CALC=-0.03633427390495,
            VALE_REFE=-0.03705,
            CRITERE="RELATIF",
            VALE_PARA=6.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.040000000000000001,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.05391582898944,
            VALE_REFE=-0.055149999999999998,
            CRITERE="RELATIF",
            VALE_PARA=6.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.07185789727933,
            VALE_REFE=-0.073700000000000002,
            CRITERE="RELATIF",
            VALE_PARA=6.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.09040676701389,
            VALE_REFE=-0.092979999999999993,
            CRITERE="RELATIF",
            VALE_PARA=6.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=3.0e-2,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la sixième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.02225739095891,
            VALE_REFE=-0.022679999999999999,
            CRITERE="RELATIF",
            VALE_PARA=7.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.059999999999999998,
            FONCTION=tass[7],
        ),
        _F(
            VALE_CALC=-0.04355711643483,
            VALE_REFE=-0.044540000000000003,
            CRITERE="RELATIF",
            VALE_PARA=7.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.06498449771329,
            VALE_REFE=-0.066650000000000001,
            CRITERE="RELATIF",
            VALE_PARA=7.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.08694974693034,
            VALE_REFE=-0.089440000000000006,
            CRITERE="RELATIF",
            VALE_PARA=7.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la septième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.02593818082186,
            VALE_REFE=-0.026499999999999999,
            CRITERE="RELATIF",
            VALE_PARA=8.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.050000000000000003,
            FONCTION=tass[8],
        ),
        _F(
            VALE_CALC=-0.05108262153997,
            VALE_REFE=-0.052380000000000003,
            CRITERE="RELATIF",
            VALE_PARA=8.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.07653194452361,
            VALE_REFE=-0.078719999999999998,
            CRITERE="RELATIF",
            VALE_PARA=8.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la huitième couche
TEST_FONCTION(
    VALEUR=(
        _F(
            VALE_CALC=-0.02978152188656,
            VALE_REFE=-0.030519999999999999,
            CRITERE="RELATIF",
            VALE_PARA=9.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.029999999999999999,
            FONCTION=tass[9],
        ),
        _F(
            VALE_CALC=-0.05894668084798,
            VALE_REFE=-0.060630000000000003,
            CRITERE="RELATIF",
            VALE_PARA=9.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=0.03,
            FONCTION=tass[10],
        ),
    )
)

# tassement de la neuvième couche
TEST_FONCTION(
    VALEUR=_F(
        VALE_CALC=-0.03380083134003,
        VALE_REFE=-0.034750000000000003,
        CRITERE="RELATIF",
        VALE_PARA=10.0,
        REFERENCE="SOURCE_EXTERNE",
        PRECISION=0.03,
        FONCTION=tass[10],
    )
)

FIN()
