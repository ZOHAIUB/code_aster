# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#

# --------------------------------------------------------------------------- #
# * * * * * * * * * * * * * * * * Parametrage * * * * * * * * * * * * * * * * #
# --------------------------------------------------------------------------- #


## Parametres mat√©riau
young = 2.0
poisson = 0.3
# Comportement materiau
relation = "ELAS_MEMBRANE_NH"

# Nombre de pas de temps
nbPasPress = 10

# --------------------------------------------------------------------------- #
# * * * * * * * * * * * * * * *  Initialisation * * * * * * * * * * * * * * * #
# --------------------------------------------------------------------------- #

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

MAIL = LIRE_MAILLAGE(FORMAT="MED")

#

#
# DEFINITION DU MODELE

MODELE = AFFE_MODELE(
    MAILLAGE=MAIL, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="MEMBRANE")
)

#

MAIL = MODI_MAILLAGE(
    reuse=MAIL,
    MAILLAGE=MAIL,
    ORIE_NORM_COQUE=_F(GROUP_MA="membrane", VECT_NORM=(0.0, 0.0, 1.0), GROUP_NO="point_O"),
)

#
# DEFINITION DU MATERIAU

CAOUT = DEFI_MATERIAU(ELAS=_F(E=young, NU=poisson))

CARA = AFFE_CARA_ELEM(
    MODELE=MODELE,
    INFO=2,
    MEMBRANE=_F(GROUP_MA="membrane", ANGL_REP_1=(0.0, 0.0), EPAIS=1.0, N_INIT=1.0e-6),
)

#
# ATTRIBUTION DU MATERIAU

CHMAT = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=_F(TOUT="OUI", MATER=CAOUT))


# --------------------------------------------------------------------------- #
# * * * * * * * * * * * * * * * * * Calculs * * * * * * * * * * * * * * * * * #
# --------------------------------------------------------------------------- #

# DEFINITION DES CONDITIONS AUX LIMITES ET CHARGEMENTS
ENCAST = AFFE_CHAR_MECA(MODELE=MODELE, DDL_IMPO=_F(GROUP_NO="bord", DX=0.0, DY=0.0, DZ=0.0))


# -----------------------------------------------------------------------------
## ------------------- APPLICATION D'UNE PRESSION SUIVEUSE  ---------------- ##
# -----------------------------------------------------------------------------

# DEFINITION DES CONDITIONS AUX LIMITES ET CHARGEMENTS
# pression = 1. N/m^2 = 1.e-6 N/mm^2
# Fonction constante pour la couverture de code
FPRES = DEFI_FONCTION(
    NOM_PARA="X",
    VALE=(0.0, -1.0e-6, 1.0, -1.0e-6),
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
    INFO=1,
)

PRESS = AFFE_CHAR_MECA_F(
    MODELE=MODELE, VERI_NORM="NON", PRES_REP=_F(GROUP_MA="membrane", PRES=FPRES)
)


# CALCUL
LIST1 = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=1.0, NOMBRE=nbPasPress))


RES1 = STAT_NON_LINE(
    MODELE=MODELE,
    CHAM_MATER=CHMAT,
    CARA_ELEM=CARA,
    EXCIT=(_F(CHARGE=ENCAST, TYPE_CHARGE="FIXE_CSTE"), _F(CHARGE=PRESS, TYPE_CHARGE="SUIV_PILO")),
    COMPORTEMENT=(
        _F(
            GROUP_MA="membrane",
            RELATION=relation,
            DEFORMATION="GROT_GDEP",
            RESI_CPLAN_RELA=1e-06,
            ITER_CPLAN_MAXI=1,
            RESI_INTE=1e-06,
            ITER_INTE_MAXI=20,
            ITER_INTE_PAS=0,
            PARM_THETA=1.0,
        ),
    ),
    INCREMENT=_F(LIST_INST=LIST1),
    METHODE="NEWTON",
    NEWTON=_F(REAC_INCR=1, MATRICE="TANGENTE", REAC_ITER=1, REAC_ITER_ELAS=0),
    PILOTAGE=_F(TYPE="DDL_IMPO", COEF_MULT=1.0 / 2500.0, GROUP_NO="point_O", NOM_CMP="DZ"),
    CONVERGENCE=_F(ITER_GLOB_MAXI=200, ITER_GLOB_ELAS=25, ARRET="OUI"),
    SOLVEUR=_F(METHODE="MULT_FRONT", RENUM="MD", NPREC=8, ELIM_LAGR="NON", STOP_SINGULIER="OUI"),
    ARCHIVAGE=_F(PAS_ARCH=1),
)


# --------------------------------------------------------------------------- #
# * * * * * * * * * * * * * * * Post Traitement * * * * * * * * * * * * * * * #
# --------------------------------------------------------------------------- #

# Visualisation sur Paravis (deplacements et contraintes)
IMPR_RESU(
    FORMAT="MED", UNITE=80, RESU=_F(MAILLAGE=MAIL, RESULTAT=RES1, NOM_CHAM=("DEPL", "SIEF_ELGA"))
)

# Test resultat

ETA_PILO = RECU_FONCTION(RESULTAT=RES1, TOUT_ORDRE="OUI", NOM_PARA_RESU="ETA_PILOTAGE")

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.1,
        VALE_CALC=116.5680106083,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=109.55,
        PRECISION=7e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.2,
        VALE_CALC=519.3927878135,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=531.73,
        PRECISION=3e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.3,
        VALE_CALC=1009.419099280,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=995.8,
        PRECISION=2e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.4,
        VALE_CALC=1306.684950716,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1276.2,
        PRECISION=3e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.5,
        VALE_CALC=1405.611748031,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1366.9,
        PRECISION=3e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.6,
        VALE_CALC=1394.797949627,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1344.7,
        PRECISION=4e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.7,
        VALE_CALC=1337.550802055,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1280.6,
        PRECISION=5e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.8,
        VALE_CALC=1264.489310923,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1203.0,
        PRECISION=6e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=0.9,
        VALE_CALC=1188.922965368,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1124.4,
        PRECISION=6e-2,
    )
)

TEST_FONCTION(
    VALEUR=_F(
        FONCTION=ETA_PILO,
        NOM_PARA="INST",
        VALE_PARA=1.0,
        VALE_CALC=1116.389136394,
        REFERENCE="SOURCE_EXTERNE",
        VALE_REFE=1049.0,
        PRECISION=7e-2,
    )
)

# DEFI_FICHIER( UNITE = 85, FICHIER = '~/ssns115d.resu')
# IMPR_FONCTION(FORMAT='TABLEAU',
#              COURBE=_F(FONCTION=ETA_PILO,),
#              UNITE=85,)
# DEFI_FICHIER( UNITE = 85, ACTION = 'LIBERER')
#
# TAB = CREA_TABLE(RESU=_F(RESULTAT=RES1,NOM_CHAM='DEPL',NOM_CMP='DZ', GROUP_NO='point_O',)
# )
# DEFI_FICHIER( UNITE = 85, FICHIER = '~/ssns115d_depl.resu')
# IMPR_TABLE(TABLE=TAB,UNITE=85,)
# DEFI_FICHIER( UNITE = 85, ACTION = 'LIBERER')

FIN()
