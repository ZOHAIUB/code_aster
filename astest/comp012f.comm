# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

### >>>>>>>>>>>>>>>>
### >>> Material <<<
### <<<<<<<<<<<<<<<<

### Moduli
k = 516.2e6
g = 238.2e6

young = 9.0 * k * g / (3.0 * k + g)
nu = (3.0 * k - 2.0 * g) / (6.0 * k + 2.0 * g)

### Preconsolidation pressure
pc0 = 50.0e3

### MC parameters
cohe = 1.0e3
phi = 33.0
psi = 27.0
lodeT = 29.999
a = 0.001 * cohe / tan(phi * pi / 180.0)
hC = 0.0

SOL = DEFI_MATERIAU(
    ELAS=_F(E=young, NU=nu, ALPHA=0.0),
    MohrCoulombAS=_F(
        YoungModulus=young,
        PoissonRatio=nu,
        FrictionAngle=phi,
        DilatancyAngle=psi,
        Cohesion=cohe,
        TransitionAngle=lodeT,
        TensionCutOff=a,
        HardeningCoef=hC,
    ),
)

### >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
### >>> Solution for drained triaxial compression test <<<
### <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

nb_inst = 200
epzz_max = 0.0003

CALC_ESSAI_GEOMECA(
    INFO=2,
    MATER=SOL,
    COMPORTEMENT=_F(RELATION="MohrCoulombAS", RESI_INTE=1.0e-14),
    CONVERGENCE=_F(RESI_GLOB_RELA=1.0e-10, ITER_GLOB_MAXI=10),
    ESSAI_TRIA_DR_M_D=_F(
        PRES_CONF=pc0, EPSI_IMPOSE=epzz_max, NB_INST=nb_inst, TABLE_RESU=CO("TSIMU")
    ),
)


### >>>>>>>>>>>>>
### >>> Tests <<<
### <<<<<<<<<<<<<

TEST_TABLE(
    NOM_PARA="SIG_LAT",
    TABLE=TSIMU,
    FILTRE=_F(NOM_PARA="EPS_AXI", VALE=epzz_max, CRITERE="ABSOLU", PRECISION=1e-7),
    VALE_CALC=50000.0,
)

TEST_TABLE(
    NOM_PARA="SIG_AXI",
    TABLE=TSIMU,
    FILTRE=_F(NOM_PARA="EPS_AXI", VALE=epzz_max, CRITERE="ABSOLU", PRECISION=1e-7),
    VALE_CALC=173287.43449891786,
)

FIN()
