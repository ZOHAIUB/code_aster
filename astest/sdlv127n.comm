# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# Fichier de commande onde plane inclinee (sur un par.ede de 200 par 400)

DEBUT(CODE="OUI")

mail = LIRE_MAILLAGE()

mail = MODI_MAILLAGE(
    reuse=mail,
    MAILLAGE=mail,
    ORIE_PEAU=_F(GROUP_MA_PEAU=("SULA", "SUB"), GROUP_MA_INTERNE=("VOLTOT",)),
)


# parametre du sol et determination des parametre du modele d'interaction sol-structure
Esol = 30000000000
Nusol = 0.25
Msol = 2450.0


# parametres materiaux du modele

sol = DEFI_MATERIAU(ELAS=_F(E=Esol, NU=Nusol, RHO=Msol))

# ------------------------------------------------------------
# Définition des chargements sur les bords
# ------------------------------------------------------------

from math import *

# Angle d'incidence positif par rapport à la verticale de propagation de l'onde (0=vertical)
a_P = 21
a2_P = radians(a_P)
cosa_P = cos(a2_P)
sina_P = sin(a2_P)

# Coordonnées du point de départ de l'onde.
z0_P = -100
y0_P = 200.0
x0_P = -150.0

z1_P = 100.0
y1_P = 200.0
x1_P = -150.0

# Angle d'incidence négatif par rapport à la verticale de propagation de l'onde (0=vertical)
a_N = -21
a2_N = radians(a_N)
cosa_N = cos(a2_N)
sina_N = sin(a2_N)

# Coordonnées du point de départ de l'onde.
z0_N = -100
y0_N = 400.0
x0_N = -150.0

z1_N = 100.0
y1_N = 400.0
x1_N = -150.0


# Angle de direction par rapport à l'axe X
# b = 90

# b2 = radians(b)
cosb = 0.0
sinb = 1.0

# Sollicitation en acceleration (ondelette de Ricker)

LINST = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=0.3, PAS=0.002))  # 1,

acce_0 = (
    DEFI_FONCTION(
        NOM_RESU="ACCE",
        NOM_PARA="INST",
        PROL_GAUCHE="CONSTANT",
        PROL_DROITE="CONSTANT",
        VALE=(
            0,
            0,
            0.014,
            0,
            0.016,
            0.0117113321616078,
            0.018,
            0.0234226643232156,
            0.02,
            0.0468453286464312,
            0.022,
            0.0936906572928623,
            0.024,
            0.187381314585725,
            0.026,
            0.368124552684678,
            0.028,
            0.535826794978997,
            0.03,
            0.684547105928689,
            0.032,
            0.809016994374947,
            0.034,
            0.90482705246602,
            0.036,
            0.968583161128631,
            0.038,
            1.0,
            0.04,
            0.992114701314478,
            0.042,
            0.951056516295154,
            0.044,
            0.876306680043864,
            0.046,
            0.770513242775789,
            0.048,
            0.63742398974869,
            0.05,
            0.481753674101716,
            0.052,
            0.309016994374948,
            0.054,
            0.125333233564304,
            0.056,
            -0.0627905195293133,
            0.058,
            -0.248689887164854,
            0.06,
            -0.425779291565073,
            0.062,
            -0.587785252292473,
            0.064,
            -0.728968627421412,
            0.066,
            -0.844327925502015,
            0.068,
            -0.929776485888251,
            0.07,
            -0.982287250728689,
            0.072,
            -1,
            0.074,
            -0.982287250728689,
            0.076,
            -0.929776485888252,
            0.078,
            -0.844327925502016,
            0.08,
            -0.728968627421412,
            0.082,
            -0.587785252292473,
            0.084,
            -0.425779291565073,
            0.086,
            -0.248689887164854,
            0.088,
            -0.124344943582427,
            0.09,
            -0.0621724717912136,
            0.092,
            -0.0310862358956068,
            0.094,
            -0.0155431179478034,
            0.096,
            0,
        ),
    ),
)


acce_1 = CALC_FONCTION(COMB=_F(FONCTION=acce_0, COEF=1.0), LIST_PARA=LINST)


vite_1 = CALC_FONCTION(INTEGRE=_F(FONCTION=acce_1))
depl_1 = CALC_FONCTION(INTEGRE=_F(FONCTION=vite_1))

CHMAT = AFFE_MATERIAU(
    MAILLAGE=mail,
    AFFE=(_F(GROUP_MA=("VOLG", "VOLD"), MATER=sol), _F(GROUP_MA=("SULA", "SUB"), MATER=sol)),
)

# ------------------------------------------------------------
# Définition des modèles
# ------------------------------------------------------------

# Modèle avec surface libre
MODELE = AFFE_MODELE(
    MAILLAGE=mail,
    AFFE=(
        _F(GROUP_MA=("VOLG", "VOLD"), PHENOMENE="MECANIQUE", MODELISATION="3D"),
        _F(GROUP_MA=("SULA", "SUB"), PHENOMENE="MECANIQUE", MODELISATION="3D_ABSO"),
    ),
)

ASSEMBLAGE(
    MODELE=MODELE,
    CHAM_MATER=CHMAT,
    NUME_DDL=CO("NUMEDDL"),
    MATR_ASSE=(
        _F(MATRICE=CO("RIGI"), OPTION="RIGI_MECA"),
        _F(MATRICE=CO("MASSE"), OPTION="MASS_MECA"),
        _F(MATRICE=CO("AMOR"), OPTION="AMOR_MECA"),
    ),
)


# Chargement SV positive incident
ONDESVP = AFFE_CHAR_MECA_F(
    MODELE=MODELE,
    ONDE_PLANE=_F(
        DIRECTION=(sina_P * cosb, sina_P * sinb, cosa_P),
        TYPE_ONDE="SV",
        FONC_SIGNAL=vite_1,
        COOR_SOURCE=(x0_P, y0_P, z0_P),
        COOR_REFLECHI=(x1_P, y1_P, z1_P),
        # DEPL_IMPO=depl_1,
        GROUP_MA=("SUB", "SULA"),
    ),
)

# Chargement SV négative incident
ONDESVN = AFFE_CHAR_MECA_F(
    MODELE=MODELE,
    ONDE_PLANE=_F(
        DIRECTION=(sina_N * cosb, sina_N * sinb, cosa_N),
        TYPE_ONDE="SV",
        FONC_SIGNAL=vite_1,
        COOR_SOURCE=(x0_N, y0_N, z0_N),
        COOR_REFLECHI=(x1_N, y1_N, z1_N),
        # DEPL_IMPO=depl_1,
        GROUP_MA=("SUB", "SULA"),
    ),
)

# Résultats avec onde S incidente
ResuS = DYNA_VIBRA(
    BASE_CALCUL="PHYS",
    TYPE_CALCUL="TRAN",
    MODELE=MODELE,
    CHAM_MATER=CHMAT,
    MATR_MASS=MASSE,
    MATR_RIGI=RIGI,
    MATR_AMOR=AMOR,
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
    INCREMENT=_F(LIST_INST=LINST),
    ARCHIVAGE=_F(LIST_INST=LINST),
    EXCIT=(_F(CHARGE=ONDESVP), _F(CHARGE=ONDESVN)),
)


axNMHS = RECU_FONCTION(
    RESULTAT=ResuS,
    GROUP_NO="NMH",
    NOM_CHAM="ACCE",
    INTERPOL="LIN",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
    LIST_INST=LINST,
    NOM_CMP="DX",
)

ayNMHS = RECU_FONCTION(
    RESULTAT=ResuS,
    GROUP_NO="NMH",
    NOM_CHAM="ACCE",
    INTERPOL="LIN",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
    LIST_INST=LINST,
    NOM_CMP="DY",
)

azNMHS = RECU_FONCTION(
    RESULTAT=ResuS,
    GROUP_NO="NMH",
    NOM_CHAM="ACCE",
    INTERPOL="LIN",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
    LIST_INST=LINST,
    NOM_CMP="DZ",
)

TEST_FONCTION(
    VALEUR=(
        _F(VALE_CALC=4.909803062375e-13, CRITERE="ABSOLU", VALE_PARA=0.15, FONCTION=axNMHS),
        _F(
            VALE_CALC=1.792538947424,
            VALE_REFE=0.89626947371078 * 2.0,
            PRECISION=3.0e-3,
            REFERENCE="ANALYTIQUE",
            CRITERE="RELATIF",
            VALE_PARA=0.15,
            FONCTION=ayNMHS,
        ),
        _F(VALE_CALC=-8.369979355189e-13, CRITERE="ABSOLU", VALE_PARA=0.15, FONCTION=azNMHS),
    )
)

FIN()
