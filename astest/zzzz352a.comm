# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

MAILL = LIRE_MAILLAGE(FORMAT="ASTER")

MATER = DEFI_MATERIAU(ELAS=_F(E=1.0, NU=0.2))
CHMAT = AFFE_MATERIAU(MAILLAGE=MAILL, AFFE=_F(TOUT="OUI", MATER=MATER))

MODEL = AFFE_MODELE(
    MAILLAGE=MAILL,
    AFFE=_F(TOUT="OUI", MODELISATION="D_PLAN", PHENOMENE="MECANIQUE"),
    DISTRIBUTION=_F(METHODE="CENTRALISE"),
)

LINST = DEFI_LIST_REEL(VALE=(0.0, 1.0))


ico = -1
for czero in (False, True):
    if czero:
        c1 = 0.0
        c2 = 0.0
        c3 = 0.0
        c4 = 0.0
        # valeur de non-regression
        vcalc = 2.45714285714
    else:
        c1 = 1.1
        c2 = 2.2
        c3 = 3.3
        c4 = 4.4
        # valeur de non-regression
        vcalc = 2.77142857143

    CHAR1 = AFFE_CHAR_MECA(
        MODELE=MODEL,
        DDL_IMPO=(_F(GROUP_NO="N1", DX=c1, DY=c2), _F(GROUP_NO="N2", DY=c3)),
        LIAISON_DDL=_F(
            GROUP_NO=("N3", "N3"), DDL=("DX", "DY"), COEF_MULT=(1.0, -1.0), COEF_IMPO=c4
        ),
        FORCE_INTERNE=_F(TOUT="OUI", FX=5.0, FY=7.0),
    )

    # Calcul de référence (MUMPS + DUALISE) :
    # -----------------------------------------
    if 1:
        REREF1 = MECA_STATIQUE(
            MODELE=MODEL, CHAM_MATER=CHMAT, SOLVEUR=_F(METHODE="MUMPS"), EXCIT=(_F(CHARGE=CHAR1),)
        )

        TN1 = POST_RELEVE_T(
            ACTION=_F(
                INTITULE="XX1",
                GROUP_NO="N3",
                OPERATION="EXTRACTION",
                RESULTAT=REREF1,
                NUME_ORDRE=1,
                NOM_CHAM="DEPL",
                NOM_CMP="DY",
            )
        )
        VREF = TN1["DY", 1]

        for method1 in ("MUMPS", "LDLT", "PETSC", "GCPC"):
            for precond in (" ", "LDLT_SP", "LDLT_INC"):
                # precond n'est utile que pour les methodes iteratives :
                if method1 in ("PETSC", "GCPC"):
                    if precond == " ":
                        continue
                else:
                    if precond != " ":
                        continue

                if method1 not in ("PETSC", "GCPC"):
                    solv1 = (_F(METHODE=method1, ELIM_LAGR="OUI"),)
                elif method1 == "PETSC":
                    solv1 = (
                        _F(
                            METHODE=method1,
                            ELIM_LAGR="OUI",
                            ALGORITHME="FGMRES",
                            PRE_COND=precond,
                            RESI_RELA=1.0e-8,
                        ),
                    )
                elif method1 == "GCPC":
                    solv1 = (
                        _F(METHODE=method1, ELIM_LAGR="OUI", PRE_COND=precond, RESI_RELA=1.0e-8),
                    )

                # Calcul MECA_STATIQUE :
                # -----------------------------------------------------
                if 1:
                    RESU1b = MECA_STATIQUE(
                        MODELE=MODEL,
                        CHAM_MATER=CHMAT,
                        INFO=2,
                        SOLVEUR=solv1,
                        EXCIT=_F(CHARGE=CHAR1),
                    )

                    TEST_RESU(
                        RESU=_F(
                            NUME_ORDRE=1,
                            GROUP_NO="N3",
                            RESULTAT=RESU1b,
                            NOM_CHAM="DEPL",
                            NOM_CMP="DY",
                            REFERENCE="AUTRE_ASTER",
                            VALE_REFE=VREF,
                            VALE_CALC=vcalc,
                        )
                    )

                    DETRUIRE(NOM=RESU1b)

                # Calcul STAT_NON_LINE :
                # ------------------------------------------------------
                if 1:
                    RESU3a = STAT_NON_LINE(
                        MODELE=MODEL,
                        CHAM_MATER=CHMAT,
                        SOLVEUR=solv1,
                        COMPORTEMENT=_F(RELATION="ELAS"),
                        INCREMENT=_F(LIST_INST=LINST),
                        EXCIT=(_F(CHARGE=CHAR1),),
                    )

                    TEST_RESU(
                        RESU=_F(
                            NUME_ORDRE=1,
                            GROUP_NO="N3",
                            RESULTAT=RESU3a,
                            NOM_CHAM="DEPL",
                            NOM_CMP="DY",
                            REFERENCE="AUTRE_ASTER",
                            VALE_REFE=VREF,
                            VALE_CALC=vcalc,
                        )
                    )

                    DETRUIRE(NOM=RESU3a)

    DETRUIRE(NOM=CHAR1)
    DETRUIRE(NOM=REREF1)
    DETRUIRE(NOM=TN1)

FIN()
