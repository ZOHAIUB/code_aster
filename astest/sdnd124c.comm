# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
#
# --------------------------------------------------------------------------------------------------
#
#                   DISCRET COMPORTEMENT ECROUISSAGE TRACTION
#
#   Validation du comportement avec DYNA_NON_LINE
#
#
# --------------------------------------------------------------------------------------------------
import numpy as NU

DEBUT(CODE="OUI")

MAIL = LIRE_MAILLAGE(FORMAT="ASTER")
#
# Modèle
Modele = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(_F(GROUP_MA=("MASSE", "GM0203", "GM0102"), PHENOMENE="MECANIQUE", MODELISATION="DIS_T"),),
)


#
ZERO = DEFI_CONSTANTE(VALE=0.0)


def Rampe(t):
    if t <= 0.0:
        return 0.0
    if t <= 5.0:
        return t / 5.0
    if t <= 15.0:
        return 1.0
    if t <= 20.0:
        return (20.0 - t) / 5.0
    return 0.0


def FDeplax(t):
    uu = 0.20
    ff = 1.0
    ww = 2.0 * NU.pi
    zz = uu * sin(ww * t * ff) * Rampe(t)
    return zz


def FDeplay(t):
    uu = [0.20, 0.15, 0.10]
    ff = [0.80, 1.50, 3.00]
    ww = 2.0 * NU.pi
    zz = 0.0
    for u, f in zip(uu, ff):
        zz += u * sin(ww * t * f) * Rampe(t)
    return zz


def FDeplaz(t):
    uu = [-0.20, 0.15, -0.10]
    ff = [0.90, 2.00, 2.80]
    ww = 2.0 * NU.pi
    zz = 0.0
    for u, f in zip(uu, ff):
        zz += u * sin(ww * t * f) * Rampe(t)
    return zz


# Fonction d'écrouissage
ldepla = NU.array([0.00, 0.100, 0.200, 20.2])
lforce = NU.array([0.00, 100.0, 120.0, 370.0])
Kp = 1000.0
Masse = 200.0

fctsy = DEFI_FONCTION(NOM_PARA="DTAN", ABSCISSE=ldepla, ORDONNEE=lforce)

# Définition des matériaux
Fusib01 = DEFI_MATERIAU(DIS_ECRO_TRAC=_F(FTAN=fctsy, ECROUISSAGE="ISOTROPE"))

CHMAT = AFFE_MATERIAU(MAILLAGE=MAIL, AFFE=(_F(GROUP_MA="GM0102", MATER=Fusib01),))

# Caractéristiques : Ressorts / Masse
caraElem = AFFE_CARA_ELEM(
    MODELE=Modele,
    DISCRET=(
        _F(REPERE="LOCAL", CARA="M_T_D_L", GROUP_MA="GM0102", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="GM0102", VALE=(Kp, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_N", GROUP_MA="MASSE", VALE=(Masse)),
        _F(REPERE="LOCAL", CARA="K_T_D_N", GROUP_MA="MASSE", VALE=(0.0, 0.0, 0.0)),
        _F(REPERE="LOCAL", CARA="M_T_D_L", GROUP_MA="GM0203", VALE=(0.0,)),
        _F(REPERE="LOCAL", CARA="K_T_D_L", GROUP_MA="GM0203", VALE=(Kp, 400.0, 400.0)),
    ),
)
#
# Liste d'instant
TempsMaxi = 20.0
DeltaPas = 0.02
# pour l'interpolation des fonctions
LinstF = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=TempsMaxi, PAS=DeltaPas / 10.0))
# pour le calcul
Linst = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=TempsMaxi, PAS=DeltaPas))
#
DEPLX = FORMULE(VALE="FDeplax(INST)", FDeplax=FDeplax, NOM_PARA="INST")
DEPLY = FORMULE(VALE="FDeplay(INST)", FDeplay=FDeplay, NOM_PARA="INST")
DEPLZ = FORMULE(VALE="FDeplaz(INST)", FDeplaz=FDeplaz, NOM_PARA="INST")
#
DEPLIX = CALC_FONC_INTERP(
    NOM_RESU="DEPLIX",
    FONCTION=DEPLX,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
DEPLIY = CALC_FONC_INTERP(
    NOM_RESU="DEPLIY",
    FONCTION=DEPLY,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
DEPLIZ = CALC_FONC_INTERP(
    NOM_RESU="DEPLIZ",
    FONCTION=DEPLZ,
    LIST_PARA=LinstF,
    NOM_PARA="INST",
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)
#
CONDLIM = AFFE_CHAR_MECA_F(
    MODELE=Modele,
    DDL_IMPO=(
        _F(GROUP_NO="N01", DX=DEPLIX, DY=DEPLIY, DZ=DEPLIZ),
        _F(GROUP_NO="N03", DX=DEPLIX, DY=DEPLIY, DZ=DEPLIZ),
    ),
)
#
DEPL0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
VITE0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
ACCE0 = CREA_CHAMP(
    TYPE_CHAM="NOEU_DEPL_R",
    OPERATION="AFFE",
    MODELE=Modele,
    AFFE=_F(NOM_CMP=("DX", "DY", "DZ"), TOUT="OUI", VALE=(0.0, 0.0, 0.0)),
)
#
LLinst = DEFI_LIST_INST(DEFI_LIST=_F(LIST_INST=Linst))
# --------------------------------------------------------------------------------------------------
#
RESU = DYNA_NON_LINE(
    MODELE=Modele,
    CHAM_MATER=CHMAT,
    CARA_ELEM=caraElem,
    EXCIT=(_F(CHARGE=CONDLIM),),
    ETAT_INIT=_F(DEPL=DEPL0, VITE=VITE0, ACCE=ACCE0),
    COMPORTEMENT=(_F(RELATION="ELAS", TOUT="OUI"), _F(RELATION="DIS_ECRO_TRAC", GROUP_MA="GM0102")),
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK", FORMULATION="DEPLACEMENT"),
    INCREMENT=_F(LIST_INST=LLinst),
    CONVERGENCE=_F(ITER_GLOB_MAXI=30, RESI_REFE_RELA=1.0e-06, EFFORT_REFE=1.0),
    NEWTON=_F(REAC_INCR=1, REAC_ITER=1, MATRICE="TANGENTE"),
)
# --------------------------------------------------------------------------------------------------
#   Résultat sur Fusib01
TABVARI1 = CREA_TABLE(
    RESU=_F(RESULTAT=RESU, GROUP_MA="GM0102", NOM_CHAM="VARI_ELGA", TOUT_CMP="OUI")
)
TABVARI1 = CALC_TABLE(
    reuse=TABVARI1,
    TABLE=TABVARI1,
    ACTION=(
        _F(OPERATION="FILTRE", NOM_PARA="POINT", CRIT_COMP="EQ", VALE=2),
        _F(OPERATION="EXTR", NOM_PARA=("NUME_ORDRE", "INST", "V2", "V3", "V5", "V6", "V7", "V8")),
    ),
)
#
"""
IMPR_RESU(FORMAT='RESULTAT', RESU=_F(RESULTAT=RESU,),)

IMPR_TABLE(UNITE=38, TABLE=TABVARI1, FORMAT_R='E17.10')
Lordre = [9, 32, 62, 85, 117, 139, 187, 239, 272, 307, 361, 385, 406, 428, 468, 493, 519, 549,
          584, 603, 639, 687, 728, 760, 793, 818, 861, 905, 937, 981, ]
IMPR_TABLE(UNITE=39, TABLE=TABVARI1, FORMAT_R='E17.10',
           FILTRE=_F(NOM_PARA='NUME_ORDRE',CRIT_COMP='EQ',VALE_I=Lordre,CRITERE='ABSOLU'))
"""
#
# NUME_ORDRE
#       INST      V2                 V3                 V5                 V6                 V7                 V8
ResuIntgr = {
    9: (
        1.800e-01,
        -9.7633895513e00,
        1.8038422368e00,
        -9.7633895513e-03,
        1.8038422368e-03,
        0.0000000000e00,
        0.0000000000e00,
    ),
    32: (
        6.400e-01,
        2.0821931661e01,
        -5.1264889113e01,
        2.0821931661e-02,
        -5.1264889113e-02,
        0.0000000000e00,
        0.0000000000e00,
    ),
    62: (
        1.240e00,
        4.1626483116e01,
        5.0633319923e01,
        4.1626483116e-02,
        5.0633319923e-02,
        0.0000000000e00,
        0.0000000000e00,
    ),
    85: (
        1.700e00,
        -3.2231150261e01,
        -1.1399632514e02,
        -8.3140173234e-02,
        -7.5177804695e-02,
        8.0680147227e00,
        7.3860803875e-02,
    ),
    117: (
        2.340e00,
        2.2504389173e01,
        1.1966223612e02,
        4.7912270497e-02,
        1.6452171628e-01,
        2.5606562147e01,
        2.1903503314e-01,
    ),
    139: (
        2.780e00,
        -1.2211618691e02,
        -2.2044702233e01,
        -2.7783649255e-01,
        -3.9405007723e-03,
        4.8234093775e01,
        4.0311097913e-01,
    ),
    187: (
        3.740e00,
        -9.5194295636e01,
        9.3945576532e-01,
        3.1202365845e-02,
        4.4600550676e-02,
        1.3884293065e02,
        1.1079579739e00,
    ),
    239: (
        4.780e00,
        -1.0894989836e02,
        1.0726478816e02,
        7.3836152303e-02,
        3.1407811796e-01,
        3.6334449444e02,
        2.6784280860e00,
    ),
    272: (
        5.440e00,
        -1.1053483936e02,
        1.1843056456e02,
        -3.5188340421e-01,
        1.6225802730e-01,
        4.7662808708e02,
        3.3979385976e00,
    ),
    307: (
        6.140e00,
        -1.6177312429e02,
        -7.4171819930e01,
        -1.5080943520e-01,
        2.5530053558e-02,
        6.9104395976e02,
        4.6593362918e00,
    ),
    361: (
        7.220e00,
        1.9553791151e02,
        1.5079957322e01,
        4.8212900654e-01,
        1.5196785446e-01,
        9.5926794696e02,
        6.0933639311e00,
    ),
    385: (
        7.700e00,
        -1.6371458452e02,
        -1.1473511939e02,
        -1.3821060484e-01,
        -1.2491585241e-01,
        1.0186809086e03,
        6.3934028529e00,
    ),
    406: (
        8.120e00,
        -8.0570801634e01,
        -1.8835461610e02,
        -9.0475591891e-02,
        1.4788165343e-02,
        1.0977800828e03,
        6.7842281699e00,
    ),
    428: (
        8.560e00,
        1.0408441800e02,
        -1.8510822165e02,
        5.2645300972e-01,
        -2.9296458041e-01,
        1.2213955202e03,
        7.3767839421e00,
    ),
    468: (
        9.360e00,
        -2.1923242176e01,
        2.1959773618e02,
        -6.7181616084e-02,
        3.1761898411e-01,
        1.3637997649e03,
        8.0344586537e00,
    ),
    493: (
        9.860e00,
        1.9139822713e02,
        9.8358454813e01,
        2.6884135468e-01,
        -1.8870204387e-01,
        1.4552306761e03,
        8.4439465997e00,
    ),
    519: (
        1.038e01,
        -7.3997242634e01,
        2.1976682128e02,
        -3.8088222711e-01,
        1.7028139437e-01,
        1.5640354387e03,
        8.9193226554e00,
    ),
    549: (
        1.098e01,
        1.8796891290e02,
        -6.8006052137e01,
        1.2683610857e-01,
        -4.2416434932e-01,
        1.6588784564e03,
        9.3238558649e00,
    ),
    584: (
        1.168e01,
        3.2800909810e01,
        -2.4492171839e02,
        -2.0990075709e-01,
        -3.5548508258e-01,
        1.8519704177e03,
        1.0121560052e01,
    ),
    603: (
        1.206e01,
        -1.9109817394e01,
        -2.5044367662e02,
        1.0619206919e-02,
        -3.6597273845e-01,
        1.9319452867e03,
        1.0442563736e01,
    ),
    639: (
        1.278e01,
        -2.5744349236e02,
        -2.7748608055e01,
        -4.6891171223e-01,
        1.0215597073e-01,
        2.0883619103e03,
        1.1055834391e01,
    ),
    687: (
        1.374e01,
        -1.6892626792e02,
        2.1476137932e01,
        7.5020020478e-02,
        6.9304368867e-02,
        2.3122496197e03,
        1.1902943872e01,
    ),
    728: (
        1.456e01,
        2.7492756470e02,
        -7.1443454227e01,
        6.0580318180e-01,
        -2.2269184160e-01,
        2.6272283953e03,
        1.3040634182e01,
    ),
    760: (
        1.520e01,
        -9.5973725076e01,
        -2.7136331712e02,
        5.1797642466e-02,
        -4.1152663672e-01,
        2.7125358620e03,
        1.3338967482e01,
    ),
    793: (
        1.586e01,
        2.2858412505e02,
        1.8846691514e02,
        4.1246326546e-01,
        4.2850298674e-01,
        2.9069337436e03,
        1.4004604375e01,
    ),
    818: (
        1.636e01,
        -2.3253685364e02,
        -1.8426702510e02,
        -7.1677836127e-02,
        3.0483058069e-02,
        2.9170952532e03,
        1.4038878481e01,
    ),
    861: (
        1.722e01,
        2.9872371214e02,
        9.3716379796e00,
        4.8525893309e-01,
        2.9752110048e-01,
        2.9682854007e03,
        1.4210782859e01,
    ),
    905: (
        1.810e01,
        -2.1708726833e02,
        -1.5560564254e02,
        -3.0552047379e-02,
        1.3254381996e-01,
        2.9682854007e03,
        1.4210782859e01,
    ),
    937: (
        1.874e01,
        -1.3097785757e02,
        -1.3702467312e02,
        5.5557363379e-02,
        1.5112478939e-01,
        2.9682854007e03,
        1.4210782859e01,
    ),
    981: (
        1.962e01,
        3.4728533880e01,
        -5.2443758611e01,
        2.2126375483e-01,
        2.3570570389e-01,
        2.9682854007e03,
        1.4210782859e01,
    ),
}

Lpara = [("V2", 1), ("V3", 2), ("V5", 3), ("V6", 4), ("V7", 5), ("V8", 6)]
for nume_ordre in list(ResuIntgr.keys()):
    for para, indx in Lpara:
        TEST_TABLE(
            TABLE=TABVARI1,
            FILTRE=_F(NOM_PARA="NUME_ORDRE", CRIT_COMP="EQ", VALE_I=nume_ordre),
            NOM_PARA=para,
            VALE_CALC=ResuIntgr[nume_ordre][indx],
            VALE_REFE=ResuIntgr[nume_ordre][indx],
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-06,
        )

FIN()
