# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: hassan.berro at edf.fr

from math import pi
import numpy as np

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

#################################################
##############Model Illustration#################
#################################################
#    _______________________________________
#   |              --> x-axis               |
#   | K                                  K  |
#   |vvvv(M_left)  (M_center)  (M_right)vvvv|
#   |         \       /  \       /          |
#   |          \flam1/    \flam2/           |
#   |---------------------------------------|

#################################################
##############Study Parameters###################
#################################################
# General characteristics
M_center = 10.0  # [kg]
M_left = 4.5  # [kg]
M_right = 3.7  # [kg]
K_outer = 1.0e3  # [N/m]
t0 = 0.00  # [s]
t1 = 1.00  # [s]
dt = 1.0e-6  # [s]
freq = 2.00  # [Hz] charging frequency (sinusoidal function on central node)
ampl = 500.00  # [N]  charging amplitude

# Nonlinearity-specific characteristics
Kn_left = 1.00  # [N/m]
Kn_right = 5.00  # [N/m]

Kn_buck = 2.50  # [N/m]
Fn_crit = 0.50  # [N]
Fn_buck = 0.25  # [N]

# Automatically calculated
om = 2.0 * pi * freq
#################################################
# Conversion of FLAMBAGE parameters to functions (buckling threshold, stiffness and damping)


def convertBucklingParameters(
    KN,
    F_max,
    F_max2,
    AMOR_NOR,
    AMOR_FL,
    LARG_PLAT,
    ENFO_FL,
    DEPL_POST_FL,
    RIGI_POST_FL,
    AMOR_POST_FL,
):
    # Calcul de la liste de deformation totale
    DEPL_TOT_POST_FL = [j + F_max2 / RIGI_POST_FL[i] for i, j in enumerate(DEPL_POST_FL)]

    # Listes pour un calcul en base physique
    utot = []
    crit = []
    kchoc = []
    cchoc = []

    # Point 0
    utot.append(0.0)
    crit.append(F_max)
    kchoc.append(KN)
    cchoc.append(AMOR_NOR)

    # debut du plateau
    utot.append(F_max / KN)
    crit.append(F_max)
    kchoc.append(KN)
    cchoc.append(AMOR_NOR)

    # bout du plateau
    utot.append(F_max / KN + LARG_PLAT)
    crit.append(F_max)
    kchoc.append(KN)
    cchoc.append(AMOR_NOR)

    # Pendant le flambage
    nb = 500
    eps = 1e-12
    u = np.linspace(
        F_max / KN + LARG_PLAT + eps, F_max / KN + LARG_PLAT + ENFO_FL, nb, endpoint=True
    )
    for i in range(len(u)):
        f = F_max - ((F_max2 - F_max) / ENFO_FL) * (-u[i] + F_max / KN + LARG_PLAT)
        c = AMOR_NOR - ((AMOR_FL - AMOR_NOR) / ENFO_FL) * (-u[i] + F_max / KN + LARG_PLAT)
        utot.append(u[i])
        crit.append(f)
        kchoc.append(f / (u[i] - LARG_PLAT))
        cchoc.append(c)

    # Entre fl et 1er point
    u = np.linspace(F_max / KN + LARG_PLAT + ENFO_FL + eps, DEPL_TOT_POST_FL[0], nb, endpoint=False)
    for i in range(len(u)):
        alpha = (u[i] - (F_max / KN + LARG_PLAT + ENFO_FL)) / (
            DEPL_TOT_POST_FL[0] - (F_max / KN + LARG_PLAT + ENFO_FL)
        )
        defpla = (LARG_PLAT) + alpha * (DEPL_POST_FL[0] - (LARG_PLAT))
        rigifl = F_max2 / (u[i] - defpla)
        cfl = AMOR_FL + alpha * (AMOR_POST_FL[0] - AMOR_FL)
        utot.append(u[i])
        crit.append(F_max2)
        kchoc.append(rigifl)
        cchoc.append(cfl)

    # Apres flambage
    for i in range(len(DEPL_POST_FL) - 1):
        u = np.linspace(
            DEPL_TOT_POST_FL[i] + eps, DEPL_TOT_POST_FL[i + 1] + eps, nb, endpoint=False
        )
        for j in range(len(u)):
            alpha = (u[j] - DEPL_TOT_POST_FL[i]) / (DEPL_TOT_POST_FL[i + 1] - DEPL_TOT_POST_FL[i])
            defpla = DEPL_POST_FL[i] + alpha * (DEPL_POST_FL[i + 1] - DEPL_POST_FL[i])
            rigifl = F_max2 / (u[j] - defpla)
            cfl = AMOR_POST_FL[i] + alpha * (AMOR_POST_FL[i + 1] - AMOR_POST_FL[i])
            utot.append(u[j])
            crit.append(F_max2)
            kchoc.append(rigifl)
            cchoc.append(cfl)

    SEUIL = DEFI_FONCTION(
        NOM_PARA="DX",
        ABSCISSE=(utot),
        ORDONNEE=(crit),
        PROL_DROITE="CONSTANT",
        PROL_GAUCHE="CONSTANT",
    )

    RIGI = DEFI_FONCTION(
        NOM_PARA="DX",
        ABSCISSE=(utot),
        ORDONNEE=(kchoc),
        PROL_DROITE="CONSTANT",
        PROL_GAUCHE="CONSTANT",
    )

    AMOR = DEFI_FONCTION(
        NOM_PARA="DX",
        ABSCISSE=(utot),
        ORDONNEE=(cchoc),
        PROL_DROITE="CONSTANT",
        PROL_GAUCHE="CONSTANT",
    )

    return SEUIL, RIGI, AMOR


#
KN = 1.0
AMOR_NOR = 0.0
AMOR_FL = 0.0
LARG_PLAT = 1e-7
ENFO_FL = 1e-8
DEPL_POST_FL = [1.0]
RIGI_POST_FL = [Kn_buck]
AMOR_POST_FL = [0.0]

SEUIL_L, RIGI_L, AMOR_L = convertBucklingParameters(
    Kn_left,
    Fn_crit,
    Fn_buck,
    AMOR_NOR,
    AMOR_FL,
    LARG_PLAT,
    ENFO_FL,
    DEPL_POST_FL,
    RIGI_POST_FL,
    AMOR_POST_FL,
)

SEUIL_R, RIGI_R, AMOR_R = convertBucklingParameters(
    Kn_right,
    Fn_crit,
    Fn_buck,
    AMOR_NOR,
    AMOR_FL,
    LARG_PLAT,
    ENFO_FL,
    DEPL_POST_FL,
    RIGI_POST_FL,
    AMOR_POST_FL,
)


#################################################


MESH = LIRE_MAILLAGE(FORMAT="ASTER")

MODEL = AFFE_MODELE(MAILLAGE=MESH, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="DIS_T"))

ELEM_CH = AFFE_CARA_ELEM(
    MODELE=MODEL,
    DISCRET=(
        _F(GROUP_MA="CENTER", CARA="M_T_D_N", VALE=(M_center)),
        _F(GROUP_MA="LEFT", CARA="M_T_D_N", VALE=M_left),
        _F(GROUP_MA="RIGHT", CARA="M_T_D_N", VALE=M_right),
        _F(GROUP_MA="OUTER", CARA="K_T_D_L", VALE=(K_outer, 0.0, 0.0)),
        _F(GROUP_MA="DUMMY", CARA="M_T_D_L", VALE=(0.0)),
        _F(
            GROUP_MA="DUMMY", CARA="K_T_D_L", VALE=(1.0e-12, 0.0, 0.0)
        ),  # fictional springs, used for constructing the dynamics basis
        _F(GROUP_MA="DUMMY", CARA="M_T_D_L", VALE=(0.0)),
    ),
)

COND_2D = AFFE_CHAR_MECA(MODELE=MODEL, DDL_IMPO=(_F(TOUT="OUI", DY=0.0, DZ=0.0)))

BND_COND = AFFE_CHAR_MECA(MODELE=MODEL, DDL_IMPO=(_F(GROUP_NO="BOUND", DX=0.0)))

##########################################################

K_ELEM = CALC_MATR_ELEM(
    MODELE=MODEL, CHARGE=(COND_2D, BND_COND), CARA_ELEM=ELEM_CH, OPTION="RIGI_MECA"
)

M_ELEM = CALC_MATR_ELEM(
    MODELE=MODEL, CHARGE=(COND_2D, BND_COND), CARA_ELEM=ELEM_CH, OPTION="MASS_MECA"
)

EQ_NBRG = NUME_DDL(MATR_RIGI=K_ELEM)

MAT_K = ASSE_MATRICE(MATR_ELEM=K_ELEM, NUME_DDL=EQ_NBRG)

MAT_M = ASSE_MATRICE(MATR_ELEM=M_ELEM, NUME_DDL=EQ_NBRG)

BASIS = CALC_MODES(
    MATR_RIGI=MAT_K, MATR_MASS=MAT_M, OPTION="PLUS_PETITE", CALC_FREQ=_F(NMAX_FREQ=5)
)

RED_NBRG = NUME_DDL_GENE(BASE=BASIS, STOCKAGE="DIAG")

##########################################################

CHAR_UFX = AFFE_CHAR_MECA(MODELE=MODEL, FORCE_NODALE=_F(GROUP_NO="CENTER", FX=1.0))

VECT_UFX = CALC_VECT_ELEM(CHARGE=CHAR_UFX, OPTION="CHAR_MECA")

UNIT_FX = ASSE_VECTEUR(VECT_ELEM=VECT_UFX, NUME_DDL=EQ_NBRG)

UFX_RED = PROJ_VECT_BASE(BASE=BASIS, VECT_ASSE=UNIT_FX, NUME_DDL_GENE=RED_NBRG, TYPE_VECT="FORC")

M_RED = PROJ_MATR_BASE(BASE=BASIS, MATR_ASSE=MAT_M, NUME_DDL_GENE=RED_NBRG)

K_RED = PROJ_MATR_BASE(BASE=BASIS, MATR_ASSE=MAT_K, NUME_DDL_GENE=RED_NBRG)


FLOOR = DEFI_OBSTACLE(TYPE="BI_PLAN_Y")


SINE_FOR = FORMULE(VALE="ampl * sin ( om*INST )", ampl=ampl, om=om, NOM_PARA="INST")


INSTANTS = DEFI_LIST_REEL(DEBUT=t0 - dt, INTERVALLE=_F(JUSQU_A=t1 + dt, PAS=dt))

FX_TFUNC = CALC_FONC_INTERP(FONCTION=SINE_FOR, LIST_PARA=INSTANTS, NOM_PARA="INST")

INTEGR = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    SCHEMA_TEMPS=_F(SCHEMA="DIFF_CENTRE"),
    MATR_MASS=M_RED,
    MATR_RIGI=K_RED,
    AMOR_MODAL=_F(AMOR_REDUIT=0.0),
    INCREMENT=_F(INST_INIT=t0, INST_FIN=t1, PAS=dt),
    EXCIT=_F(VECT_ASSE_GENE=UFX_RED, FONC_MULT=FX_TFUNC),
    COMPORTEMENT=(
        _F(
            RELATION="FLAMBAGE",
            GROUP_NO_1="CENTER",
            GROUP_NO_2="LEFT",
            OBSTACLE=FLOOR,
            NORM_OBST=(0.0, -1.0, 0.0),
            JEU=0.0,
            FX=SEUIL_L,
            RIGI_NOR=RIGI_L,
            AMOR_NOR=AMOR_L,
        ),
        _F(
            RELATION="FLAMBAGE",
            GROUP_NO_1="CENTER",
            GROUP_NO_2="RIGHT",
            OBSTACLE=FLOOR,
            NORM_OBST=(0.0, 1.0, 0.0),
            JEU=0.0,
            FX=SEUIL_L,
            RIGI_NOR=RIGI_L,
            AMOR_NOR=AMOR_L,
        ),
    ),
    ARCHIVAGE=_F(PAS_ARCH=10),
    TRAITEMENT_NONL="EXPLICITE",
    INFO=2,
)

INTEGR.INFO_NONL()

TEST_F = RECU_FONCTION(RESU_GENE=INTEGR, GROUP_NO_CHOC="RIGHT", PARA_X="INST", PARA_Y="VINT9")

TEST_FONCTION(
    VALEUR=(_F(VALE_CALC=3.768151840445, CRITERE="RELATIF", VALE_PARA=t1, FONCTION=TEST_F))
)


FIN()
