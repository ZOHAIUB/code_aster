# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#####################################################################################
# CODE_ASTER COMMANDS FILE AUTOMATICALLY GENERATED BY PI, SALOME_MECA PIPING MODULE
#####################################################################################
#
# LOADING CASE : LCAS_1 /  (Operating weight)

from code_aster.Commands import *
from code_aster import CA

DEBUT(CODE="OUI")
test = CA.TestCase()
#
# MESH AND FE-MODEL DEFINITIONS ##########
MESH = LIRE_MAILLAGE(FORMAT="MED")
MESH = MODI_MAILLAGE(
    reuse=MESH,
    MAILLAGE=MESH,
    ECHELLE=1.0e-3,
    # ABSC_CURV = _F(NOEUD_ORIG = 'PT_5',
    #               GROUP_MA   = ['BEAM_PT_10', 'RIGD_PT_20', 'BEAM_PT_30'])
)
#
#
MODEL = AFFE_MODELE(
    MAILLAGE=MESH,
    AFFE=(
        _F(GROUP_MA=["BEAM_PT_10", "BEAM_PT_30"], PHENOMENE="MECANIQUE", MODELISATION="POU_D_T"),
        _F(GROUP_MA=["RIGD_PT_20"], PHENOMENE="MECANIQUE", MODELISATION="POU_D_T"),
    ),
)
#
# MATERIAL DEFINITIONS ##########
#
# MAT_1 : Mat 3 (Elastic)
MAT_1 = DEFI_MATERIAU(ELAS=_F(E=200 * 1.0e9, NU=0.3, RHO=0.01))
#
# MAT_2 : Mat 4 (Elastic)
MAT_2 = DEFI_MATERIAU(ELAS=_F(E=100000.0 * 1.0e9, NU=0.2, RHO=1e-20))
#
# ASSIGNING MATERIAL TO ELEMENTS ##########
MATER_F = AFFE_MATERIAU(
    MAILLAGE=MESH,
    AFFE=(
        _F(GROUP_MA=["BEAM_PT_10", "BEAM_PT_30"], MATER=MAT_1),
        _F(GROUP_MA=["RIGD_PT_20"], MATER=MAT_2),
    ),
)
#
# FINITE ELEMENTS CARACTERISTICS (DIAMETER, THICKNESS) ##########
FE_CAR = AFFE_CARA_ELEM(
    MODELE=MODEL,
    POUTRE=(
        _F(
            GROUP_MA=["BEAM_PT_10", "BEAM_PT_30"],
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX", "AY", "AZ"),
            VALE=(
                100000000.0 * 1.0e-6,
                100000000000.0 * 1.0e-12,
                13333.33 * 1.0e-12,
                200000000000.0 * 1.0e-12,
                1e-20,
                1e-20,
            ),
        ),
        _F(
            GROUP_MA=["RIGD_PT_20"],
            SECTION="CERCLE",
            CARA=("R", "EP"),
            VALE=(100.0 * 0.5e-3, 10.0 * 1.0e-3),
        ),
    ),
    COQUE=(),
    ORIENTATION=(),
    DISCRET=(),
)
#
# MECHANICAL BOUNDARY CONDITIONS ##########
BOUND_C = AFFE_CHAR_MECA(
    MODELE=MODEL,
    DDL_IMPO=(
        _F(GROUP_NO="ANCH_PT_5", LIAISON="ENCASTRE"),
        _F(GROUP_NO="ANCH_PT_30", LIAISON="ENCASTRE"),
    ),
    DDL_POUTRE=(),
    LIAISON_DDL=(),
    # THERMAL STRATIFICATION (FANNY)
    PRE_EPSI=(
        # KY and KZ are exchanged because of the local axis chosen (local Y and local Z are axchanged)
    ),
)
#
# EXTERNAL FORCES AND CHARGING #############
#
# FOR_3 : FORC_PT_10_CA_1 (Force)
FOR_3 = AFFE_CHAR_MECA(
    MODELE=MODEL, FORCE_NODALE=_F(GROUP_NO="FORC_PT_10_CA_1", FX=0.0, FY=-1000.0, FZ=0.0)
)
#
# DFOR_1 : GRAVITY (Gravity / Constant acceleration)
DFOR_1 = AFFE_CHAR_MECA(
    MODELE=MODEL,
    PESANTEUR=_F(
        GROUP_MA=["BEAM_PT_10", "RIGD_PT_20", "BEAM_PT_30"],
        GRAVITE=9.81,
        DIRECTION=(0.0, -1.0, 0.0),
    ),
)
#
# LINEAR STATIC SOLVER ####################
STATIC = MECA_STATIQUE(
    MODELE=MODEL,
    CHAM_MATER=MATER_F,
    CARA_ELEM=FE_CAR,
    EXCIT=(_F(CHARGE=BOUND_C), _F(CHARGE=FOR_3), _F(CHARGE=DFOR_1)),
    SOLVEUR=_F(RESI_RELA=1e-05, NPREC=-1, ACCELERATION="FR"),
)
#
# EXTRA FIELD CALCULATIONS FROM THE RESULT AND THE FE-MODEL #########
elem_groups = ["BEAM_PT_10", "RIGD_PT_20", "BEAM_PT_30"]
pts_groups = ["PT_5", "PT_10", "PT_20", "PT_30", "ANCH_PT_5", "ANCH_PT_30", "FORC_PT_10_CA_1"]
MESH = DEFI_GROUP(reuse=MESH, MAILLAGE=MESH, CREA_GROUP_NO=_F(NOM="ALL_PTS", UNION=pts_groups))
STATIC = CALC_CHAMP(
    reuse=STATIC,
    RESULTAT=STATIC,
    MODELE=MODEL,
    CHAM_MATER=MATER_F,
    CARA_ELEM=FE_CAR,
    GROUP_MA=elem_groups,
    # TOUT       = 'OUI',
    CONTRAINTE=("EFGE_ELNO"),
    FORCE=("REAC_NODA", "FORC_NODA"),
)

# TEST DEPL
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            GROUP_NO="PT_10",
            RESULTAT=STATIC,
            VALE_CALC=-0.12745267727512996,
            VALE_REFE=-125 / 1000.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=2.0,
        ),
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="DEPL",
            NOM_CMP="DY",
            GROUP_NO="PT_20",
            RESULTAT=STATIC,
            VALE_CALC=-0.12745267727512996,
            VALE_REFE=-125 / 1000.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=2.0,
        ),
    )
)


# TEST efforts et reaction
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="REAC_NODA",
            NOM_CMP="DY",
            GROUP_NO="PT_5",
            RESULTAT=STATIC,
            VALE_CALC=519.6199912806021,
            VALE_REFE=500.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=4.0,
        ),
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="REAC_NODA",
            NOM_CMP="DRZ",
            GROUP_NO="PT_5",
            RESULTAT=STATIC,
            VALE_CALC=513.0801880696823,
            VALE_REFE=500.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=3.0,
        ),
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="REAC_NODA",
            NOM_CMP="DY",
            GROUP_NO="PT_30",
            RESULTAT=STATIC,
            VALE_CALC=519.6199912806021,
            VALE_REFE=500.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=4.0,
        ),
        _F(
            NUME_ORDRE=1,
            NOM_CHAM="REAC_NODA",
            NOM_CMP="DRZ",
            GROUP_NO="PT_30",
            RESULTAT=STATIC,
            VALE_CALC=513.0801880696823,
            VALE_REFE=500.0,
            REFERENCE="SOURCE_EXTERNE",
            CRITERE="RELATIF",
            PRECISION=3.0,
        ),
    )
)

# SIMPLE COMBINATION TEST (#issue33924)
COEF_TAB = CREA_TABLE(
    LISTE=(
        _F(LISTE_K=["C.0"], PARA="Cmb", TYPE_K="K24"),
        _F(LISTE_R=[1.0], PARA="L1"),
        _F(LISTE_R=[3.0], PARA="L2"),
    )
)
#
COMB_RESULT = POST_COMBINAISON(
    MODELE=MODEL,
    TABLE_COEF=COEF_TAB,
    TYPE_COMB="RESULTAT",
    NOM_CHAM=("EFGE_ELNO",),
    AFFE=(_F(NOM_CAS="L1", RESULTAT=STATIC), _F(NOM_CAS="L2", RESULTAT=STATIC)),
    TABLE_COEF_RESU=CO("coefs"),
)

diff = (4.0 * STATIC.getField("EFGE_ELNO", 1)) - COMB_RESULT.getField("EFGE_ELNO", 1)
test.assertLess(diff.norm("NORM_INFINITY"), 1.0e-6, msg="norm of difference")

tbpy = coefs.EXTR_TABLE()
test.assertEqual(len(tbpy), 1, msg="number of lines")
test.assertAlmostEqual(tbpy.L1[0], 1.0, msg="L1 value")
test.assertAlmostEqual(tbpy.L2[0], 3.0, msg="L2 value")

test.printSummary()

FIN()
