# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))
# ----------------------------------------------
#                   PARAMETRES
# ----------------------------------------------

# **********************************************
#    GEOMETRIE (A modifier avec le maillage)
#
# EPAISSEUR DE L EPROUVETTE SELON X
B = 1.0
# DEMI-LONGUEUR DE L EPROUVETTE SELON Y
W = 5.0
# DEMI-LONGUEUR DE L EPROUVETTE SELON Z
L = 10.0
# **********************************************

# *********************************************************
#          BLOCAGE DES MODES RIGIDES ET SYMETRIE
#
# PRECISION POUR LES CREA_GROUP_NO
PRECIS = 1.0e-5
#
# LONGUEUR D ARETE AUTOUR DES NOEUDS A BLOQUER
#  (inutile si blocage = 1)
LAR = 2.0
#
blocage = 1
#
# blocage=1 :
#  Le nombre d elements exterieur selon z est pair
#  On bloque les ddls sur trois noeuds
#
# blocage=2 :
#  Le nombre d elements exterieur selon z est impair
#  On bloque trois noeuds par rapport a leurs symetriques
# *********************************************************

# DEMI-LONGUEUR DE LA FISSURE CENTRALE
A = 1.0

# ANGLE D INCLINAISON DE LA FISSURE CENTRALE
ALPHA = 0.0 * pi / 180.0

# COURONNES POUR LE CALCUL DES SIF
RI = [0.1, 0.2, 0.1]
RS = [0.2, 0.3, 0.3]

# PROPRIETES DE L ACIER UTILISE
E = 1.0e6
nu = 0.0
rho = 7800.0

# COEFFICIENT DE FROTTEMENT
COULOM = 0.0

# ACTIVATION DE L ALGO_LAGR DE DEFI_FISS_XFEM
ALGOLAG = "VERSION1"

# K1 ANALYTIQUES DU TEST DE BUI
K1REF = 0.8862925 * A ** (3 / 2.0)


GREF = (1 - nu**2) / E * K1REF**2


# ************************************************************
#  PRESSION APPLIQUEE SUR LES FACES INFERIEURE ET SUPERIEURE
#
fonction = 1
# fonction=0 : la pression PRES est constante
# fonction=1 : la pression PRES est une fonction de l espace
#
PRES = -1.0
FCTPRES = FORMULE(VALE="PRES*X", PRES=PRES, NOM_PARA=["X", "Y"])
# ************************************************************


# ----------------------------------------------
#                   MAILLAGE
# ----------------------------------------------

MAILLAG0 = LIRE_MAILLAGE(FORMAT="MED")

MAILLAG1 = CREA_MAILLAGE(MAILLAGE=MAILLAG0, LINE_QUAD=_F(TOUT="OUI"))
if blocage == 1:
    PT1 = [-W, 0.0]
    PT2 = [W, 0.0]
elif blocage == 2:
    PT1 = [-W, -LAR / 2]
    PT2 = [W, -LAR / 2]
    PT1S = [-W, LAR / 2]
    PT2S = [W, LAR / 2]

MAILLAG1 = DEFI_GROUP(
    reuse=MAILLAG1,
    MAILLAGE=MAILLAG1,
    CREA_GROUP_NO=(
        _F(NOM="NOEUD1", OPTION="ENV_SPHERE", POINT=PT1, PRECISION=PRECIS, RAYON=PRECIS),
        _F(NOM="NOEUD2", OPTION="ENV_SPHERE", POINT=PT2, PRECISION=PRECIS, RAYON=PRECIS),
    ),
    INFO=1,
)

if blocage == 2:
    MAILLAG1 = DEFI_GROUP(
        reuse=MAILLAG1,
        MAILLAGE=MAILLAG1,
        CREA_GROUP_NO=(
            _F(
                NOM="NOEUD1S",
                OPTION="ENV_SPHERE",
                POINT=(PT1S[0], PT1S[1], PT1S[2]),
                PRECISION=PRECIS,
                RAYON=PRECIS,
            ),
            _F(
                NOM="NOEUD2S",
                OPTION="ENV_SPHERE",
                POINT=(PT2S[0], PT2S[1], PT2S[2]),
                PRECISION=PRECIS,
                RAYON=PRECIS,
            ),
        ),
        INFO=1,
    )


MAILLAG1 = DEFI_GROUP(
    reuse=MAILLAG1,
    MAILLAGE=MAILLAG1,
    CREA_GROUP_NO=(
        _F(
            NOM="NFISSU",
            OPTION="PLAN",
            POINT=(0.0, 0.0),
            VECT_NORMALE=(-sin(ALPHA), cos(ALPHA)),
            PRECISION=PRECIS,
        ),
    ),
    INFO=2,
)

# ----------------------------------------------
#                   MODELE
# ----------------------------------------------

MAILLAG1 = MODI_MAILLAGE(
    reuse=MAILLAG1,
    MAILLAGE=MAILLAG1,
    ORIE_PEAU=_F(GROUP_MA_PEAU=("SURFSUP", "SURFINF", "SURFDRO", "SURFGAU")),
)

MODELEIN = AFFE_MODELE(
    MAILLAGE=MAILLAG1,
    AFFE=(
        _F(
            GROUP_MA=("VOL", "SURFSUP", "SURFINF", "SURFDRO", "SURFGAU"),
            PHENOMENE="MECANIQUE",
            MODELISATION="D_PLAN",
        ),
    ),
)

# ----------------------------------------------
#                   FISSURE
# ----------------------------------------------

LN = FORMULE(VALE="Y*cos(ALPHA)-X*sin(ALPHA)", ALPHA=ALPHA, NOM_PARA=["X", "Y"])
LT = FORMULE(VALE="abs(Y*sin(ALPHA)+X*cos(ALPHA))-A", ALPHA=ALPHA, A=A, NOM_PARA=["X", "Y"])

FISS = DEFI_FISS_XFEM(
    MAILLAGE=MAILLAG1,
    DEFI_FISS=_F(FONC_LT=LT, FONC_LN=LN),
    GROUP_MA_ENRI="VOL",
    TYPE_ENRI_FOND="GEOMETRIQUE",
    RAYON_ENRI=0.5,
)

# ----------------------------------------------
#               MODELE FISSURE
# ----------------------------------------------


MODELEK = MODI_MODELE_XFEM(MODELE_IN=MODELEIN, FISSURE=FISS, INFO=1)


MA_XFEM = POST_MAIL_XFEM(MODELE=MODELEK)

# ----------------------------------------------
#                   MATERIAU
# ----------------------------------------------

ACIER = DEFI_MATERIAU(ELAS=_F(E=E, NU=nu, RHO=rho))

CHAMPMA1 = AFFE_MATERIAU(MAILLAGE=MAILLAG1, MODELE=MODELEK, AFFE=_F(TOUT="OUI", MATER=ACIER))

# ----------------------------------------------
#         BLOCAGE DES MODES RIGIDES
# ----------------------------------------------

if blocage == 1:
    CHRIGI = AFFE_CHAR_MECA(
        MODELE=MODELEK,
        DDL_IMPO=(_F(GROUP_NO="NOEUD1", DX=0.0, DY=0.0), _F(GROUP_NO="NOEUD2", DY=0.0)),
    )

elif blocage == 2:
    CHRIGI = AFFE_CHAR_MECA(
        MODELE=MODELEK,
        LIAISON_DDL=(
            _F(
                GROUP_NO=("NOEUD1", "NOEUD1S"),
                DDL=("DX", "DX"),
                COEF_MULT=(1.0, 1.0),
                COEF_IMPO=0.0,
            ),
            _F(
                GROUP_NO=("NOEUD1", "NOEUD1S"),
                DDL=("DY", "DY"),
                COEF_MULT=(1.0, 1.0),
                COEF_IMPO=0.0,
            ),
            _F(
                GROUP_NO=("NOEUD2", "NOEUD2S"),
                DDL=("DX", "DX"),
                COEF_MULT=(1.0, 1.0),
                COEF_IMPO=0.0,
            ),
        ),
    )

# ----------------------------------------------
#              CHARGEMENT
# ----------------------------------------------
if fonction == 0:
    CHPRES = AFFE_CHAR_MECA(MODELE=MODELEK, PRES_REP=_F(GROUP_MA=("SURFSUP", "SURFINF"), PRES=PRES))
elif fonction == 1:
    CHPRES = AFFE_CHAR_MECA_F(
        MODELE=MODELEK, PRES_REP=_F(GROUP_MA=("SURFSUP", "SURFINF"), PRES=FCTPRES)
    )

# ----------------------------------------------
#                   RESOLUTION
# ----------------------------------------------

RESU1 = MECA_STATIQUE(
    MODELE=MODELEK,
    CHAM_MATER=CHAMPMA1,
    EXCIT=(_F(CHARGE=CHRIGI), _F(CHARGE=CHPRES)),
    SOLVEUR=_F(METHODE="MULT_FRONT"),
    INFO=1,
)


# ----------------------------------------------
#           EDITION DE FICHIERS GMSH
# ----------------------------------------------

VISU = AFFE_MODELE(
    MAILLAGE=MA_XFEM,
    AFFE=(
        _F(
            GROUP_MA=("VOL", "SURFSUP", "SURFINF", "SURFDRO", "SURFGAU"),
            PHENOMENE="MECANIQUE",
            MODELISATION="D_PLAN",
        ),
    ),
)

RES_XFEM = POST_CHAM_XFEM(RESULTAT=RESU1, MODELE_VISU=VISU)

RES_XFEM = CALC_CHAMP(
    reuse=RES_XFEM, RESULTAT=RES_XFEM, CRITERES=("SIEQ_ELGA", "SIEQ_ELNO"), INFO=2
)

IMPR_RESU(FORMAT="GMSH", UNITE=37, RESU=_F(RESULTAT=RESU1, NOM_CHAM=("DEPL")))

IMPR_RESU(
    FORMAT="GMSH",
    UNITE=37,
    RESU=_F(RESULTAT=RES_XFEM, NOM_CHAM=("DEPL"), TYPE_CHAM="VECT_2D", NOM_CMP=("DX", "DY")),
)

# ------------------------------------------------------------------------
# POST-TRAITEMENT : CALCUL DES SIFS PAR LA METHODE ENERGETIQUE AVEC X-FEM
# ------------------------------------------------------------------------

n = len(RI)
SIF1 = [None] * n
SIF2 = [None] * n

for i in range(0, n):
    SIF1[i] = CALC_G_XFEM(
        RESULTAT=RESU1,
        OPTION="CALC_K_G",
        THETA=_F(FISSURE=FISS, R_INF=RI[i], R_SUP=RS[i], NUME_FOND=1),
        INFO=1,
    )

    # IMPR_TABLE(TABLE=SIF1[i],)

    SIF2[i] = CALC_G_XFEM(
        RESULTAT=RESU1,
        OPTION="CALC_K_G",
        THETA=_F(FISSURE=FISS, R_INF=RI[i], R_SUP=RS[i], NUME_FOND=2),
        INFO=1,
    )

    # IMPR_TABLE(TABLE=SIF2[i],)

# SOLUTION ANALYTIQUE
#
K1_CALC = [0.887588145332, 0.88762645165, 0.887607298491]
K2_CALC = [-0.000979019840959, -0.00115828369154, -0.00106865176625]
G_CALC = [7.80607515919e-07, 7.80586919885e-07, 7.80597217902e-07]


for i in range(0, n):
    TEST_TABLE(
        TABLE=SIF2[i],
        NOM_PARA="K1",
        VALE_REFE=K1REF,
        VALE_CALC=K1_CALC[i],
        CRITERE="RELATIF",
        PRECISION=0.005,
        REFERENCE="ANALYTIQUE",
    )
    TEST_TABLE(
        TABLE=SIF2[i],
        NOM_PARA="K2",
        VALE_REFE=0.0,
        VALE_CALC=K2_CALC[i],
        CRITERE="ABSOLU",
        PRECISION=0.002,
        REFERENCE="ANALYTIQUE",
    )
    TEST_TABLE(
        TABLE=SIF2[i],
        NOM_PARA="G",
        VALE_REFE=GREF,
        VALE_CALC=G_CALC[i],
        CRITERE="RELATIF",
        PRECISION=0.01,
        REFERENCE="ANALYTIQUE",
    )

FIN()
