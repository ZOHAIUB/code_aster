# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2023 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#
POURSUITE(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"))

import numpy as N


class REF:
    def R2(self, x, y, z):
        return x * x + y * y + z * z

    def Gradteta(self, x, y, z):
        c = self.R2(x, y, z) * 4.0
        return (c * x, c * y, c * z)

    def Epsi(self, x, y, z):
        a0 = -1.0 / 3.0
        a4 = 1.0 / 7.0
        c = a0 + a4 * self.R2(x, y, z) ** 2
        d = 4.0 * a4 * self.R2(x, y, z)
        return (c + d * x * x, c + d * y * y, c + d * z * z, d * x * y, d * x * z, d * y * z)


ref = REF()

epxx = N.array(EPSI1.getValuesWithDescription("EPXX", ["CUBE"])[0])
epyy = N.array(EPSI1.getValuesWithDescription("EPYY", ["CUBE"])[0])
epzz = N.array(EPSI1.getValuesWithDescription("EPZZ", ["CUBE"])[0])
epxy = N.array(EPSI1.getValuesWithDescription("EPXY", ["CUBE"])[0])
epxz = N.array(EPSI1.getValuesWithDescription("EPXZ", ["CUBE"])[0])
epyz = N.array(EPSI1.getValuesWithDescription("EPYZ", ["CUBE"])[0])
w = N.array(GAUSS.getValuesWithDescription("W", ["CUBE"])[0])
x = N.array(GAUSS.getValuesWithDescription("X", ["CUBE"])[0])
y = N.array(GAUSS.getValuesWithDescription("Y", ["CUBE"])[0])
z = N.array(GAUSS.getValuesWithDescription("Z", ["CUBE"])[0])

##SIG1/(4*A1)
gfxx = N.array(SIEF1.getValuesWithDescription("SIG1", ["CUBE"])[0]) / (4 * 0.25)
gfyy = N.array(SIEF1.getValuesWithDescription("SIG2", ["CUBE"])[0]) / (4 * 0.25)
gfzz = N.array(SIEF1.getValuesWithDescription("SIG3", ["CUBE"])[0]) / (4 * 0.25)
wg = N.array(GAUSS.getValuesWithDescription("W", ["CUBE"])[0])
xg = N.array(GAUSS.getValuesWithDescription("X", ["CUBE"])[0])
yg = N.array(GAUSS.getValuesWithDescription("Y", ["CUBE"])[0])
zg = N.array(GAUSS.getValuesWithDescription("Z", ["CUBE"])[0])

(refxx, refyy, refzz, refxy, refxz, refyz) = ref.Epsi(x, y, z)
(refgx, refgy, refgz) = ref.Gradteta(xg, yg, zg)

quad = (
    (epxx - refxx) ** 2
    + (epyy - refyy) ** 2
    + 2 * (epxy - refxy) ** 2
    + (epzz - refzz) ** 2
    + 2 * (epxz - refxz) ** 2
    + 2 * (epyz - refyz) ** 2
)
err_eps = (N.dot(w, quad) / N.add.reduce(w)) ** 0.5

quadgf = (gfxx - refgx) ** 2 + (gfyy - refgy) ** 2 + (gfzz - refgz) ** 2
err_vol = (N.dot(wg, quadgf) / N.add.reduce(wg)) ** 0.5


TAB1 = CREA_TABLE(
    LISTE=(
        _F(PARA="MAILLAGE", LISTE_K="MA1"),
        _F(PARA="ERR_EPS", LISTE_R=err_eps),
        _F(PARA="ERR_VOL", LISTE_R=err_vol),
    )
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC=0.0028422336849240172,
    VALE_REFE=0.0028422336849240172,
    NOM_PARA="ERR_EPS",
    TABLE=TAB1,
    FILTRE=_F(NOM_PARA="MAILLAGE", VALE_K="MA1"),
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC=0.062372122,
    VALE_REFE=0.062372121711127042,
    NOM_PARA="ERR_VOL",
    TABLE=TAB1,
    FILTRE=_F(NOM_PARA="MAILLAGE", VALE_K="MA1"),
)


epxx = N.array(EPSI2.getValuesWithDescription("EPXX", ["CUBE"])[0])
epyy = N.array(EPSI2.getValuesWithDescription("EPYY", ["CUBE"])[0])
epzz = N.array(EPSI2.getValuesWithDescription("EPZZ", ["CUBE"])[0])
epxy = N.array(EPSI2.getValuesWithDescription("EPXY", ["CUBE"])[0])
epxz = N.array(EPSI2.getValuesWithDescription("EPXZ", ["CUBE"])[0])
epyz = N.array(EPSI2.getValuesWithDescription("EPYZ", ["CUBE"])[0])
w = N.array(GAUSS.getValuesWithDescription("W", ["CUBE"])[0])
x = N.array(GAUSS.getValuesWithDescription("X", ["CUBE"])[0])
y = N.array(GAUSS.getValuesWithDescription("Y", ["CUBE"])[0])
z = N.array(GAUSS.getValuesWithDescription("Z", ["CUBE"])[0])

gfxx = N.array(SIEF2.getValuesWithDescription("SIG1", ["CUBE"])[0]) / (4 * 0.25)
gfyy = N.array(SIEF2.getValuesWithDescription("SIG2", ["CUBE"])[0]) / (4 * 0.25)
gfzz = N.array(SIEF2.getValuesWithDescription("SIG3", ["CUBE"])[0]) / (4 * 0.25)
wg = N.array(GAUSS.getValuesWithDescription("W", ["CUBE"])[0])
xg = N.array(GAUSS.getValuesWithDescription("X", ["CUBE"])[0])
yg = N.array(GAUSS.getValuesWithDescription("Y", ["CUBE"])[0])
zg = N.array(GAUSS.getValuesWithDescription("Z", ["CUBE"])[0])

(refxx, refyy, refzz, refxy, refxz, refyz) = ref.Epsi(x, y, z)
(refgx, refgy, refgz) = ref.Gradteta(xg, yg, zg)

quad = (
    (epxx - refxx) ** 2
    + (epyy - refyy) ** 2
    + 2 * (epxy - refxy) ** 2
    + (epzz - refzz) ** 2
    + 2 * (epxz - refxz) ** 2
    + 2 * (epyz - refyz) ** 2
)
err_eps = (N.dot(w, quad) / N.add.reduce(w)) ** 0.5

quadgf = (gfxx - refgx) ** 2 + (gfyy - refgy) ** 2 + (gfzz - refgz) ** 2
err_vol = (N.dot(wg, quadgf) / N.add.reduce(wg)) ** 0.5


TAB2 = CREA_TABLE(
    LISTE=(
        _F(PARA="MAILLAGE", LISTE_K="MA1"),
        _F(PARA="ERR_EPS", LISTE_R=err_eps),
        _F(PARA="ERR_VOL", LISTE_R=err_vol),
    )
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC=0.0028422336849240172,
    VALE_REFE=0.0028422336849240172,
    NOM_PARA="ERR_EPS",
    TABLE=TAB2,
    FILTRE=_F(NOM_PARA="MAILLAGE", VALE_K="MA1"),
)

TEST_TABLE(
    REFERENCE="ANALYTIQUE",
    VALE_CALC=0.062372122,
    VALE_REFE=0.062372121711127042,
    NOM_PARA="ERR_VOL",
    TABLE=TAB2,
    FILTRE=_F(NOM_PARA="MAILLAGE", VALE_K="MA1"),
)

FIN()
