# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2016  EDF R2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: jean-luc.flejou at edf.fr

from code_aster.Commands import *
from code_aster.Utilities import ExecutionParameter

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

# LIGNE VVP CPY INTERIEUR BR VVP 002
# EXPANSION THERMIQUE + DEPL. ANCRAGES GV
# T = 287 DEG. C
# UX = 55 UY = -8 UZ = 76 (REPERE LOCAL)
# MAILLAGE POUTRES
# UNITES : MM, N, MPA

YOUNG = 1.8604e5

C_ALPHA = 12.81e-6

RTUB = 406.4

EPTUB = 32.0

RCOU = 406.4

EPCOU = 34.0

RGV = 410.0

EPGV = 38.0

RBR = 444.4

EPBR = 70.0

C_FLEX = 6.032

DX_GV = 46.466

DY_GV = -30.494

DZ_GV = 76.0

T22 = 287.0

TREF = 20.0


def includeExternalData(theFile):
    """Retrieve a file in the external data folder"""
    import os.path as osp

    rcdir = ExecutionParameter().get_option("rcdir")
    return osp.join(rcdir, "tests_data", theFile)


nom_maillage = includeExternalData("ssll501a.mail")
DEFI_FICHIER(ACTION="ASSOCIER", FICHIER=nom_maillage, ACCES="NEW", UNITE=20)

MAILL = LIRE_MAILLAGE(VERI_MAIL=_F(VERIF="OUI"), FORMAT="ASTER", UNITE=20)

MAILL = DEFI_GROUP(
    reuse=MAILL,
    MAILLAGE=MAILL,
    CREA_GROUP_MA=(_F(NOM="M1", MAILLE="M1"), _F(NOM="M49", MAILLE="M49")),
)

DEFI_FICHIER(ACTION="LIBERER", UNITE=20)

# CREATION DES GROUPES DE NOEUDS **************************

DEFI_GROUP(reuse=MAILL, MAILLAGE=MAILL, CREA_GROUP_NO=_F(GROUP_MA="TUYAU"))

# DEFINITION DU TYPE D'ETUDE *****************************

MODELE = AFFE_MODELE(
    MAILLAGE=MAILL,
    AFFE=(
        _F(GROUP_MA="TUYAU", PHENOMENE="MECANIQUE", MODELISATION="POU_D_T"),
        _F(
            GROUP_MA=("L2", "L6", "L18", "L21", "L26", "L30", "L35", "L39", "L44", "L46"),
            PHENOMENE="MECANIQUE",
            MODELISATION="POU_D_T",
        ),
    ),
)

# DEFINITION DES CARACTERISTIQUES ELASTIQUES DU MATERIAU***
# VALEURS A 287 DEG. C

MAT_A48 = DEFI_MATERIAU(ELAS=_F(E=YOUNG, NU=0.3, ALPHA=C_ALPHA))


# CARACTERISTIQUES DES POUTRES *************************

CARA_POU = AFFE_CARA_ELEM(
    MODELE=MODELE,
    INFO=2,
    POUTRE=(
        _F(SECTION="CERCLE", CARA=("R", "EP"), VALE=(RTUB, EPTUB), GROUP_MA="TUYAU"),
        _F(SECTION="CERCLE", CARA=("R", "EP"), VALE=(RGV, EPGV), GROUP_MA="M1"),
        _F(SECTION="CERCLE", CARA=("R", "EP"), VALE=(RBR, EPBR), GROUP_MA="M49"),
        _F(
            SECTION="CERCLE",
            CARA=("R", "EP"),
            VALE=(RCOU, EPCOU),
            GROUP_MA=("L2", "L6", "L18", "L21", "L26", "L30", "L35", "L39", "L44", "L46"),
        ),
        # Poutre coud√©es
        _F(
            GROUP_MA=("L2", "L6", "L18", "L21", "L26", "L30", "L35", "L39", "L44", "L46"),
            SECTION="COUDE",
            COEF_FLEX=C_FLEX,
        ),
    ),
)

# DEFINITION DES CONDITIONS AUX LIMITES ***

BLOQU = AFFE_CHAR_MECA(
    MODELE=MODELE,
    DDL_IMPO=(
        _F(GROUP_NO="N1190", DX=DX_GV, DY=DY_GV, DZ=DZ_GV, DRX=0.0, DRY=0.0, DRZ=0.0),
        _F(GROUP_NO="N200", DX=0.0, DY=0.0, DZ=0.0, DRX=0.0, DRY=0.0, DRZ=0.0),
    ),
)

# DEFINITION DES CHARGEMENTS **********

TEMP_NO = CREA_CHAMP(
    MAILLAGE=MAILL,
    TYPE_CHAM="NOEU_TEMP_R",
    OPERATION="AFFE",
    AFFE=_F(TOUT="OUI", NOM_CMP="TEMP", VALE=T22),
)

TEMP = CREA_RESU(
    OPERATION="AFFE", TYPE_RESU="EVOL_THER", AFFE=_F(NOM_CHAM="TEMP", CHAM_GD=TEMP_NO, INST=0.0)
)

CHMTM = AFFE_MATERIAU(
    MAILLAGE=MAILL,
    AFFE=_F(GROUP_MA="TUYAU", MATER=MAT_A48),
    AFFE_VARC=_F(TOUT="OUI", EVOL=TEMP, NOM_VARC="TEMP", NOM_CHAM="TEMP", VALE_REF=TREF),
)

# RESOLUTION EN STATIQUE LINEAIRE ***************************


RESU = MECA_STATIQUE(
    MODELE=MODELE,
    CHAM_MATER=CHMTM,
    CARA_ELEM=CARA_POU,
    EXCIT=(_F(CHARGE=BLOQU),),
    SOLVEUR=_F(POSTTRAITEMENTS="FORCE"),
)

RESU = CALC_CHAMP(reuse=RESU, RESULTAT=RESU, CONTRAINTE=("SIPM_ELNO", "EFGE_ELNO", "EFGE_NOEU"))

# IMPRESSION DES EFFORTS GENERALISES ****
# AUX NOEUDS NON MOYENNES - REPERE LOCAL

EFF_GEN = POST_RELEVE_T(
    ACTION=_F(
        RESULTAT=RESU,
        INTITULE="EFFORTS_GENERALISES",
        GROUP_NO="TUYAU",
        NOM_CHAM="EFGE_NOEU",
        TOUT_CMP="OUI",
        MOYE_NOEUD="NON",
        OPERATION="EXTRACTION",
    )
)

TEST_RESU(
    RESU=_F(
        RESULTAT=RESU,
        REFERENCE="SOURCE_EXTERNE",
        PRECISION=0.0015,
        VALE_CALC=-41034518.6847,
        VALE_REFE=-4.1084000e7,
        NOM_CHAM="EFGE_NOEU",
        NOM_CMP="MT",
        GROUP_NO="N1190",
        INST=0.0,
    )
)

TEST_RESU(
    RESU=_F(
        RESULTAT=RESU,
        REFERENCE="SOURCE_EXTERNE",
        PRECISION=0.0015,
        VALE_CALC=-91157145.8272,
        VALE_REFE=-9.1024000e7,
        NOM_CHAM="EFGE_NOEU",
        NOM_CMP="MT",
        GROUP_NO="N5",
        INST=0.0,
    )
)


TEST_RESU(
    RESU=_F(
        RESULTAT=RESU,
        REFERENCE="SOURCE_EXTERNE",
        PRECISION=0.065,
        VALE_CALC=-12739799.1472,
        VALE_REFE=-1.1992000e7,
        NOM_CHAM="EFGE_NOEU",
        NOM_CMP="MT",
        GROUP_NO="N25",
        INST=0.0,
    )
)


TEST_RESU(
    RESU=_F(
        RESULTAT=RESU,
        REFERENCE="SOURCE_EXTERNE",
        PRECISION=0.03,
        VALE_CALC=-364953.18753,
        VALE_REFE=-3.55000e5,
        NOM_CHAM="EFGE_NOEU",
        NOM_CMP="MT",
        GROUP_NO="N135",
        INST=0.0,
    )
)


TEST_RESU(
    RESU=_F(
        RESULTAT=RESU,
        REFERENCE="SOURCE_EXTERNE",
        VALE_CALC=6108453.08885,
        VALE_REFE=6.114000e6,
        NOM_CHAM="EFGE_NOEU",
        NOM_CMP="MT",
        GROUP_NO="N197",
        INST=0.0,
    )
)


IMPR_TABLE(
    TABLE=EFF_GEN,
    NOM_PARA=("ABSC_CURV", "N", "VY", "VZ", "MT", "MFY", "MFZ", "NOEUD", "MAILLE"),
    TRI=_F(NOM_PARA=("ABSC_CURV", "MAILLE"), ORDRE="DECROISSANT"),
)

# IMPRESSION DES DEPLACEMENTS DES NOEUDS ****

DEPLNO = POST_RELEVE_T(
    ACTION=_F(
        RESULTAT=RESU,
        INTITULE="DEPLACEMENTS_DES NOEUDS",
        GROUP_NO="TUYAU",
        NOM_CHAM="DEPL",
        NOM_CMP=("DX", "DY", "DZ"),
        OPERATION="EXTRACTION",
    )
)

IMPR_TABLE(
    TABLE=DEPLNO,
    NOM_PARA=("ABSC_CURV", "COOR_X", "COOR_Y", "COOR_Z", "DX", "DY", "DZ", "NOEUD"),
    TRI=_F(NOM_PARA="ABSC_CURV", ORDRE="DECROISSANT"),
)

# REFERENCE SYPIPE ABS(MT)
MTSYS = DEFI_FONCTION(
    NOM_PARA="ABSC",
    VALE=(
        0.0,
        41.084,
        842.0,
        41.084,
        842.001,
        41.085,
        2567.3,
        91.025,
        2567.301,
        91.024,
        2717.3,
        91.024,
        2717.301,
        91.027,
        5847.3,
        91.027,
        5847.301,
        91.026,
        5975.3,
        91.026,
        5975.301,
        91.025,
        7700.7,
        11.992,
        7700.701,
        11.992,
        7950.7,
        11.992,
        7950.701,
        11.992,
        8950.7,
        11.992,
        8950.701,
        11.992,
        10465.7,
        11.992,
        10465.701,
        11.991,
        10470.7,
        11.991,
        10470.701,
        11.993,
        10475.7,
        11.993,
        10475.701,
        11.992,
        11890.7,
        11.992,
        11890.701,
        11.992,
        13770.7,
        11.992,
        13770.701,
        11.992,
        15650.7,
        11.992,
        15650.701,
        11.992,
        16450.7,
        11.992,
        16450.701,
        11.992,
        17955.7,
        11.992,
        17955.701,
        11.992,
        18940.7,
        11.992,
        18940.701,
        11.991,
        20666.0,
        40.955,
        20666.001,
        40.953,
        21453.1,
        40.953,
        21453.101,
        40.954,
        22112.9,
        40.954,
        22112.901,
        40.953,
        22536.7,
        28.097,
        22536.701,
        28.097,
        23314.5,
        28.097,
        23314.501,
        28.129,
        23316.5,
        28.129,
        23316.501,
        28.099,
        24919.5,
        28.099,
        24919.501,
        28.099,
        27871.3,
        28.099,
        27871.301,
        28.099,
        28295.0,
        13.751,
        28295.001,
        13.751,
        29243.8,
        13.751,
        29243.801,
        13.752,
        32680.9,
        13.752,
        32680.901,
        13.751,
        33629.8,
        13.751,
        33629.801,
        13.751,
        34053.4,
        0.354,
        34053.401,
        0.354,
        35002.3,
        0.354,
        35002.301,
        0.356,
        37576.3,
        0.356,
        37576.301,
        0.343,
        37578.2,
        0.343,
        37578.201,
        0.356,
        39388.1,
        0.356,
        39388.101,
        0.355,
        39811.9,
        12.528,
        39811.901,
        12.528,
        40645.9,
        12.528,
        40645.901,
        12.524,
        42195.0,
        12.524,
        42195.001,
        12.525,
        45174.2,
        12.525,
        45174.201,
        12.525,
        45545.4,
        20.313,
        45545.401,
        20.312,
        46371.6,
        20.312,
        46371.601,
        20.32,
        46373.6,
        20.32,
        46373.601,
        20.312,
        49543.65,
        20.312,
        49543.651,
        20.312,
        51058.56,
        20.312,
        51058.561,
        20.312,
        51873.2,
        6.734,
        51873.201,
        6.734,
        53509.76,
        6.734,
        53509.761,
        6.734,
        55235.09,
        6.114,
        55235.091,
        6.114,
        56456.1,
        6.114,
        56456.101,
        6.114,
        57596.096,
        6.114,
        57596.097,
        6.114,
        57766.1,
        6.114,
    ),
    PROL_DROITE="CONSTANT",
    PROL_GAUCHE="CONSTANT",
)

MTAS = RECU_FONCTION(TABLE=EFF_GEN, PARA_X="ABSC_CURV", PARA_Y="MT")
MTAST = CALC_FONCTION(COMB=_F(FONCTION=MTAS, COEF=1.0e-6), INTERPOL="LIN", NOM_PARA="ABSC")
FIN()
