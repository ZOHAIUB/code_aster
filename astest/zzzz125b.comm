# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))

MAIL = LIRE_MAILLAGE()

# construction de la variable de commande TEMP à partir de la table
# ===

TABLE_TEMP = LIRE_TABLE(UNITE=30)
temp_values = TABLE_TEMP.EXTR_TABLE().values()
inst = temp_values["INST"]
temp = temp_values["TEMP"]

affe = []
for i, t in zip(inst, temp):
    champ = CREA_CHAMP(
        TYPE_CHAM="NOEU_TEMP_R",
        OPERATION="AFFE",
        MAILLAGE=MAIL,
        AFFE=_F(TOUT="OUI", NOM_CMP="TEMP", VALE=t),
    )
    affe.append({"NOM_CHAM": "TEMP", "CHAM_GD": champ, "INST": i})

TEMP2 = CREA_RESU(OPERATION="AFFE", TYPE_RESU="EVOL_THER", AFFE=affe)

# construction d'un résultat mécanique bidon contenant les bon matériaux et la variable de commande TEMP
# ===

MO_MECA = AFFE_MODELE(
    MAILLAGE=MAIL, AFFE=_F(GROUP_MA=("M",), PHENOMENE="MECANIQUE", MODELISATION="3D")
)

YOUNGMET = DEFI_FONCTION(
    NOM_PARA="TEMP",
    VALE=(
        0.00000e00,
        2.05000e11,
        2.00000e01,
        2.04000e11,
        5.00000e01,
        2.03000e11,
        1.00000e02,
        2.00000e11,
        1.50000e02,
        1.97000e11,
        2.00000e02,
        1.93000e11,
        2.50000e02,
        1.89000e11,
        3.00000e02,
        1.85000e11,
        3.50000e02,
        1.80000e11,
    ),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

NUMET = DEFI_CONSTANTE(VALE=0.3)

K_IC = DEFI_FONCTION(
    NOM_PARA="TEMP",
    VALE=(
        0.00000e00,
        3.75976e07,
        1.00000e00,
        3.77849e07,
        2.00000e00,
        3.79760e07,
        3.00000e00,
        3.81709e07,
        4.00000e00,
        3.83699e07,
        5.00000e00,
        3.85732e07,
        6.00000e00,
        3.87808e07,
        7.00000e00,
        3.89930e07,
        8.00000e00,
        3.92099e07,
        9.00000e00,
        3.94318e07,
        1.00000e01,
        3.96587e07,
        1.10000e01,
        3.98910e07,
        1.20000e01,
        4.01287e07,
        1.30000e01,
        4.03722e07,
        1.40000e01,
        4.06216e07,
        1.50000e01,
        4.08772e07,
        1.60000e01,
        4.11392e07,
        1.70000e01,
        4.14079e07,
        1.80000e01,
        4.16835e07,
        1.90000e01,
        4.19663e07,
        2.00000e01,
        4.22566e07,
        2.10000e01,
        4.25546e07,
        2.20000e01,
        4.28606e07,
        2.30000e01,
        4.31751e07,
        2.40000e01,
        4.34982e07,
        2.50000e01,
        4.38303e07,
        2.60000e01,
        4.41719e07,
        2.70000e01,
        4.45232e07,
        2.80000e01,
        4.48846e07,
        2.90000e01,
        4.52565e07,
        3.00000e01,
        4.56393e07,
        3.10000e01,
        4.60335e07,
        3.20000e01,
        4.64394e07,
        3.30000e01,
        4.68576e07,
        3.40000e01,
        4.72885e07,
        3.50000e01,
        4.77326e07,
        3.60000e01,
        4.81904e07,
        3.70000e01,
        4.86625e07,
        3.80000e01,
        4.91493e07,
        3.90000e01,
        4.96515e07,
        4.00000e01,
        5.01697e07,
        4.10000e01,
        5.07045e07,
        4.20000e01,
        5.12565e07,
        4.30000e01,
        5.18264e07,
        4.40000e01,
        5.24149e07,
        4.50000e01,
        5.30227e07,
        4.60000e01,
        5.36506e07,
        4.70000e01,
        5.42992e07,
        4.80000e01,
        5.49696e07,
        4.90000e01,
        5.56624e07,
        5.00000e01,
        5.63785e07,
        5.10000e01,
        5.71189e07,
        5.20000e01,
        5.78845e07,
        5.30000e01,
        5.86762e07,
        5.40000e01,
        5.94952e07,
        5.50000e01,
        6.03423e07,
        5.60000e01,
        6.12188e07,
        5.70000e01,
        6.21258e07,
        5.80000e01,
        6.30644e07,
        5.90000e01,
        6.40358e07,
        6.00000e01,
        6.50414e07,
        6.10000e01,
        6.60825e07,
        6.20000e01,
        6.71604e07,
        6.30000e01,
        6.82765e07,
        6.40000e01,
        6.94324e07,
        6.50000e01,
        7.06296e07,
        6.60000e01,
        7.18697e07,
        6.70000e01,
        7.31543e07,
        6.80000e01,
        7.44852e07,
        6.90000e01,
        7.58641e07,
        7.00000e01,
        7.72930e07,
        7.10000e01,
        7.87737e07,
        7.20000e01,
        8.03083e07,
        7.30000e01,
        8.18988e07,
        7.40000e01,
        8.35475e07,
        7.50000e01,
        8.52565e07,
        7.60000e01,
        8.70283e07,
        7.70000e01,
        8.88651e07,
        7.80000e01,
        9.07696e07,
        7.90000e01,
        9.27444e07,
        8.00000e01,
        9.47923e07,
        8.10000e01,
        9.69159e07,
        8.20000e01,
        9.91183e07,
        8.30000e01,
        1.01402e08,
        8.40000e01,
        1.03772e08,
        8.50000e01,
        1.06229e08,
        8.60000e01,
        1.08778e08,
        8.70000e01,
        1.11423e08,
        8.80000e01,
        1.14166e08,
        8.90000e01,
        1.17012e08,
        9.00000e01,
        1.19965e08,
        9.10000e01,
        1.23029e08,
        9.20000e01,
        1.26208e08,
        9.30000e01,
        1.29506e08,
        9.40000e01,
        1.32929e08,
        9.50000e01,
        1.36481e08,
        9.60000e01,
        1.40167e08,
        9.70000e01,
        1.43992e08,
        9.80000e01,
        1.47962e08,
        9.90000e01,
        1.52083e08,
        1.00000e02,
        1.56359e08,
        1.01000e02,
        1.60797e08,
        1.02000e02,
        1.65404e08,
        1.03000e02,
        1.70186e08,
        1.04000e02,
        1.75150e08,
        1.05000e02,
        1.80302e08,
        1.06000e02,
        1.85650e08,
        1.07000e02,
        1.91202e08,
        1.08000e02,
        1.96966e08,
        1.09000e02,
        2.02949e08,
        1.10000e02,
        2.09161e08,
        1.11000e02,
        2.15610e08,
        1.12000e02,
        2.22305e08,
        1.13000e02,
        2.29255e08,
        1.14000e02,
        2.36472e08,
        1.15000e02,
        2.40934e08,
        1.16000e02,
        2.40934e08,
    ),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)

MAME_MET = DEFI_MATERIAU(ELAS_FO=_F(E=YOUNGMET, NU=NUMET), RUPT_FM=_F(KIC=K_IC))


CHMAT_ME = AFFE_MATERIAU(
    MAILLAGE=MAIL,
    AFFE=(_F(GROUP_MA="M", MATER=MAME_MET),),
    AFFE_VARC=(_F(GROUP_MA=("M"), NOM_VARC="TEMP", EVOL=TEMP2, VALE_REF=291.0),),
)

affe = []
for i in inst:
    champ = CREA_CHAMP(
        TYPE_CHAM="NOEU_DEPL_R",
        OPERATION="AFFE",
        MAILLAGE=MAIL,
        AFFE=_F(TOUT="OUI", NOM_CMP=("DX", "DY", "DZ"), VALE=(0, 0, 0)),
    )
    affe.append(
        {"NOM_CHAM": "DEPL", "CHAM_GD": champ, "INST": i, "MODELE": MO_MECA, "CHAM_MATER": CHMAT_ME}
    )

SIG_pl = CREA_RESU(OPERATION="AFFE", TYPE_RESU="EVOL_NOLI", AFFE=affe)

# récupération de la table G
# ===

TABLE_G = LIRE_TABLE(UNITE=31)

# appel à POST_FM
# ===

FM = POST_FM(RESULTAT=SIG_pl, TABLE_G=TABLE_G, GROUP_NO="PFFM")

# print(FM.EXTR_TABLE())

# tests
# ===

TEST_TABLE(TYPE_TEST="MIN", VALE_CALC=39.0786, NOM_PARA="TEMP", TABLE=FM)

TEST_TABLE(TYPE_TEST="MIN", VALE_CALC=49692276.9091023, NOM_PARA="KIC", TABLE=FM)

TEST_TABLE(
    TYPE_TEST="MAX",
    REFERENCE="AUTRE_ASTER",
    PRECISION=0.002,
    VALE_CALC=61183693.25678746,
    VALE_REFE=61.2548 * 1e6,
    NOM_PARA="KELAS",
    TABLE=FM,
)

TEST_TABLE(
    TYPE_TEST="MAX",
    REFERENCE="AUTRE_ASTER",
    PRECISION=0.002,
    VALE_CALC=76885447.8196958,
    VALE_REFE=76.9762 * 1e6,
    NOM_PARA="KPLAS",
    TABLE=FM,
)

TEST_TABLE(TYPE_TEST="MAX", VALE_CALC=76885447.8196958, NOM_PARA="KCP", TABLE=FM)

TEST_TABLE(
    TYPE_TEST="MIN",
    REFERENCE="AUTRE_ASTER",
    PRECISION=0.005,
    VALE_CALC=1.2208963668112616,
    VALE_REFE=1.215567442725526,
    NOM_PARA="FM_ASN",
    TABLE=FM,
)

TEST_TABLE(
    FILTRE=_F(NOM_PARA="INST", VALE=3300.0),
    TYPE_TEST="MAX",
    VALE_CALC=1.2208963668112616,
    NOM_PARA="FM_ASN",
    TABLE=FM,
)

FIN()
