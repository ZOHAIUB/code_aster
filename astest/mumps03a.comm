# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

#########################################################################
# VALIDATION DU SOLVEUR MUMPS EN COMPLEXE ET AVEC DES CMDES ECLATEES EN
# MODULANT:
#     - POUR LA PRISE EN COMPTE DES DIRICHLETS (AFFE_CHAR_CINE OU PAS)
#     - LES RENUMEROTEURS UTILISES (METIS, SCOTCH, PORD, AMD, AMF, QAMD).
#     - ON TESTE AUSSI LA PRESENCE SIMULTANNEE DE NMXINS=10 OCCURENCES MUMPS
#
# PARALLELE: VALEUR CONSEILLEE 2 PROCS
#   RQ. 3 ALARMES NORMALES SI COMPILE AVEC MUMPS5.0.2, 2 AVEC MUMPS5.1.0
#########################################################################

DEBUT(CODE="OUI", ERREUR=_F(ALARME="EXCEPTION"), DEBUG=_F(SDVERI="OUI"))


MAIL = LIRE_MAILLAGE(FORMAT="MED")

AIR = DEFI_MATERIAU(FLUIDE=_F(RHO=1.3, CELE_R=343.0))
AIR_ABSO = DEFI_MATERIAU(FLUIDE=_F(RHO=1.3, CELE_R=343.0, CELE_I=2.3076923076923075))
CHAMPMAT = AFFE_MATERIAU(
    MAILLAGE=MAIL, AFFE=(_F(TOUT="OUI", MATER=AIR), _F(GROUP_MA="SORTIE", MATER=AIR_ABSO))
)

GUIDE = AFFE_MODELE(
    MAILLAGE=MAIL,
    AFFE=(
        _F(TOUT="OUI", MODELISATION="3D", PHENOMENE="ACOUSTIQUE"),
        _F(GROUP_MA="SORTIE", MODELISATION="3D_ABSO", PHENOMENE="ACOUSTIQUE"),
    ),
)

CHARACOU = AFFE_CHAR_ACOU(MODELE=GUIDE, VITE_FACE=_F(GROUP_MA="ENTREE", VNOR=0.014 + 2.0j))

IMPEACOU = AFFE_CHAR_ACOU(MODELE=GUIDE, PRES_IMPO=_F(GROUP_NO="NO600", PRES=3.0 + 1.0j))
CHDUAL = AFFE_CHAR_ACOU(MODELE=GUIDE, PRES_IMPO=_F(GROUP_NO="NO500", PRES=1.0 + 3.0j))
CHCINE = AFFE_CHAR_CINE(MODELE=GUIDE, ACOU_IMPO=_F(GROUP_NO="NO500", PRES=1.0 + 3.0j))


# 1ER CALCUL (REFERENCE) AVEC MULT_FRONT SANS CHAR_CINE
# -----------------------------------------------------
MEL1 = CALC_MATR_ELEM(
    CHARGE=(IMPEACOU, CHDUAL), INST=0.0, OPTION="RIGI_ACOU", MODELE=GUIDE, CHAM_MATER=CHAMPMAT
)
NUM1 = NUME_DDL(MATR_RIGI=MEL1)
MATAS1 = ASSE_MATRICE(NUME_DDL=NUM1, MATR_ELEM=MEL1)

VECTELE1 = CALC_VECT_ELEM(
    OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU, CHDUAL)
)
VECTAS1 = ASSE_VECTEUR(VECT_ELEM=VECTELE1, NUME_DDL=NUM1)

FACTORISER(reuse=MATAS1, MATR_ASSE=MATAS1, METHODE="MULT_FRONT")
VECTAS1 = RESOUDRE(reuse=VECTAS1, MATR=MATAS1, CHAM_NO=VECTAS1)

TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=(1.8869534967818999 + 4.4379693694298998j),
        NOM_CMP="PRES",
        CHAM_GD=VECTAS1,
    )
)

# 1ER CALCUL AVEC MUMPS: SANS CHAR_CINE ET AVEC ASSEMBLAGE
# --------------------------------------------------------
ASSEMBLAGE(
    MODELE=GUIDE,
    CHAM_MATER=CHAMPMAT,
    INST=0.0,
    CHARGE=(IMPEACOU, CHDUAL),
    NUME_DDL=CO("NUM1b"),
    MATR_ASSE=_F(MATRICE=CO("MATAS1b"), OPTION="RIGI_ACOU"),
    INFO=2,
)

VECTEL1b = CALC_VECT_ELEM(
    OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU, CHDUAL)
)
VECTAS1b = ASSE_VECTEUR(VECT_ELEM=VECTEL1b, NUME_DDL=NUM1b)

FACTORISER(reuse=MATAS1b, MATR_ASSE=MATAS1b, METHODE="MUMPS", GESTION_MEMOIRE="IN_CORE", INFO=2)
VECTAS1b = RESOUDRE(
    reuse=VECTAS1b, MATR=MATAS1b, CHAM_NO=VECTAS1b, INFO=1, RESI_RELA=-1.0, POSTTRAITEMENTS="SANS"
)

TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=(1.8869534967818999 + 4.4379693694298998j),
        NOM_CMP="PRES",
        CHAM_GD=VECTAS1b,
    )
)

# 2EME CALCUL AVEC MULT_FRONT AVEC CHAR_CINE
# ------------------------------------------
MEL2 = CALC_MATR_ELEM(
    CHARGE=(IMPEACOU), INST=0.0, OPTION="RIGI_ACOU", MODELE=GUIDE, CHAM_MATER=CHAMPMAT
)
NUM2 = NUME_DDL(MATR_RIGI=MEL2)
MATAS2 = ASSE_MATRICE(NUME_DDL=NUM2, MATR_ELEM=MEL2, CHAR_CINE=CHCINE)
VCIN2 = CALC_CHAR_CINE(NUME_DDL=NUM2, CHAR_CINE=CHCINE)

VECTELE2 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS2 = ASSE_VECTEUR(VECT_ELEM=VECTELE2, NUME_DDL=NUM2)

FACTORISER(reuse=MATAS2, MATR_ASSE=MATAS2, METHODE="MULT_FRONT")

VECTAS2 = RESOUDRE(reuse=VECTAS2, MATR=MATAS2, CHAM_NO=VECTAS2, CHAM_CINE=VCIN2)

TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS2,
    )
)

# 2EME CALCUL AVEC MUMPS AVEC CHAR_CINE + AMD
# -------------------------------------------
MEL3 = CALC_MATR_ELEM(
    CHARGE=(IMPEACOU), INST=0.0, OPTION="RIGI_ACOU", MODELE=GUIDE, CHAM_MATER=CHAMPMAT
)

NUM3 = NUME_DDL(MATR_RIGI=MEL3)
MATAS34 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN34 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL34 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS34 = ASSE_VECTEUR(VECT_ELEM=VECTEL34, NUME_DDL=NUM3)
FACTORISER(
    reuse=MATAS34,
    MATR_ASSE=MATAS34,
    METHODE="MUMPS",
    RENUM="AMD",
    GESTION_MEMOIRE="OUT_OF_CORE",
    INFO=2,
)
VECTAS34 = RESOUDRE(
    reuse=VECTAS34,
    MATR=MATAS34,
    CHAM_NO=VECTAS34,
    CHAM_CINE=VCIN34,
    RESI_RELA=1.0e-10,
    POSTTRAITEMENTS="FORCE",
    INFO=1,
)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS34,
    )
)

del VCIN34
del VECTEL34
del VECTAS34

# 3EME CALCUL AVEC MUMPS AVEC CHAR_CINE + AMF
# -------------------------------------------
MATAS32 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN32 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL32 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS32 = ASSE_VECTEUR(VECT_ELEM=VECTEL32, NUME_DDL=NUM3)
FACTORISER(reuse=MATAS32, MATR_ASSE=MATAS32, METHODE="MUMPS", RENUM="AMF")
VECTAS32 = RESOUDRE(reuse=VECTAS32, MATR=MATAS32, CHAM_NO=VECTAS32, CHAM_CINE=VCIN32)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS32,
    )
)

del VCIN32
del VECTEL32
del VECTAS32

# 4EME CALCUL AVEC MUMPS AVEC CHAR_CINE + SCOTCH
# ----------------------------------------------
MATAS33 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN33 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL33 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS33 = ASSE_VECTEUR(VECT_ELEM=VECTEL33, NUME_DDL=NUM3)
FACTORISER(reuse=MATAS33, MATR_ASSE=MATAS33, METHODE="MUMPS", RENUM="SCOTCH")
VECTAS33 = RESOUDRE(reuse=VECTAS33, MATR=MATAS33, CHAM_NO=VECTAS33, CHAM_CINE=VCIN33)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS33,
    )
)

del VCIN33
del VECTEL33
del VECTAS33

# 5EME CALCUL AVEC MUMPS AVEC CHAR_CINE + PORD
# --------------------------------------------
MATAS34 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN34 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL34 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS34 = ASSE_VECTEUR(VECT_ELEM=VECTEL34, NUME_DDL=NUM3)
FACTORISER(reuse=MATAS34, MATR_ASSE=MATAS34, METHODE="MUMPS", RENUM="PORD")
VECTAS34 = RESOUDRE(reuse=VECTAS34, MATR=MATAS34, CHAM_NO=VECTAS34, CHAM_CINE=VCIN34)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS34,
    )
)

del VCIN34
del VECTEL34
del VECTAS34

# 6EME CALCUL AVEC MUMPS AVEC CHAR_CINE + QAMD
# --------------------------------------------
MATAS35 = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
VCIN35 = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
VECTEL35 = CALC_VECT_ELEM(OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU))
VECTAS35 = ASSE_VECTEUR(VECT_ELEM=VECTEL35, NUME_DDL=NUM3)
FACTORISER(reuse=MATAS35, MATR_ASSE=MATAS35, METHODE="MUMPS", RENUM="QAMD")
VECTAS35 = RESOUDRE(reuse=VECTAS35, MATR=MATAS35, CHAM_NO=VECTAS35, CHAM_CINE=VCIN35)
TEST_RESU(
    CHAM_NO=_F(
        GROUP_NO="NO1",
        VALE_CALC_C=1.886953497 + 4.437969369j,
        VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
        REFERENCE="AUTRE_ASTER",
        NOM_CMP="PRES",
        CHAM_GD=VECTAS35,
    )
)

del VCIN35
del VECTEL35
del VECTAS35

# nombre maximum d'occurences MUMPS simultanées (moins les 6 deja presentes)
# on ne met pas la valeur 50 mais 10 pour limiter la durée du cas-test
# nxmins = 50
nxmins = 10
nxmins2 = nxmins - 6
MATAS = [None] * nxmins2
VCIN = [None] * nxmins2
VECTEL = [None] * nxmins2
VECTAS = [None] * nxmins2
for num_calc in range(0, nxmins2):
    MATAS[num_calc] = ASSE_MATRICE(NUME_DDL=NUM3, MATR_ELEM=MEL3, CHAR_CINE=CHCINE)
    VCIN[num_calc] = CALC_CHAR_CINE(NUME_DDL=NUM3, CHAR_CINE=CHCINE)
    VECTEL[num_calc] = CALC_VECT_ELEM(
        OPTION="CHAR_ACOU", CHAM_MATER=CHAMPMAT, CHARGE=(CHARACOU, IMPEACOU)
    )
    VECTAS[num_calc] = ASSE_VECTEUR(VECT_ELEM=VECTEL[num_calc], NUME_DDL=NUM3)
    FACTORISER(reuse=MATAS[num_calc], MATR_ASSE=MATAS[num_calc], METHODE="MUMPS")
    VECTAS[num_calc] = RESOUDRE(
        reuse=VECTAS[num_calc],
        MATR=MATAS[num_calc],
        CHAM_NO=VECTAS[num_calc],
        CHAM_CINE=VCIN[num_calc],
    )
    TEST_RESU(
        CHAM_NO=_F(
            GROUP_NO="NO1",
            VALE_CALC_C=1.886953497 + 4.437969369j,
            VALE_REFE_C=(1.8869534967818999 + 4.4379693694298998j),
            REFERENCE="AUTRE_ASTER",
            NOM_CMP="PRES",
            CHAM_GD=VECTAS[num_calc],
        )
    )
    #  del VCIN[num_calc]
    #  del VECTEL[num_calc]
    #  del VECTAS[num_calc]
    print("********************************")
    print("OCCURENCE MUMPS n° ", num_calc + 7)
    print("********************************")
FIN()
