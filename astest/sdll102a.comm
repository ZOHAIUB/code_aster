# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import code_aster
from code_aster.Commands import *
import numpy as np
from code_aster import CA

test = CA.TestCase()

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

##
POUTRE = LIRE_MAILLAGE(FORMAT="MED")

#
MODELE = AFFE_MODELE(
    MAILLAGE=POUTRE, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="POU_D_E")
)

#
MATER1 = DEFI_MATERIAU(ELAS=_F(E=7.0e10, NU=0.0, RHO=2700.0))

#
MATER2 = DEFI_MATERIAU(ELAS=_F(E=5.0e10, NU=0.0, RHO=2500.0))

#
MATER3 = DEFI_MATERIAU(ELAS=_F(E=2.0e11, NU=0.0, RHO=8000.0))

#
CHAMPMAT = AFFE_MATERIAU(
    MAILLAGE=POUTRE,
    AFFE=(
        _F(GROUP_MA=("LI4", "LI8"), MATER=MATER1),
        _F(GROUP_MA=("LI3", "LI7", "LI11"), MATER=MATER1),
        _F(GROUP_MA=("LI2", "LI6", "LI10"), MATER=MATER2),
        _F(GROUP_MA=("LI1", "LI5", "LI9"), MATER=MATER3),
    ),
)

#
CHAMPCAR = AFFE_CARA_ELEM(
    MODELE=MODELE,
    POUTRE=(
        _F(GROUP_MA=("LI4", "LI8"), SECTION="CERCLE", CARA=("R", "EP"), VALE=(6.055e-2, 6.2e-3)),
        _F(
            GROUP_MA="LI1",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(1.2061e-2, 2.3681e-5, 2.3681e-5, 4.7362e-5),
        ),
        _F(
            GROUP_MA="LI5",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(1.4621e-2, 2.8709e-5, 2.8709e-5, 5.7418e-5),
        ),
        _F(
            GROUP_MA="LI9",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(1.5530e-2, 3.0493e-5, 3.0493e-5, 6.0986e-5),
        ),
        _F(
            GROUP_MA="LI2",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(3.1428e-2, 4.5070e-5, 4.5070e-5, 9.0140e-5),
        ),
        _F(
            GROUP_MA="LI6",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(3.2592e-2, 4.6738e-5, 4.6738e-5, 9.3476e-5),
        ),
        _F(
            GROUP_MA="LI10",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(3.3416e-2, 4.7972e-5, 4.7972e-5, 9.5944e-5),
        ),
        _F(
            GROUP_MA="LI3",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(3.1944e-2, 1.1500e-5, 1.1500e-5, 2.3000e-5),
        ),
        _F(
            GROUP_MA="LI7",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(4.2130e-2, 1.1500e-5, 1.1500e-5, 2.3000e-5),
        ),
        _F(
            GROUP_MA="LI11",
            SECTION="GENERALE",
            CARA=("A", "IY", "IZ", "JX"),
            VALE=(3.1944e-2, 1.1500e-5, 1.1500e-5, 2.3000e-5),
        ),
    ),
)

#
CHARGE = AFFE_CHAR_MECA(
    MODELE=MODELE,
    FORCE_ELEC=_F(
        GROUP_MA=("LI4", "LI8"), POSITION="INFI", POINT1=(0.0, 1.0, 4.395), POINT2=(1.0, 1.0, 4.395)
    ),
    LIAISON_DDL=(
        _F(GROUP_NO=("N22", "N125"), DDL=("DY", "DY"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N22", "N125"), DDL=("DZ", "DZ"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N22", "N125"), DDL=("DRX", "DRX"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DX", "DX"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DY", "DY"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DZ", "DZ"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DRX", "DRX"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DRY", "DRY"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N73", "N127"), DDL=("DRZ", "DRZ"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N103", "N126"), DDL=("DY", "DY"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N103", "N126"), DDL=("DZ", "DZ"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
        _F(GROUP_NO=("N103", "N126"), DDL=("DRX", "DRX"), COEF_MULT=(1.0, -1.0), COEF_IMPO=0.0),
    ),
    DDL_IMPO=_F(GROUP_NO=("P1", "P5", "P9"), DX=0.0, DY=0.0, DZ=0.0, DRX=0.0, DRY=0.0, DRZ=0.0),
)

RIGIELEM = CALC_MATR_ELEM(
    MODELE=MODELE, CHARGE=CHARGE, CHAM_MATER=CHAMPMAT, CARA_ELEM=CHAMPCAR, OPTION="RIGI_MECA"
)

#
MASSELEM = CALC_MATR_ELEM(
    MODELE=MODELE, CHARGE=CHARGE, CHAM_MATER=CHAMPMAT, CARA_ELEM=CHAMPCAR, OPTION="MASS_MECA"
)

#
VECTELEM = CALC_VECT_ELEM(CHARGE=CHARGE, CARA_ELEM=CHAMPCAR, OPTION="CHAR_MECA")

#
NUMEROTA = NUME_DDL(MATR_RIGI=RIGIELEM)

#
MATRRIGI = ASSE_MATRICE(MATR_ELEM=RIGIELEM, NUME_DDL=NUMEROTA)

#
MATRMASS = ASSE_MATRICE(MATR_ELEM=MASSELEM, NUME_DDL=NUMEROTA)

#
VECAS = ASSE_VECTEUR(VECT_ELEM=VECTELEM, NUME_DDL=NUMEROTA)

#
#

FONC = DEFI_FONC_ELEC(
    COUR=(
        _F(
            INTE_CC_1=15600.0,
            TAU_CC_1=0.066,
            PHI_CC_1=0.0,
            INTE_CC_2=15600.0,
            TAU_CC_2=0.066,
            PHI_CC_2=180.0,
            INST_CC_INIT=0.0,
            INST_CC_FIN=0.135,
        ),
        _F(
            INTE_CC_1=15600.0,
            TAU_CC_1=0.062,
            PHI_CC_1=0.0,
            INTE_CC_2=15600.0,
            TAU_CC_2=0.062,
            PHI_CC_2=180.0,
            INST_CC_INIT=0.580,
            INST_CC_FIN=0.885,
        ),
    )
)

#
TEMPLI = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=1.0, NOMBRE=2000))

#
INTLI = DEFI_LIST_ENTI(DEBUT=20, INTERVALLE=_F(JUSQU_A=2000, PAS=20))

TEMLI = DEFI_LIST_REEL(DEBUT=0.01, INTERVALLE=_F(JUSQU_A=1.0, PAS=0.01))
#
# -----------------------------------------------------------------------
# EVOLUTIONS
NEWNONA = DYNA_VIBRA(
    CHAM_MATER=CHAMPMAT,
    CARA_ELEM=CHAMPCAR,
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="PHYS",
    MATR_MASS=MATRMASS,
    MATR_RIGI=MATRRIGI,
    SCHEMA_TEMPS=_F(SCHEMA="NEWMARK"),
    INCREMENT=_F(LIST_INST=TEMPLI),
    ARCHIVAGE=_F(LIST_INST=TEMLI),
    EXCIT=_F(VECT_ASSE=VECAS, FONC_MULT=FONC),
)

# -----------------------------------------------------------------------
# EFFORTS

NEWNONA = CALC_CHAMP(
    reuse=NEWNONA,
    NUME_ORDRE=(12, 20, 45, 70, 80, 90),
    GROUP_MA=("M2", "M36", "M53", "M104"),
    RESULTAT=NEWNONA,
    CONTRAINTE=("EFGE_ELNO"),
)

D1 = CREA_CHAMP(
    OPERATION="EXTR", TYPE_CHAM="NOEU_DEPL_R", NOM_CHAM="DEPL", RESULTAT=NEWNONA, NUME_ORDRE=12
)

# VERIFICATION   DEPLACEMENTS T = 0.12 ET 0.70
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=12,
            RESULTAT=NEWNONA,
            NOM_CHAM="DEPL",
            GROUP_NO="N88",
            NOM_CMP="DY",
            VALE_CALC=-0.060491289184913,
            VALE_REFE=-0.060499999999999998,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
        ),
        _F(
            NUME_ORDRE=70,
            RESULTAT=NEWNONA,
            NOM_CHAM="DEPL",
            GROUP_NO="N88",
            NOM_CMP="DY",
            VALE_CALC=-0.11891578119383,
            VALE_REFE=-0.11890000000000001,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
        ),
    )
)

# VERIFICATION   EFFORTS T = 0.12 ET 0.70
TEST_RESU(
    RESU=(
        _F(
            NUME_ORDRE=12,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N123",
            NOM_CMP="MFZ",
            VALE_CALC=-3071.3554779643,
            VALE_REFE=-3071.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M2",
        ),
        _F(
            NUME_ORDRE=70,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N123",
            NOM_CMP="MFZ",
            VALE_CALC=-6327.2513956695,
            VALE_REFE=-6327.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M2",
        ),
        _F(
            NUME_ORDRE=12,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N88",
            NOM_CMP="MFZ",
            VALE_CALC=1296.1455661031,
            VALE_REFE=1296.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M36",
        ),
        _F(
            NUME_ORDRE=70,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N88",
            NOM_CMP="MFZ",
            VALE_CALC=2646.543229133,
            VALE_REFE=2647.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M36",
        ),
        _F(
            NUME_ORDRE=12,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N34",
            NOM_CMP="MFZ",
            VALE_CALC=-9239.226434058,
            VALE_REFE=-9239.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M53",
        ),
        _F(
            NUME_ORDRE=70,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N34",
            NOM_CMP="MFZ",
            VALE_CALC=-18930.676313341,
            VALE_REFE=-1.8931e4,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M53",
        ),
        _F(
            NUME_ORDRE=12,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N2",
            NOM_CMP="MFZ",
            VALE_CALC=-2915.9821751382,
            VALE_REFE=-2916.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M104",
        ),
        _F(
            NUME_ORDRE=70,
            RESULTAT=NEWNONA,
            NOM_CHAM="EFGE_ELNO",
            GROUP_NO="N2",
            NOM_CMP="MFZ",
            VALE_CALC=-6015.1550771004,
            VALE_REFE=-6015.0,
            REFERENCE="SOURCE_EXTERNE",
            PRECISION=1.0e-3,
            GROUP_MA="M104",
        ),
    )
)

# ---------------------------------------------------------
# TEST DE LA METHODE computeMaxResultantForPipe


PhysProb = CA.PhysicalProblem(MODELE, CHAMPMAT, CHAMPCAR)
MAX_EFGE = CA.PostProcessing(PhysProb).computeMaxResultantForPipe(NEWNONA, "EFGE_ELNO")


# Test using only numpy
# Extract field size and index information
size = NEWNONA.getField("EFGE_ELNO", 12).size()
nb_indx = len(NEWNONA.getIndexesForFieldName("EFGE_ELNO"))
# Initialize array for EFGE results
efge_result_array = np.array(
    [
        NEWNONA.getField("EFGE_ELNO", p).getValues()
        for p in NEWNONA.getIndexesForFieldName("EFGE_ELNO")
    ]
).T
# Initialize storage for indexes and EFGE results
nb_elem = size // 6
max_indx_list = np.zeros(4 * nb_elem, dtype=int)
max_efge = np.zeros(size)


# Function to calculate the norm of a moment vector
def norm_moment(moment):
    return np.linalg.norm(moment)


# Compute indexes and find max values for fx, fy, fz, and moment
for el in range(nb_elem):
    start = 6 * el
    fx = np.abs(efge_result_array[start, :])
    fy = np.abs(efge_result_array[start + 1, :])
    fz = np.abs(efge_result_array[start + 2, :])
    moment = np.array(
        [norm_moment(efge_result_array[start + 3 : start + 6, p]) for p in range(nb_indx)]
    )
    max_indx_list[4 * el] = np.argmax(fx)
    max_indx_list[4 * el + 1] = np.argmax(fy)
    max_indx_list[4 * el + 2] = np.argmax(fz)
    max_indx_list[4 * el + 3] = np.argmax(moment)
    max_efge[start] = fx[max_indx_list[4 * el]]
    max_efge[start + 1] = fy[max_indx_list[4 * el + 1]]
    max_efge[start + 2] = fz[max_indx_list[4 * el + 2]]
    max_efge[start + 3 : start + 6] = np.abs(
        efge_result_array[start + 3 : start + 6, max_indx_list[4 * el + 3]]
    )

# TEST IF EQUAL


test.assertSequenceEqual(max_efge.tolist(), MAX_EFGE.getValues())


FIN()
#
