# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA


try:
    # Import du module de calcul symbolique Sympy
    from code_aster.Utilities import sympy

    # access __version__ to check availability
    sympy.__version__
    sympy_available = True
except ImportError:
    sympy_available = False

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))
# ================================================================================================
# Definition des caracteristiques du materiau
# ================================================================================================
E = 1.0
NU = 0.0

# ================================================================================================
# Calcul de la solution de reference
# ================================================================================================
if sympy_available:
    from code_aster.MacroCommands.Contrib import TensorModule
    from code_aster.MacroCommands.Contrib import HookeTensor

    # ================================================================================================
    # ================================================================================================
    # Principe de la MSM pour une formulation en deplacement de Saint-Venant-Kirchhoff
    # ================================================================================================
    # ================================================================================================

    X, Y, Z = sympy.symbols("X Y Z")

    # ================================================================================================
    # Choix de la solution analytique
    # ================================================================================================
    X3 = 0.5

    Ux = -0.2 * Y * Y * Y * (X - X3)
    Uy = -0.05 * (X - X3) * (X - X3) * (1 + Y) - 0.01 * Y
    U = TensorModule.Tensor([Ux, Uy, 0])

    # ================================================================================================
    # Gradient de deformation et normale a la frontiere de contact
    # ================================================================================================

    NormaleDroite = TensorModule.Tensor([1.0, 0.0, 0.0])
    NormaleGauche = TensorModule.Tensor([-1.0, 0.0, 0.0])
    NormaleHaut = TensorModule.Tensor([0.0, 1.0, 0.0])
    NormaleBas = TensorModule.Tensor([0.0, -1.0, 0.0])

    TenseurIdentite = TensorModule.Tensor([[1.0, 0.0, 0], [0.0, 1.0, 0], [0.0, 0.0, 1.0]])

    GradientDeformation = TensorModule.grad(U) + TenseurIdentite
    GradientDeformation_T = GradientDeformation.transpose()
    Ftm1 = GradientDeformation_T.inverse()

    Ftm1_N = Ftm1.produitSimpleContracte(NormaleBas)
    ModuleCarre_Ftm1_N = Ftm1_N.produitSimpleContracte(Ftm1_N)
    Module_Ftm1_N = ModuleCarre_Ftm1_N.sqrt()
    NormaleContact = Ftm1_N / Module_Ftm1_N

    # ================================================================================================
    # Tenseur de Green-Lagrange
    # ================================================================================================

    Tenseur_Green__Lagrange = 0.5 * (
        GradientDeformation.transpose().produitSimpleContracte(GradientDeformation)
        - TenseurIdentite
    )

    # ================================================================================================
    # Deuxieme Tenseur de Piola-Kirchhoff (Force sur configuration non deformee par unite de surface non deformee)
    # ================================================================================================

    C_Iso = HookeTensor.HookeIsotropic(E, NU)

    Piola_Kirchhoff_II = C_Iso.produitDoubleContracte(Tenseur_Green__Lagrange)

    # ================================================================================================
    # Premier Tenseur de Piola-Kirchhoff  (Force en configuration deformee par unite de surface non deformee)
    # ================================================================================================

    Piola_Kirchhoff_I = GradientDeformation.produitSimpleContracte(Piola_Kirchhoff_II)

    # ================================================================================================
    # Divergence du Premier Tenseur de Piola-Kirchhoff == terme source
    # ================================================================================================

    Fvol = -TensorModule.div(Piola_Kirchhoff_I)

    # ================================================================================================
    # Assignation des conditions limites
    # ================================================================================================
    # conditions de Neumann
    Fsurf_Droite = Piola_Kirchhoff_I.produitSimpleContracte(NormaleDroite)
    Fsurf_Gauche = Piola_Kirchhoff_I.produitSimpleContracte(NormaleGauche)
    Fsurf_Haut = Piola_Kirchhoff_I.produitSimpleContracte(NormaleHaut)
    Fsurf_Bas = Piola_Kirchhoff_I.produitSimpleContracte(NormaleBas)

    # Valeurs du  Sigma sur la face de Contact
    Fsurf_BAS_nn = Fsurf_Bas.produitSimpleContracte(NormaleContact)
    Fsurf_BAS_t = Fsurf_Bas - Fsurf_BAS_nn * NormaleContact

    # ================================================================================================
    # Transformation des formules pour utilisation dans Aster
    # ================================================================================================

    FUx = FORMULE(VALE=str(U[0]), NOM_PARA=("X", "Y"))
    FUy = FORMULE(VALE=str(U[1]), NOM_PARA=("X", "Y"))

    FsurfXD = FORMULE(VALE=str(Fsurf_Droite[0]), NOM_PARA=("X", "Y"))
    FsurfYD = FORMULE(VALE=str(Fsurf_Droite[1]), NOM_PARA=("X", "Y"))

    FsurfXG = FORMULE(VALE=str(Fsurf_Gauche[0]), NOM_PARA=("X", "Y"))
    FsurfYG = FORMULE(VALE=str(Fsurf_Gauche[1]), NOM_PARA=("X", "Y"))

    FsurfXH = FORMULE(VALE=str(Fsurf_Haut[0]), NOM_PARA=("X", "Y"))
    FsurfYH = FORMULE(VALE=str(Fsurf_Haut[1]), NOM_PARA=("X", "Y"))

    FsurfTX = FORMULE(VALE=str(Fsurf_BAS_t[0]), NOM_PARA=("X", "Y"))
    FsurfTY = FORMULE(VALE=str(Fsurf_BAS_t[1]), NOM_PARA=("X", "Y"))

    FcontNN = FORMULE(VALE=str(Fsurf_BAS_nn.array.item().subs(Y, 0)), NOM_PARA=("X"))

    FvolX = FORMULE(VALE=str(Fvol[0]), NOM_PARA=("X", "Y"))
    FvolY = FORMULE(VALE=str(Fvol[1]), NOM_PARA=("X", "Y"))

# Si importation de sympy impossible
else:
    # ================================================================================================
    # Definition des formules Aster
    # ================================================================================================

    FUx = FORMULE(VALE="0.2*Y**3*(0.5 - X)", NOM_PARA=("X", "Y"))
    FUy = FORMULE(VALE="-0.01*Y - (1 + Y)*(0.5 - X)*(0.025 - 0.05*X)", NOM_PARA=("X", "Y"))

    FsXD = "-(1.0 - 0.2*Y**3)*(0.5 - 0.5*(1.0 - 0.2*Y**3)**2 - 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2) + 0.6*Y**2*(0.5 - X)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3))"
    FsYD = "(0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) - ((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5 - 0.5*(1.0 - 0.2*Y**3)**2 - 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2)"

    FsurfXD = FORMULE(VALE=FsXD, NOM_PARA=("X", "Y"))
    FsurfYD = FORMULE(VALE=FsYD, NOM_PARA=("X", "Y"))

    FsXG = "(1.0 - 0.2*Y**3)*(0.5 - 0.5*(1.0 - 0.2*Y**3)**2 - 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2) - 0.6*Y**2*(0.5 - X)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3))"

    FsYG = "((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5 - 0.5*(1.0 - 0.2*Y**3)**2 - 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2) - 1.0*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3))"

    FsurfXG = FORMULE(VALE=FsXG, NOM_PARA=("X", "Y"))
    FsurfYG = FORMULE(VALE=FsYG, NOM_PARA=("X", "Y"))

    FsXH = "(1.0 - 0.2*Y**3)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) - 0.6*Y**2*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2)"

    FsYH = "(1.0 - 0.2*Y**3)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) - 0.6*Y**2*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2)"

    FsurfXH = FORMULE(VALE=FsXH, NOM_PARA=("X", "Y"))
    FsurfYH = FORMULE(VALE=FsYH, NOM_PARA=("X", "Y"))

    FsTX = "-1.0*(1.0 - 0.2*Y**3)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + 0.6*Y**2*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2) + ((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))*(-1.0*((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(1.0 - 0.2*Y**3)*((0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2) - 1.0*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))) - 1.0*((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))*(-1.0*(1.0 - 0.2*Y**3)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + 0.6*Y**2*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))"

    FsTY = "(0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2) - 1.0*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + ((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(1.0 - 0.2*Y**3)*(-1.0*((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(1.0 - 0.2*Y**3)*((0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2) - 1.0*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))) - 1.0*((1.0 - 0.2*Y**3)**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2 + (-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))**2/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))**2)**-0.5*(-(1 + Y)*(0.025 - 0.05*X) - 0.05*(1 + Y)*(0.5 - X))*(-1.0*(1.0 - 0.2*Y**3)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + 0.6*Y**2*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))))/((1.0 - 0.2*Y**3)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.6*Y**2*(0.5 - X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)))"

    FsurfTX = FORMULE(VALE=FsTX, NOM_PARA=("X", "Y"))
    FsurfTY = FORMULE(VALE=FsTY, NOM_PARA=("X", "Y"))

    Fcont_NN = "-1.0*((0.99 - (0.5 - X)*(0.025 - 0.05*X))**(-2) + (0.05 - 0.1*X)**2/(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2)**-0.5*((0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.5*(0.05 - 0.1*X)**2*(0.99 - (0.5 - X)*(0.025 - 0.05*X)))/(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.5*(0.05 - 0.1*X)**2*((0.99 - (0.5 - X)*(0.025 - 0.05*X))**(-2) + (0.05 - 0.1*X)**2/(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2)**-0.5"

    FcontNN = FORMULE(VALE=Fcont_NN, NOM_PARA=("X"))

    FvX = "-(1.0 - 0.2*Y**3)*(0.5*(0.05 - 0.1*X)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.18*Y**4*(0.5 - X) + 0.6*Y*(0.5 - X)*(1.0 - 0.2*Y**3)) + 1.2*Y**2*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + 0.5*(1.0 - 0.2*Y**3)*(0.2 + 0.2*Y)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 1.2*Y*(0.5 - X)*(0.5 - 0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))**2 - 0.18*Y**4*(0.5 - X)**2) - 0.6*Y**2*(0.5 - X)*(0.5*(0.05 - 0.1*X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) - 0.5*(0.1 + 0.1*Y)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.3*Y**2*(1.0 - 0.2*Y**3)) - 0.432*Y**5*(0.5 - X)**3"

    FvY = "-(0.1 + 0.1*Y)*(0.5 - 0.5*(1.0 - 0.2*Y**3)**2 - 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2) - (0.99 - (0.5 - X)*(0.025 - 0.05*X))*(0.5*(0.05 - 0.1*X)*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) - 0.5*(0.1 + 0.1*Y)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.3*Y**2*(1.0 - 0.2*Y**3)) - ((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))*(0.5*(0.05 - 0.1*X)*(0.99 - (0.5 - X)*(0.025 - 0.05*X)) - 0.18*Y**4*(0.5 - X) + 0.6*Y*(0.5 - X)*(1.0 - 0.2*Y**3)) - 2*(0.05 - 0.1*X)*(0.5*(0.99 - (0.5 - X)*(0.025 - 0.05*X))*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X)) + 0.3*Y**2*(0.5 - X)*(1.0 - 0.2*Y**3)) + 0.5*((1 + Y)*(0.025 - 0.05*X) + 0.05*(1 + Y)*(0.5 - X))**2*(0.2 + 0.2*Y) - 0.72*Y**3*(0.5 - X)**2*(0.99 - (0.5 - X)*(0.025 - 0.05*X))"

    FvolX = FORMULE(VALE=FvX, NOM_PARA=("X", "Y"))
    FvolY = FORMULE(VALE=FvY, NOM_PARA=("X", "Y"))

FIN()
