# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2024 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

from code_aster.Commands import *
from code_aster import CA

CA.init("--test", ERREUR=_F(ALARME="EXCEPTION"))

test = CA.TestCase()

from math import *

# LECTURE ET CREATION DES MAILLAGES

MESH_Q4 = LIRE_MAILLAGE(FORMAT="MED")

MESH_Q9 = CREA_MAILLAGE(MAILLAGE=MESH_Q4, MODI_HHO=_F(TOUT="OUI"))


rho_cp = 2.0
LAMBDA = DEFI_CONSTANTE(VALE=rho_cp)
RHO_CP = DEFI_CONSTANTE(VALE=rho_cp)


# Closed-form solution

w = 2.0**0.5
T_max = (1 - 1 / cosh(w)) / w**2 - exp(-(w**2 + pi**2 / 4))
T_INF = FORMULE(VALE="(1-cosh(w*Y)/cosh(w))/w**2", w=w, NOM_PARA="Y")
T_INI = FORMULE(VALE="T_INF(Y)-cos(pi*Y/2.0)", T_INF=T_INF, NOM_PARA="Y")

# source(T) = rho_cp - rho_cp*w**2 * T

SOURCE = DEFI_FONCTION(
    NOM_PARA="TEMP",
    VALE=(0, rho_cp, 1, rho_cp - rho_cp * w**2),
    PROL_DROITE="LINEAIRE",
    PROL_GAUCHE="LINEAIRE",
)


# Usual data setting

FAKE_MAT = DEFI_MATERIAU(THER_NL=_F(LAMBDA=LAMBDA, RHO_CP=RHO_CP))
TIME = DEFI_LIST_REEL(DEBUT=0.0, INTERVALLE=_F(JUSQU_A=1.0, NOMBRE=100))


MAT_Q9 = AFFE_MATERIAU(MAILLAGE=MESH_Q9, AFFE=_F(GROUP_MA="ROD", MATER=FAKE_MAT))

MODEL_Q9 = AFFE_MODELE(
    MAILLAGE=MESH_Q9, AFFE=_F(GROUP_MA="ROD", PHENOMENE="THERMIQUE", MODELISATION="AXIS_HHO")
)

BND_Q9 = AFFE_CHAR_CINE(MODELE=MODEL_Q9, THER_IMPO=_F(GROUP_MA="END", TEMP=0))

# Non linear heating source

HEAT_Q9 = AFFE_CHAR_THER_F(MODELE=MODEL_Q9, SOUR_NL=_F(GROUP_MA="ROD", SOUR=SOURCE))

# Initial temperature field

phys_pb = CA.PhysicalProblem(MODEL_Q9, MAT_Q9)
hho = CA.HHO(phys_pb)

INI_TEMP = hho.projectOnHHOSpace(T_INI)

# Computation

EVOL_Q9 = THER_NON_LINE(
    MODELE=MODEL_Q9,
    INCREMENT=_F(LIST_INST=TIME),
    CHAM_MATER=MAT_Q9,
    EXCIT=(_F(CHARGE=BND_Q9), _F(CHARGE=HEAT_Q9)),
    ETAT_INIT=_F(CHAM_NO=INI_TEMP),
    CONVERGENCE=_F(RESI_GLOB_MAXI=1.0e-9),
    NEWTON=_F(REAC_ITER=1),
)

# Result checking (middle of the rod)

TEST_RESU(
    RESU=_F(
        GROUP_NO="PROBE",
        INST=1.0,
        REFERENCE="ANALYTIQUE",
        RESULTAT=EVOL_Q9,
        NOM_CHAM="HHO_TEMP",
        NOM_CMP="TEMP",
        VALE_CALC=0.2588438674008212,
        VALE_REFE=0.25897382948803593,
    )
)


test.printSummary()


FIN()
