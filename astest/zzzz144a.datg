#!/usr/bin/env python

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()

####################################################
##       Begin of NoteBook variables section      ##
####################################################
notebook.set("Lt", 290)
notebook.set("L1", 120)
notebook.set("L2", 50)
notebook.set("n1", 5)
notebook.set("n2", 2)
notebook.set("n3", 4)
notebook.set("n4", 3)
####################################################
##        End of NoteBook variables section       ##
####################################################
###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS

geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Cylinder_1 = geompy.MakeCylinderRH(100, "Lt")
Cylinder_2 = geompy.MakeCylinderRH(50, "Lt")
Cut_1 = geompy.MakeCutList(Cylinder_1, [Cylinder_2], True)
Plane_1 = geompy.MakePlaneLCS(None, 250, 1)
Translation_1 = geompy.MakeTranslation(Plane_1, 0, 0, "L1")
Translation_2 = geompy.MakeTranslation(Translation_1, 0, 0, "L2")
Partition_1 = geompy.MakePartition([Cut_1], [Translation_1, Translation_2], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
Plane_2 = geompy.MakePlaneLCS(None, 2000, 2)
Plane_3 = geompy.MakePlaneLCS(None, 2000, 3)
Partition_2 = geompy.MakePartition([Partition_1], [Plane_2, Plane_3], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
Rigide = geompy.CreateGroup(Partition_2, geompy.ShapeType["SOLID"])
geompy.UnionIDs(Rigide, [98, 122, 139, 156])
Encast = geompy.CreateGroup(Partition_2, geompy.ShapeType["FACE"])
geompy.UnionIDs(Encast, [69, 26, 90, 55])
Press = geompy.CreateGroup(Partition_2, geompy.ShapeType["FACE"])
geompy.UnionIDs(Press, [192])
Seg1 = geompy.CreateGroup(Partition_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(Seg1, [126])
Seg2 = geompy.CreateGroup(Partition_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(Seg2, [66])
Nepais = geompy.CreateGroup(Partition_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(Nepais, [54])
Ncirc = geompy.CreateGroup(Partition_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(Ncirc, [88])
Moment = geompy.CreateGroup(Partition_2, geompy.ShapeType["FACE"])
geompy.UnionIDs(Moment, [180, 214, 202, 229])
Compound_1 = geompy.MakeCompound([O, Partition_2])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Cylinder_1, 'Cylinder_1' )
geompy.addToStudy( Cylinder_2, 'Cylinder_2' )
geompy.addToStudy( Cut_1, 'Cut_1' )
geompy.addToStudy( Plane_1, 'Plane_1' )
geompy.addToStudy( Translation_1, 'Translation_1' )
geompy.addToStudy( Translation_2, 'Translation_2' )
geompy.addToStudy( Partition_1, 'Partition_1' )
geompy.addToStudy( Plane_2, 'Plane_2' )
geompy.addToStudy( Plane_3, 'Plane_3' )
geompy.addToStudy( Partition_2, 'Partition_2' )
geompy.addToStudyInFather( Partition_2, Rigide, 'Rigide' )
geompy.addToStudyInFather( Partition_2, Encast, 'Encast' )
geompy.addToStudyInFather( Partition_2, Press, 'Press' )
geompy.addToStudyInFather( Partition_2, Seg1, 'Seg1' )
geompy.addToStudyInFather( Partition_2, Seg2, 'Seg2' )
geompy.addToStudyInFather( Partition_2, Nepais, 'Nepais' )
geompy.addToStudyInFather( Partition_2, Ncirc, 'Ncirc' )
geompy.addToStudyInFather( Partition_2, Moment, 'Moment' )
geompy.addToStudy( Compound_1, 'Compound_1' )
[O_1, Partition_2_1, Rigide_1, Encast_1, Press_1, Seg1_1, Seg2_1, Nepais_1, Ncirc_1, Moment_1] = geompy.RestoreGivenSubShapes(Compound_1, [O, Partition_2, Rigide, Encast, Press, Seg1, Seg2, Nepais, Ncirc, Moment], GEOM.FSM_GetInPlace, False, False)
O_2 = geompy.CreateGroup(Compound_1, geompy.ShapeType["VERTEX"])
geompy.UnionIDs(O_2, [2])
geompy.addToStudyInFather( Compound_1, O_2, 'O' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()

Mesh_1 = smesh.Mesh(Compound_1)
Regular_1D = Mesh_1.Segment()
Nb_Segments_1 = Regular_1D.NumberOfSegments("n1",None,[])
Quadrangle_2D = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Hexa_3D = Mesh_1.Hexahedron(algo=smeshBuilder.Hexa)
Regular_1D_1 = Mesh_1.Segment(geom=Nepais_1)
Nb_Segments_2 = Regular_1D_1.NumberOfSegments("n2",None,[])
Propagation_of_1D_Hyp = Regular_1D_1.Propagation()
Nb_Segments_3 = smesh.CreateHypothesis('NumberOfSegments')
Nb_Segments_3.SetNumberOfSegments( "n3" )
Nb_Segments_3.SetReversedEdges( [] )
Nb_Segments_3.SetObjectEntry( "Partition_2" )
Regular_1D_2 = Mesh_1.Segment(geom=Seg1_1)
Nb_Segments_4 = Regular_1D_2.NumberOfSegments("n4",None,[])
status = Mesh_1.AddHypothesis(Propagation_of_1D_Hyp,Seg1_1)
Rigide_2 = Mesh_1.GroupOnGeom(Rigide_1,'Rigide',SMESH.VOLUME)
Encast_2 = Mesh_1.GroupOnGeom(Encast_1,'Encast',SMESH.FACE)
Press_2 = Mesh_1.GroupOnGeom(Press_1,'Press',SMESH.FACE)
Moment_2 = Mesh_1.GroupOnGeom(Moment_1,'Moment',SMESH.FACE)

[ Rigide_2, Encast_2, Press_2, Moment_2] = Mesh_1.GetGroups()

isDone = Mesh_1.Compute()
smesh.SetName(Mesh_1, 'Mesh_1')

# Ajout du POI1 pour imposer un moment
nO = Mesh_1.AddNode(0, 0, 0)
ma0d1 = Mesh_1.Add0DElement(nO)
grpma0d1 = Mesh_1.CreateEmptyGroup( SMESH.ELEM0D, 'PO' )
_ = grpma0d1.Add( [ma0d1] )

Sub_mesh_1 = Regular_1D_1.GetSubMesh()
Sub_mesh_3 = Regular_1D_2.GetSubMesh()
Regular_1D_3 = Mesh_1.GetSubMesh( Ncirc_1, 'Regular_1D' )


## Set names of Mesh objects
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Hexa_3D.GetAlgorithm(), 'Hexa_3D')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Nb_Segments_2, 'Nb. Segments_2')
smesh.SetName(Propagation_of_1D_Hyp, 'Propagation of 1D Hyp. on Opposite Edges_1')
smesh.SetName(Nb_Segments_1, 'Nb. Segments_1')
smesh.SetName(Encast_2, 'Encast')
smesh.SetName(Nb_Segments_3, 'Nb. Segments_3')
smesh.SetName(Press_2, 'Press')
smesh.SetName(Nb_Segments_4, 'Nb. Segments_4')
smesh.SetName(Moment_2, 'Moment')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(Rigide_2, 'Rigide')
smesh.SetName(O_3, 'O')
smesh.SetName(Regular_1D_3, 'Regular_1D')
smesh.SetName(Sub_mesh_3, 'Sub-mesh_3')
smesh.SetName(Sub_mesh_1, 'Sub-mesh_1')
smesh.SetName(grpma0d1, 'PO')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()