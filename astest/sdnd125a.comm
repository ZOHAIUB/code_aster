# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# person_in_charge: hassan.berro at edf.fr

#################################################
##############Model Illustration#################
#################################################
#    _______________________________________
#   |              --> x-axis               |
#   | K                                  K  |
#   |vvvv(M_left)  (M_center)  (M_right)vvvv|
#   |         \       /  \       /          |
#   |          \choc1/    \choc2/           |
#   |---------------------------------------|

from math import *

#################################################
##############Study Parameters###################
#################################################
# General characteristics
M_center = 10.0  # [kg]
M_left = 4.5  # [kg]
M_right = 3.7  # [kg]
K_outer = 1.0e3  # [N/m]
t0 = 0.00  # [s]
t1 = 1.00  # [s]
dt = 1.0e-6  # [s]
freq = 2.00  # [Hz] charging frequency (sinusoidal function on central node)
ampl = 60.00  # [N]  charging amplitude

# Nonlinearity-specific characteristics
Kc_left = 1.0e7  # [N/m]
Kc_right = 3.0e6  # [N/m]

# Automatically calculated
om = 2.0 * pi * freq
#################################################

DEBUT(CODE="OUI", DEBUG=_F(SDVERI="OUI"))

MESH = LIRE_MAILLAGE(FORMAT="ASTER")

MODEL = AFFE_MODELE(MAILLAGE=MESH, AFFE=_F(TOUT="OUI", PHENOMENE="MECANIQUE", MODELISATION="DIS_T"))

ELEM_CH = AFFE_CARA_ELEM(
    MODELE=MODEL,
    DISCRET=(
        _F(GROUP_MA="CENTER", CARA="M_T_D_N", VALE=(M_center)),
        _F(GROUP_MA="LEFT", CARA="M_T_D_N", VALE=M_left),
        _F(GROUP_MA="RIGHT", CARA="M_T_D_N", VALE=M_right),
        _F(GROUP_MA="OUTER", CARA="K_T_D_L", VALE=(K_outer, 0.0, 0.0)),
        _F(GROUP_MA="DUMMY", CARA="M_T_D_L", VALE=(0.0)),
        _F(
            GROUP_MA="DUMMY", CARA="K_T_D_L", VALE=(1.0e-12, 0.0, 0.0)
        ),  # fictional springs, used for constructing the dynamics basis
        _F(GROUP_MA="DUMMY", CARA="M_T_D_L", VALE=(0.0)),
    ),
)

COND_2D = AFFE_CHAR_MECA(MODELE=MODEL, DDL_IMPO=(_F(TOUT="OUI", DY=0.0, DZ=0.0)))

BND_COND = AFFE_CHAR_MECA(MODELE=MODEL, DDL_IMPO=(_F(GROUP_NO="BOUND", DX=0.0)))

##########################################################

K_ELEM = CALC_MATR_ELEM(
    MODELE=MODEL, CHARGE=(COND_2D, BND_COND), CARA_ELEM=ELEM_CH, OPTION="RIGI_MECA"
)

M_ELEM = CALC_MATR_ELEM(
    MODELE=MODEL, CHARGE=(COND_2D, BND_COND), CARA_ELEM=ELEM_CH, OPTION="MASS_MECA"
)

EQ_NBRG = NUME_DDL(MATR_RIGI=K_ELEM)

MAT_K = ASSE_MATRICE(MATR_ELEM=K_ELEM, NUME_DDL=EQ_NBRG)

MAT_M = ASSE_MATRICE(MATR_ELEM=M_ELEM, NUME_DDL=EQ_NBRG)

BASIS = CALC_MODES(
    MATR_RIGI=MAT_K, MATR_MASS=MAT_M, OPTION="PLUS_PETITE", CALC_FREQ=_F(NMAX_FREQ=5)
)

RED_NBRG = NUME_DDL_GENE(BASE=BASIS, STOCKAGE="DIAG")

##########################################################

CHAR_UFX = AFFE_CHAR_MECA(MODELE=MODEL, FORCE_NODALE=_F(GROUP_NO="CENTER", FX=1.0))

VECT_UFX = CALC_VECT_ELEM(CHARGE=CHAR_UFX, OPTION="CHAR_MECA")

UNIT_FX = ASSE_VECTEUR(VECT_ELEM=VECT_UFX, NUME_DDL=EQ_NBRG)

UFX_RED = PROJ_VECT_BASE(BASE=BASIS, VECT_ASSE=UNIT_FX, NUME_DDL_GENE=RED_NBRG, TYPE_VECT="FORC")

M_RED = PROJ_MATR_BASE(BASE=BASIS, MATR_ASSE=MAT_M, NUME_DDL_GENE=RED_NBRG)

K_RED = PROJ_MATR_BASE(BASE=BASIS, MATR_ASSE=MAT_K, NUME_DDL_GENE=RED_NBRG)


FLOOR = DEFI_OBSTACLE(TYPE="BI_PLAN_Y")


SINE_FOR = FORMULE(VALE="ampl * sin ( om*INST )", ampl=ampl, om=om, NOM_PARA="INST")


INSTANTS = DEFI_LIST_REEL(DEBUT=t0 - dt, INTERVALLE=_F(JUSQU_A=t1 + dt, PAS=dt))

FX_TFUNC = CALC_FONC_INTERP(FONCTION=SINE_FOR, LIST_PARA=INSTANTS, NOM_PARA="INST")

INTEGR = DYNA_VIBRA(
    TYPE_CALCUL="TRAN",
    BASE_CALCUL="GENE",
    SCHEMA_TEMPS=_F(SCHEMA="DIFF_CENTRE"),
    MATR_MASS=M_RED,
    MATR_RIGI=K_RED,
    AMOR_MODAL=_F(AMOR_REDUIT=0.0),
    INCREMENT=_F(INST_INIT=t0, INST_FIN=t1, PAS=dt),
    EXCIT=_F(VECT_ASSE_GENE=UFX_RED, FONC_MULT=FX_TFUNC),
    COMPORTEMENT=(
        _F(
            RELATION="DIS_CHOC",
            GROUP_NO_1="CENTER",
            GROUP_NO_2="LEFT",
            OBSTACLE=FLOOR,
            NORM_OBST=(0.0, 1.0, 0.0),
            JEU=0.0,
            RIGI_NOR=Kc_left,
            # AMOR_NOR   = 0., # Intentially not specified so that an optimized value is used
            INTITULE="CHOC1",
        ),
        _F(
            RELATION="DIS_CHOC",
            GROUP_NO_1="CENTER",
            GROUP_NO_2="RIGHT",
            OBSTACLE=FLOOR,
            NORM_OBST=(0.0, -1.0, 0.0),
            JEU=0.0,
            RIGI_NOR=Kc_right,
            # AMOR_NOR   = 0., # Intentially not specified so that an optimized value is used
            INTITULE="CHOC2",
        ),
    ),
    ARCHIVAGE=_F(PAS_ARCH=10),
    TRAITEMENT_NONL="EXPLICITE",
    INFO=2,
)


FN = RECU_FONCTION(
    RESU_GENE=INTEGR, GROUP_NO_CHOC="CENTER", INTITULE="CHOC1", PARA_X="INST", PARA_Y="VINT1"
)

TEST_FONCTION(
    VALEUR=(_F(VALE_CALC=1698.44669074479, CRITERE="RELATIF", VALE_PARA=0.68044, FONCTION=FN))
)

IMPR_FONCTION(
    FORMAT="XMGRACE",
    # PILOTE='INTERACTIF',
    COURBE=(_F(FONCTION=FN)),
)

C = RECU_FONCTION(RESU_GENE=INTEGR, GROUP_NO="CENTER", NOM_CMP="DX", NOM_CHAM="DEPL")
L0 = RECU_FONCTION(RESU_GENE=INTEGR, GROUP_NO="LEFT", NOM_CMP="DX", NOM_CHAM="DEPL")
R0 = RECU_FONCTION(RESU_GENE=INTEGR, GROUP_NO="RIGHT", NOM_CMP="DX", NOM_CHAM="DEPL")

UNIT_F = DEFI_FONCTION(
    NOM_RESU="DEPL",
    NOM_PARA="INST",
    PROL_GAUCHE="CONSTANT",
    PROL_DROITE="CONSTANT",
    INTERPOL="LIN",
    VALE=(t0 - dt, 1.0, t1 + dt, 1.0),
)

L = CALC_FONCTION(
    COMB=(_F(FONCTION=L0, COEF=1.0), _F(FONCTION=UNIT_F, COEF=-0.1))
)  # Add up the mesh x-coordinate to obtain the absolute position

R = CALC_FONCTION(
    COMB=(_F(FONCTION=R0, COEF=1.0), _F(FONCTION=UNIT_F, COEF=0.1))
)  # Add up the mesh x-coordinate to obtain the absolute position

IMPR_FONCTION(
    FORMAT="XMGRACE",
    # PILOTE='INTERACTIF',
    COURBE=(_F(FONCTION=C), _F(FONCTION=L), _F(FONCTION=R)),
)


FIN()
