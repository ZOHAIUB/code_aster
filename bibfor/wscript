# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os.path as osp
from functools import partial

from waflib import Configure, Errors, Logs, Utils


def options(self):
    self.load("compiler_fc")


def configure(self):
    self.load("compiler_fc")
    incpath = osp.join(self.path.get_src().abspath(), "include")
    self.env.append_value("INCLUDES_BIBFOR", incpath)

    self.check_fortran()
    self.check_fortran_dummy_main()
    # mangling check may fail with some FCFLAGS (-flto for example)
    self.check_fortran_mangling()
    self.check_fortran_compiler_flags()
    if self.env.FORTRAN_MANGLING and self.env.FORTRAN_MANGLING[0] == "":
        self.define("ASTER_NO_UNDERSCORE", 1)
    else:
        self.undefine("ASTER_NO_UNDERSCORE")
    self.check_fortran_types()
    self.check_fortran_preprocessor()
    self.check_optional_features()


def build(self):
    env = self.all_envs[self.variant]
    get_srcs = self.path.get_src().ant_glob

    use = ["BIBFOR", "MED", "PETSC", "MUMPS", "MATH", "NUMPY"]
    if self.env.BUILD_OPENMP:
        use.append("OPENMP")

    src_i8 = get_srcs("**/*.F90", excl="third_party_interf/*.F90")
    src_ext = get_srcs("third_party_interf/*.F90")
    # use int64 as default integer...
    self(
        features=("fc fcstlib" if self.env.ASTER_PLATFORM_MINGW else "fc fcshlib"),
        name="asterbibfor",
        target="bibfor",
        rpath="$ORIGIN",
        source=src_i8,
        use=use + ["INT64"],
        env=env.derive(),
        install_path=env.ASTERLIBDIR,
    )
    # ... except for subroutines linked against external libraries
    self(
        features=("fc fcstlib" if self.env.ASTER_PLATFORM_MINGW else "fc fcshlib"),
        name="asterbibfor_ext",
        target="bibfor_ext",
        rpath="$ORIGIN",
        source=src_ext,
        defines=["WITHOUT_INT64"],
        use=use,
        env=env.derive(),
        install_path=env.ASTERLIBDIR,
    )


###############################################################################
MAIN = "      program main\n      end program main\n"


@Configure.conf
def check_fortran_compiler_flags(self):
    self.check_fortran_compiler_options("-fPIC")
    # self.check_fortran_compiler_options("-fno-lto")
    if "gfortran" in self.env.FC_NAME.lower():
        if "64" in self.env.DEST_CPU:
            self.check_fortran_compiler_options("-fdefault-integer-8", dest="FCFLAGS_INT64")
            self.check_fortran_compiler_options(
                ["-fdefault-real-8", "-fdefault-double-8"], dest="FCFLAGS_INT64"
            )
        self.check_fortran_compiler_options("-Wimplicit-interface")
        self.check_fortran_compiler_options("-Wintrinsic-shadow")
        self.check_fortran_compiler_options("-fno-aggressive-loop-optimizations")
        # long lines after preprocessing
        self.check_fortran_compiler_options("-ffree-line-length-none")
    if "ifort" in self.env.FC_NAME.lower():
        self.check_fortran_compiler_options(["-fpe0", "-traceback"])
        if "64" in self.env.DEST_CPU:
            self.check_fortran_compiler_options("-i8", dest="FCFLAGS_INT64")
            self.check_fortran_compiler_options("-r8", dest="FCFLAGS_INT64")
        self.check_fortran_compiler_options(["-nogen-interfaces", "-xCORE-AVX2"])
        # all Intel specific features must use:
        #   ASTER_HAVE_INTEL_IFORT && ASTER_HAVE_xxx
        # this marker must be specified on command line (using -D)
        # because it must not be enabled by aslint
        self.env.append_unique("DEFINES", "ASTER_HAVE_INTEL_IFORT")
    self.start_msg("Fortran compiler flags")
    self.end_msg(self.env["FCFLAGS"])


@Configure.conf
def check_fortran_compiler_options(self, options, dest="FCFLAGS"):
    """Check fortran compiler options"""
    if type(options) not in (list, tuple):
        options = [options]
    self.start_msg("Checking for fortran option")
    if self.check_fc(fragment=MAIN, fcflags=options, mandatory=False):
        self.env.append_unique(dest, options)
        self.end_msg("yes (%s)" % " ".join(options))
    else:
        self.end_msg("no (%s)" % " ".join(options), "YELLOW")


@Configure.conf
def check_fortran_types(self):
    """Check fortran types and their matching C type"""
    self.check_sizeof_integer4()
    self.check_sizeof_integer()
    self.check_sizeof_logical()
    self.check_sizeof_real4()
    self.check_sizeof_real8()
    self.check_sizeof_complex()
    self.check_sizeof_string_size()
    self.check_sizeof_blas_int()
    self.check_sizeof_mpi_int()


@Configure.conf
def check_fortran_preprocessor(self):
    """Check how behaves the fortran preprocessor"""

    def _check(define, msg, fragment):
        """"""
        program = (
            "\n".join(["program main", "%s", "print *, str(hello)", "end program main", ""])
            % fragment
        )
        self.start_msg("Checking fpp stringify using %s" % msg)
        res = self.check_fc(
            fragment=program,
            compile_filename="test.F90",
            mandatory=False,
            execute=True,
            define_ret=True,
        )
        ok = res and "hello" in res
        if ok:
            self.define(define, 1)
        else:
            self.undefine(define)
        self.end_msg("yes" if ok else "no")

    _check("ASTER_STRINGIFY_USE_OPERATOR", "#", "#define str(arg) #arg")
    _check("ASTER_STRINGIFY_USE_QUOTES", '""', '#define str(arg) "arg"')
    # preprocessing may create long lines, test with more than 500 columns
    fragment = "\n".join(
        [
            "program main",
            "integer :: var",
            "var = 1 " + ("+" + " " * 100 + "1") * 5,
            "end program main",
            "",
        ]
    )
    if not self.check_fc(
        msg="Checking compilation with long lines",
        fragment=fragment,
        mandatory=False,
        compile_filename="test.F90",
    ):
        Logs.warn(
            "The compiler failed on long lines that may be generated "
            "by the precompiler. If the build fails, you must provide a "
            "relevant option using FCFLAGS."
        )


@Configure.conf
def code_checker(
    self,
    define,
    check,
    fragment,
    start_msg,
    error_msg,
    into=None,
    optional=False,
    setbool=False,
    use="",
):
    """Check the size of a type compiling 'fragment' code with 'check',
    add 'define' macro."""
    # @conf decorator use 'mandatory=True' argument to raise exception
    # so it should not be used here
    self.start_msg(start_msg)
    try:
        size = check(
            fragment=fragment, mandatory=not optional, execute=True, define_ret=True, use=use
        )
        if size is None:
            raise RuntimeError
        try:
            size = size.strip()  # raise AttributeError if size is None
            if size.isdigit():
                size = int(size)
            if into and size not in into:
                raise ValueError
            val = 1 if setbool else size
            if define:
                self.define(define, val, quote=False)
                # for easy access to the value in other wscripts
                self.env[define] = val
        except ValueError:
            raise Errors.ConfigurationError(error_msg % locals())
        except:
            raise RuntimeError
    except RuntimeError:
        self.end_msg("no", "YELLOW")
        if define and setbool:
            self.undefine(define)
    else:
        self.end_msg(str(size))


@Configure.conf
def set_define_from_env(self, define, start_msg, error_msg, into=None, default=None):
    """Set 'define' macro from the environment."""
    self.start_msg(start_msg)
    self.add_os_flags(define)
    try:
        try:
            size = self.env[define][0]
            size = size.strip()  # raise AttributeError if size is None
            if size.isdigit():
                size = int(size)
            if into and size not in into:
                raise ValueError
        except (IndexError, AttributeError):
            if default is None:
                size = "not defined, no default value"
                raise Errors.ConfigurationError(error_msg % locals())
            else:
                size = default
        except ValueError:
            raise Errors.ConfigurationError(error_msg % locals())
    except AttributeError:
        self.end_msg("no", "YELLOW")
    else:
        self.define(define, size, quote=False)
        # for easy access to the value in other wscripts
        self.env[define] = size
        self.end_msg(size)


@Configure.conf
def check_sizeof_integer(self):
    """Check fortran integer size"""
    fragment = "\n".join(["integer(kind=8) :: i", "print *, sizeof(i)", "end"])
    self.code_checker(
        "ASTER_INT_SIZE",
        self.check_fc,
        fragment,
        "Checking size of integer8 size",
        "unexpected value for sizeof(aster_int): %(size)s",
        into=(4, 8),
    )
    self.check_c_fortran_integer()


@Configure.conf
def check_sizeof_integer4(self):
    """Check fortran integer4 size"""
    fragment = "\n".join(["integer(kind=4) :: i", "print *, sizeof(i)", "end"])
    self.code_checker(
        "ASTER_INT4_SIZE",
        self.check_fc,
        fragment,
        "Checking size of integer4",
        "unexpected value for sizeof(aster_int4): %(size)s",
        into=(4,),
    )
    self.check_c_fortran_integer4()


@Configure.conf
def check_sizeof_logical(self):
    """Check fortran logical(kind=1) size"""
    fragment = "\n".join(["logical(kind=1) :: i", "print *, sizeof(i)", "end"])
    self.code_checker(
        "ASTER_LOGICAL_SIZE",
        self.check_fc,
        fragment,
        "Checking size of logical",
        "unexpected value for sizeof(aster_logical): %(size)s",
        into=(1,),
    )


@Configure.conf
def check_sizeof_real4(self):
    """Check fortran real4 size"""
    fragment = "\n".join(["real(kind=4) :: r", "print *, sizeof(r)", "end"])
    self.code_checker(
        "ASTER_REAL4_SIZE",
        self.check_fc,
        fragment,
        "Checking size of simple precision real",
        "unexpected value for sizeof(aster_real4): %(size)s",
        into=(4, 8),
    )
    self.check_c_fortran_real4()


@Configure.conf
def check_sizeof_real8(self):
    """Check fortran real8 size"""
    fragment = "\n".join(["real(kind=8) :: r", "print *, sizeof(r)", "end"])
    self.code_checker(
        "ASTER_REAL8_SIZE",
        self.check_fc,
        fragment,
        "Checking size of double precision real",
        "unexpected value for sizeof(aster_real8): %(size)s",
        into=(4, 8),
    )
    self.check_c_fortran_real8()


@Configure.conf
def check_sizeof_complex(self):
    """Check fortran complex size"""
    fragment = "\n".join(["complex(kind=8) :: r", "print *, sizeof(r)", "end"])
    self.code_checker(
        "ASTER_COMPLEX_SIZE",
        self.check_fc,
        fragment,
        "Checking size of double complex",
        "unexpected value for sizeof(aster_complex): %(size)s",
        into=(8, 16),
    )


@Configure.conf
def check_sizeof_string_size(self):
    """Check fortran string length size"""
    self.start_msg("Setting type for fortran string length")
    # prefer use ISO_C_BINDING
    # ref: https://gcc.gnu.org/onlinedocs/gfortran/Argument-passing-conventions.html
    # ref: http://gcc.gnu.org/onlinedocs/gfortran/Interoperability-with-C.html
    typ = "size_t"
    if self.env.FC_NAME.lower() == "gfortran" and int(self.env.FC_VERSION[0] or 0) <= 7:
        typ = "int"
    self.define("ASTER_C_STRING_SIZE", typ, quote=False)
    self.end_msg(typ)


def _test_type(size, values):
    """return code using size and test_cmd"""
    test_cmd = " else ".join(["test(%s)" % i for i in values])
    code = r"""
    #include <stdlib.h>
    #include <stdio.h>
    #include <stdint.h>
    #define SIZE  %s
    #define test(a) if (sizeof(a) == SIZE) { printf("%%s\n", #a); }
    int main(void){
        int ier;
        %s
        return 0;
    }
    """ % (size, test_cmd)
    return code


@Configure.conf
def check_c_fortran_integer(self):
    """Check the C type equivalent to fortran integer"""
    assert self.env["ASTER_INT_SIZE"], "ASTER_INT_SIZE must be computed before"
    into = ("int64_t", "long")
    fragment = _test_type(self.env["ASTER_INT_SIZE"], into)
    self.code_checker(
        "ASTER_C_FORTRAN_INT",
        self.check_cc,
        fragment,
        "Checking the matching C type",
        "unexpected value for C integer type: %(size)s",
        into=into,
    )


@Configure.conf
def check_c_fortran_integer4(self):
    """Check the C type equivalent to fortran integer"""
    assert self.env["ASTER_INT4_SIZE"], "ASTER_INT4_SIZE must be computed before"
    into = ("int32_t", "int")
    fragment = _test_type(self.env["ASTER_INT4_SIZE"], into)
    self.code_checker(
        "ASTER_C_FORTRAN_INT4",
        self.check_cc,
        fragment,
        "Checking the matching C type",
        "unexpected value for C short int type: %(size)s",
        into=into,
    )


@Configure.conf
def check_c_fortran_real4(self):
    """Check the C type equivalent to fortran real4"""
    assert self.env["ASTER_REAL4_SIZE"], "ASTER_REAL4_SIZE must be computed before"
    into = ("float", "double")
    fragment = _test_type(self.env["ASTER_REAL4_SIZE"], into)
    self.code_checker(
        "ASTER_C_FORTRAN_REAL4",
        self.check_cc,
        fragment,
        "Checking the matching C type",
        "unexpected value for C float type: %(size)s",
        into=into,
    )


@Configure.conf
def check_c_fortran_real8(self):
    """Check the C type equivalent to fortran real8"""
    assert self.env["ASTER_REAL8_SIZE"], "ASTER_REAL8_SIZE must be computed before"
    into = ("double", "float")
    fragment = _test_type(self.env["ASTER_REAL8_SIZE"], into)
    self.code_checker(
        "ASTER_C_FORTRAN_REAL8",
        self.check_cc,
        fragment,
        "Checking the matching C type",
        "unexpected value for C double type: %(size)s",
        into=into,
    )


@Configure.conf
def check_optimization_fcflags(self):
    """Check for optimization FCFLAGS."""
    self.setenv("debug")
    self.start_msg("Setting fortran debug flags")
    self.define("ASTER_DEBUG_FC", 1)
    self.remove_optflags("FCFLAGS")
    flags = ["-g", "-O0"] + Utils.to_list(self.env["FCFLAGS_ASTER_DEBUG"])
    if self.options.enable_coverage:
        flags.append("--coverage")
        self.env.append_unique("LINKFLAGS", "--coverage")
    if self.options.enable_asan:
        flags.extend(["-fsanitize=address", "-fno-omit-frame-pointer"])
        self.env.append_unique("LINKFLAGS", ["-fsanitize=address", "-fno-omit-frame-pointer"])
    self.env.append_unique("FCFLAGS", flags)
    self.end_msg(flags)

    self.setenv("release")
    self.start_msg("Checking loop optimization with LOC")
    testit = partial(self.check_fc, mandatory=False, compile_filename="snippet.f", execute=True)
    flags = [f for f in self.env.FCFLAGS if (f.startswith("-O") and f[-1].isdigit()) or f == "-g"]
    # remove existing optimization flags
    list(map(self.env.FCFLAGS.remove, flags))
    if not flags:
        flags = ["-O2"]
    # Loop optimization error using LOC function in gfortran
    # GCC bug: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=51267
    # Check if it must be fixed using the 'VOLATILE' statement.
    # different cases to check
    # '-fno-tree-dse' is a workaround that works with gfortran 4.6
    last_ressort = ["-O0"]
    cases = [
        (fragment_without_volatile, (flags, flags + ["-fno-tree-dse"])),
        (fragment_with_volatile, (flags, flags + ["-fno-tree-dse"], last_ressort)),
    ]
    optflag = ""
    legend = "failed"
    for code, all_opts in cases:
        for opts in all_opts:
            if testit(fcflags=opts, fragment=code, mandatory=opts is last_ressort):
                optflag = opts
                if code is fragment_with_volatile:
                    # should be used in jeveux*.h in future
                    legend = "VOLATILE is required"
                    self.define("ASTER_USE_VOLATILE_COMMON", 1)
                else:
                    legend = "VOLATILE not required"
                break
        if optflag:
            break
    self.end_msg(legend)

    # GCC bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100227
    self.start_msg("Checking implicit loop in write")
    res = None
    for flag in ("", "-fno-frontend-optimize"):
        out = self.check_fc(
            fcflags=optflag + [flag],
            compile_filename="test.F90",
            fragment=fragment_write_loop,
            execute=True,
            mandatory=False,
            define_ret=True,
        )
        try:
            values = [int(float(i)) for i in out.split()]
            if values == [2, 4, 6]:
                res = "%s is required" % repr(flag) if flag else "ok"
                optflag.append(flag)
                break
        except ValueError:
            pass
    if res is None:
        self.end_msg("failed", "YELLOW")
    else:
        self.end_msg(res)
    if "gfortran" in self.env.FC_NAME.lower():
        if "-fno-frontend-optimize" not in optflag:
            self.check_fortran_compiler_options("-finline-matmul-limit=6")
    self.start_msg("Setting Fortran optimization flags")
    self.env.append_unique("FCFLAGS", optflag)
    self.end_msg(optflag)


@Configure.conf
def check_optional_features(self):
    """Check for optional features depending on compiler type or version"""
    fragment = "\n".join(["call backtrace", "print *, 'yes'", "end"])
    self.code_checker(
        "ASTER_HAVE_BACKTRACE",
        self.check_fc,
        fragment,
        "Check for backtrace feature",
        "failure",
        optional=True,
        setbool=True,
    )

    fragment = "\n".join(
        ["use ifcore", "call tracebackqq(USER_EXIT_CODE=-1)", "print *, 'yes'", "end"]
    )
    self.code_checker(
        "ASTER_HAVE_TRACEBACKQQ",
        self.check_fc,
        fragment,
        "Check for tracebackqq feature",
        "failure",
        optional=True,
        setbool=True,
    )


# code fragments
fragment_with_volatile = """
       program testloc
       volatile ius
       integer*8 ius(1)
       integer*8 i,iad,n,loc,exitcode
       logical ok
       integer*8 tab(6)
       n = 2
       iad = ( loc(tab) - loc(ius) ) / 8
       do 11 i=1,n
         ius(iad+(i*3-2) ) = -1
         ius(iad+(i*3-1) ) = -1
         ius(iad+(i*3  ) ) = -1
  11   continue
       ok = .true.
       do 22 i=1,3*n
         if (tab(i) .ne. -1) ok = .false.
  22   continue
       if (ok) then
         exitcode = 0
         print *, 'OK'
       else
         exitcode = 1
         print *, 'FAILED'
       endif
       call EXIT(exitcode)
       end program testloc
"""

fragment_without_volatile = fragment_with_volatile.replace("volatile ius", "")

fragment_write_loop = """
program p
    implicit none
    integer, parameter :: nbmode = 3
    integer :: k
    real    :: mass(nbmode*2)
    do k = 1, nbmode*2
       mass(k) = k
    end do
    print *, (mass(k+k), k=1,nbmode)
  end program
"""
