.. _devguide-documentation:

#####################
Writing documentation
#####################

************
Introduction
************

The documentation is written in `reStructuredText`_ using the
`Sphinx Documentation Generator <http://www.sphinx-doc.org>`_.

The theme is based on `ReadTheDocs Sphinx Theme
<https://readthedocs.org/>`_ with a few modifications.

See the Sphinx Documentation for details.


***************
Getting started
***************

===================================
Documenting functions and arguments
===================================

Documentation of functions arguments is using the *Google Style* supported
by the `sphinx-ext-napoleon`_ extension.

This style is used in C++/Python bindings, for example, see the documentation of
:py:func:`code_aster.Objects.Formula.evaluate` which is generated from the
source file :file:`FormulaInterface.cxx`:

.. code-block:: c++

            .def( "evaluate", &FormulaClass::evaluate, R"(
    Evaluate the formula with the given variables values.

    Arguments:
        val (list[float]): List of the values of the variables.

    Returns:
        float/complex: Value of the formula for these values.
            )",
                ( py::arg( "self" ), py::arg( "*val" ) ) )


As an example for pure Python function, this description of :py:func:`~help_doc.my_function`:

.. automodule:: help_doc
   :members:

is automatically generated from this source file:

.. literalinclude:: ../examples/help_doc.py


=============================
Automatically generated pages
=============================

All source pages under :ref:`codeaster-objects` are automatically generated,
except the page :ref:`devguide-objects_ext`.
These pages present all objects defined from :py:mod:`code_aster.Objects` by
subclasses of :py:class:`~code_aster.Objects.DataStructure` and the other
types.

These pages are automatically generated by the script
:file:`doc/scripts/generate_rst.py`. It is similar to *sphinx-apidoc* by sorting
and filtering objects in categories.

Providing a *Continous Deployment* of the documentation on ReadTheDocs
would require to install all the code_aster prerequisites to entirely build
``libaster.so`` from scratch.
That's why the source tree also provides the script named
:file:`doc/scripts/build_pylibaster.py`. It extends the *pydoc* possibilities
with a "Python renderer". It allows to export a ``libaster.py`` module with
the classes and functions from ``libaster.so`` with the signatures and docstrings
only.

These scripts are executed by ``./waf doc`` and write the automatically generated
files into the source tree at ``doc/_automatic_``.


=====================================================
Link to :py:class:`~code_aster.Objects.DataStructure`
=====================================================

The previous example shows how to add a hyperlink to a *DataStructure*
(here :py:class:`~code_aster.Objects.Mesh`).

Please use links by refering to the :py:mod:`code_aster.Objects` package
like this:

.. code-block:: rst

    :py:class:`code_aster.Objects.Mesh`

and not:

.. code-block:: rst

    :py:class:`libaster.Mesh`

The objects are the same but the documentation of
:py:class:`code_aster.Objects.Mesh` exists but not that of
:py:class:`libaster.Mesh`.

.. note::
    Please always use links to *DataStructures*, *Classes* or *Methods* in
    the docstrings to improve the navigation in the documentation.


=================
Link to functions
=================

Use the same pattern to add a link to a function.
Remember to use the full/native *path* to generate the hyperlink:

.. code-block:: rst

    :py:func:`~code_aster.Supervis.Serializer.saveObjects`

and not:

.. code-block:: rst

    :py:func:`code_aster.saveObjects`

even if :py:func:`~code_aster.Supervis.Serializer.saveObjects` is imported
at the toplevel of the package.


.. _devguide-documentation-link_to_paragraph:

================================
Link to documentation paragraphs
================================

When it is possible, prefer link to Python objects (see previous paragraph).
Please use `ref`_ Sphinx role to add an internal link to another
part of the documentation, and not the reStructuredText notation which is more
difficult to maintain.

Label names used for cross-referencing must be unique. The convention is the
code_aster documentation is: ``part-file[-section]``.
For example, if one needs to add a link to this paragraph, just add before this
paragraph:

.. code-block:: rst

    .. _devguide-documentation-link_to_paragraph:

and insert a link with:

.. code-block:: rst

    :ref:`devguide-documentation-link_to_paragraph`

that is rendered with :ref:`devguide-documentation-link_to_paragraph`.


.. _ref: http://www.sphinx-doc.org/en/stable/markup/inline.html?role-ref#role-ref


===============
Add an equation
===============

.. todo:: Adding equations needs more requirements (``dvipng`` for example).


===============
Insert an image
===============

This image

.. image:: ../img/code_aster_200.png
   :align: center

is inserted with :

.. code-block:: rst

    .. image:: ../img/code_aster_200.png
        :align: center

===========
Conventions
===========

reStructuredText uses markers to define the section structure.
Even the symbols used may change from one source file to another.

Please respect this convention to keep consistency between documents:

.. code-block:: rst

    #######
    Section
    #######

    *******
    Title 1
    *******

    =======
    Title 2
    =======

    Title 3
    -------

    Title 4
    ~~~~~~~


****************************
Generating the documentation
****************************

=============
Configuration
=============

Sphinx installation and requirements are checked during ``./waf configure``.

You need at least: ``sphinx-build``, ``dot`` and ``convert``.

.. note::
    The documentation is only built with the MPI configuration.

============================
Generation of html documents
============================

To automatically extract the documentation from the Python objects, Sphinx
imports the objects themself. That means that ``libaster`` is imported, and
so, it must have been compiled.
That's why you must build code_aster **before** generating its documentation.

First step ``./waf install``, and then ``./waf doc``.

The html documentation is installed into ``<install-dir>/share/doc/html``.

.. note::
    It is necessary to remove the ``build/{debug,release}/doc`` directory
    to reflect last changes to update the :ref:`devguide-todolist` page.


========================
Browse the documentation
========================

Just open the :file:`index.html` from the installation directory:

.. code-block:: sh

    firefox ../install/mpi/share/doc/html/index.html


*********
Resources
*********


- `Sphinx Documentation Content
  <http://www.sphinx-doc.org/en/master/contents.html>`_.

- `reStructuredText`_ - Official site.

- `reStructuredText Primer (Sphinx documentation)
  <http://www.sphinx-doc.org/en/master/rest.html>`_.


.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _sphinx-ext-napoleon: https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html
