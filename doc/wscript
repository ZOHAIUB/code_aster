# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2025 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os
import os.path as osp
import shutil
import sys

from waflib import Configure, Errors, Logs, Utils

from waftools.wafutils import compare_versions, exec_pyaster, pyenv_abspath

"""
Build code_aster documentation using Sphinx.
"""


def options(self):
    group = self.add_option_group("Documentation options")
    group.add_option(
        "--disable-doc",
        action="store_false",
        default=None,
        dest="enable_doc",
        help="Disable documentation support.",
    )
    group.add_option(
        "--enable-doc",
        action="store_true",
        default=None,
        dest="enable_doc",
        help="Force documentation support."
        "NB: The documentation build must be explicitly "
        " called by running `waf doc`.",
    )
    group.add_option(
        "--force-doc",
        action="store_true",
        default=False,
        dest="force_doc",
        help="Force the documentation build.",
    )


def configure(self):
    opts = self.options
    try:
        self.find_program("dot", var="DOT")
        self.find_program("convert", var="CONVERT")
        self.find_program("sphinx-build", var="SPHINX_BUILD")
        self.env.SPHINX_BUILD = Utils.to_list(pyenv_abspath(self, self.env.SPHINX_BUILD[0]))
        self.check_sphinx()
        self.env.SPHINX_ARGS = ["-W"]
    except Errors.ConfigurationError:
        if opts.enable_doc is True:
            raise
    else:
        self.env.BUILD_DOC = True


@Configure.conf
def check_sphinx(self):
    """Check if sphinx-build is callable in the current environment."""
    self.start_msg("Checking for sphinx version")
    python = self.env["CONFIG_PARAMETERS"]["python"] or "python3"
    cmd = [python] + self.env.SPHINX_BUILD + ["--version"]
    vers = "not found"
    try:
        res = self.cmd_and_log(cmd)
        vers = res.strip().split()[-1]
    except Errors.WafError as exc:
        del self.env["SPHINX_BUILD"]
        self.end_msg(f"{vers}, 'sphinx-build' disabled", "YELLOW")
        raise Errors.ConfigurationError from exc
    if compare_versions(vers, "7.0") >= 0:
        # sphinx_rtd_theme should be consistent
        # TODO: prefer move this doc into docaster
        self.end_msg(f"{vers}, 'sphinx < 7' is required", "YELLOW")
        raise Errors.ConfigurationError
    self.end_msg(vers)


def _setup_doc(self):
    self.path.make_node("_static").mkdir()
    out = self.path.get_bld().abspath()
    Logs.info("building documentation in {0}".format(out))

    files = self.path.parent.find_dir("code_aster").ant_glob("**/*.py")
    files.extend(self.path.ant_glob("**/*.rst"))
    files.extend(self.path.ant_glob("conf.py"))
    files.extend(self.path.ant_glob("_static/mystyles.css"))
    return out, files


def build_doc(self):
    if sys.version_info < (3, 9):
        Logs.warn(
            "The libaster.py 'stubs' file will be slighly different "
            "from the reference one generated by Python 3.9."
        )
        if not sys.stdout.isatty():
            return
        print("Do you want to build 'libaster.py' anyway (y/[N])?", end=" ")
        ret = input()
        if "y" not in ret.lower():
            return
    env = self.all_envs[self.variant]
    if not env.BUILD_DOC:
        Logs.warn(
            "Documentation build not configure. "
            "Please re-run 'waf configure' with '--enable-doc' to "
            "force documentation support."
        )
        return
    opts = self.options
    if opts.force_doc:
        Logs.warn("Build of documentation forced.")

    build_autodoc(self)
    build_html(self)


def build_autodoc(self):
    if not self.env.BUILD_MPI:
        raise Errors.WafError(
            "'libaster.py' must be generated using a parallel build of 'libaster.so'."
        )

    self(
        rule=run_pylibaster,
        always=self.options.force_doc,
        name="pylibaster",
        source=[
            self.path.ant_glob("scripts/build_pylibaster.py"),
            self.path.parent.get_bld().find_or_declare("bibc/libaster.so"),
        ],
        target=self.path.find_or_declare("_automatic_/libaster.py"),
        cwd=self.path.get_bld().abspath(),
    )
    pysrc = self.path.parent.get_src().ant_glob("code_aster/**/*.py")
    pysrc += self.path.parent.get_src().ant_glob("run_aster/**/*.py")
    elem1 = self.path.parent.get_bld().find_or_declare("catalo/elem.1")
    self(
        rule=run_autodoc,
        always=self.options.force_doc,
        name="rstdevguide",
        source=[
            self.path.ant_glob("scripts/generate_rst.py"),
            elem1,
            self.path.find_or_declare("_automatic_/libaster.py"),
        ]
        + pysrc,
        target=self.path.find_or_declare("_automatic_"),
        cwd=self.path.get_bld().abspath(),
    )


def build_html(self):
    env = self.all_envs[self.variant]
    out, files = _setup_doc(self)

    self.add_group()
    pylib = self.path.get_bld().ant_glob(
        "_automatic_/libaster.py", remove=False, quiet=True, generator=True
    )

    # rst are not changed when libaster is rebuilt, so force to rebuild doctrees and html files
    cmd = (
        ". ${{ASTERDATADIR}}/profile.sh ; "
        "rm -rf {1} {2} ; "
        "BUILDDIR={0} ${{SPHINX_BUILD}} ${{SPHINX_ARGS}} "
        "-b html -d {1} . {2}".format(
            self.path.parent.get_bld().abspath(), osp.join(out, "doctrees"), osp.join(out, "html")
        )
    )
    self(
        rule="bash -c '{0}'".format(cmd),
        always=self.options.force_doc,
        cwd=self.path.abspath(),
        source=files + [pylib],
        target=self.path.find_or_declare("html/index.html"),
        use="pylibaster",
    )
    self.add_manual_dependency(
        self.path.find_or_declare("html/index.html"), self.path.find_node("_automatic_/libaster.py")
    )
    # install html files
    bld = self.path.find_or_declare("html").abspath()
    self(
        rule="mkdir -p {1} && cp -r {0} {1}".format(bld, env.HTMLDIR),
        source=self.path.find_or_declare("html/index.html"),
    )


def run_pylibaster(task):
    script = task.inputs[0].abspath()
    dest = task.outputs[0].get_src()
    dest.parent.mkdir()
    tgt = task.outputs[0].abspath()

    exec_pyaster(task.generator.bld, script, args=[tgt], cwd=task.cwd)

    result = dest.abspath()
    Logs.info("creating {0}...".format(result))
    shutil.copyfile(tgt, result)
    return 0


def run_autodoc(task):
    script = task.inputs[0].abspath()
    tgt = task.outputs[0].abspath()
    elem1 = task.inputs[1].abspath()
    shutil.copyfile(elem1, osp.join(tgt, "elem.1"))
    # remove previously existing files
    for res in task.outputs[0].ant_glob("*.rst"):
        os.remove(res.abspath())

    env = os.environ.copy()
    env.update(dict(AUTODOC_DESTDIR=tgt, ASTER_ELEMENTSDIR=tgt))

    os.makedirs(tgt, exist_ok=True)
    exec_pyaster(task.generator.bld, script, args=[], cwd=task.cwd, env=env)
    for res in task.outputs[0].ant_glob("*.rst"):
        result = res.get_src().abspath()
        Logs.info("copying {0}...".format(result))
        shutil.copyfile(res.abspath(), result)
    return 0
