/// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
///
/// >>>>> Constitutive model MohrCoulombAS <<<<<
///
/// http://tfel.sourceforge.net/MohrCoulomb.html
/// Modified by S. Raude, EDF R&D ERMES
///
/// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@Parser Implicit {automatic_declaration_of_the_temperature_as_first_external_state_variable : false};
@Behaviour MohrCoulombAS;
@Author Thomas Nagel;
@Date 22 / 07 / 2021;

@Algorithm NewtonRaphson;
@MaximumNumberOfIterations 200;
@Theta 1.;
@Epsilon 1.e-14;

/// >>>>>>>>>>>>>>
/// State variable
/// <<<<<<<<<<<<<<

@StateVariable real lam;
lam.setEntryName( "EquPlasticStrain" );

/// >>>>>>>>>>>>>>>>>>>
/// Material properties
/// <<<<<<<<<<<<<<<<<<<

@MaterialProperty stress young;
@MaterialProperty real nu;
@MaterialProperty stress c;
@MaterialProperty real phi;
@MaterialProperty real psi;
@MaterialProperty real lodeT;
@MaterialProperty stress a;
@MaterialProperty stress hC;

young.setGlossaryName( "YoungModulus" );
nu.setGlossaryName( "PoissonRatio" );
c.setEntryName( "Cohesion" );
hC.setEntryName( "HardeningCoef" );
phi.setEntryName( "FrictionAngle" );
psi.setEntryName( "DilatancyAngle" );
a.setEntryName( "TensionCutOff" );
lodeT.setEntryName( "TransitionAngle" );

// @PhysicalBounds young in [0.:*[;
// @PhysicalBounds nu in [0.:.499999];
// @PhysicalBounds c in [0.:*[;
// @PhysicalBounds hC in [0.:*[;
// @PhysicalBounds phi in [0.:89.999999];
// @PhysicalBounds psi in [0.:89.999999];
// @PhysicalBounds a in [0.:*[;
// @PhysicalBounds lodeT in [0.:29.999999];

/// >>>>>>>>>>>>>>
/// Local variable
/// <<<<<<<<<<<<<<

@LocalVariable Stensor np;
@LocalVariable bool F; // if true, plastic loading
@LocalVariable real sin_psi;
@LocalVariable real sin_phi;
@LocalVariable real cos_phi;
@LocalVariable real cos_lodeT;
@LocalVariable real sin_lodeT;
@LocalVariable real tan_lodeT;
@LocalVariable real cos_3_lodeT;
@LocalVariable real sin_3_lodeT;
@LocalVariable real tan_3_lodeT;
@LocalVariable real a_G;
@LocalVariable real pi;
@LocalVariable real local_zero_tolerance;

/// >>>>>>>>>>>>>>>>>>>>>>>>>>
/// Auxilliary state variables
/// <<<<<<<<<<<<<<<<<<<<<<<<<<

@AuxiliaryStateVariable real epv;
@AuxiliaryStateVariable real du;
@AuxiliaryStateVariable real ip;
epv.setEntryName( "VolPlasticStrain" );
du.setEntryName( "Dissipation" );
ip.setEntryName( "PlasticIndex" );

/// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
/// Initialisation a the local variable
/// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@Includes {
#include "TFEL/Material/Lame.hxx"
}

@InitLocalVariables {

    local_zero_tolerance = real( 1.e-14 );

    // conversion to rad
    pi = atan( 1. ) * 4.;
    phi *= pi / 180.;
    psi *= pi / 180.;
    lodeT *= pi / 180.;
    sin_psi = sin( psi );
    cos_phi = cos( phi );
    sin_phi = sin( phi );
    sin_lodeT = sin( lodeT );
    cos_lodeT = cos( lodeT );
    tan_lodeT = tan( lodeT );
    cos_3_lodeT = cos( 3. * lodeT );
    sin_3_lodeT = sin( 3. * lodeT );
    tan_3_lodeT = tan( 3. * lodeT );
    a_G = ( a * tan( phi ) ) / tan( psi );
}

/// >>>>>>>>>>>>>>>>>>
/// Elastic Prediction
/// <<<<<<<<<<<<<<<<<<

@Predictor {

    constexpr auto sqrt3 = Cste< real >::sqrt3;
    constexpr auto isqrt3 = Cste< real >::isqrt3;

    // compute Lame coef.
    using namespace tfel::material::lame;
    const auto lambda = computeLambda( young, nu );
    const auto mu = computeMu( young, nu );

    // compute elastic stress
    StressStensor sigel( lambda * trace( eel + deto ) * Stensor::Id() + 2. * mu * ( eel + deto ) );

    // compute stress invariants
    const auto s_el = deviator( sigel );
    const auto I1_el = trace( sigel );
    const auto J2_el = max( ( s_el | s_el ) / 2., local_zero_tolerance );
    const auto J3_el = det( s_el );

    // compute MC criterion
    const auto arg = min(
        max( -3. * sqrt3 * J3_el / ( 2. * J2_el * sqrt( J2_el ) ), -1. + local_zero_tolerance ),
        1. - local_zero_tolerance );
    const auto lode_el = 1. / 3. * asin( arg );

    auto K = 0.0;

    if ( abs( lode_el ) < lodeT ) {

        K = cos( lode_el ) - isqrt3 * sin_phi * sin( lode_el );

    } else {

        const auto sign =
            min( max( lode_el / max( abs( lode_el ), local_zero_tolerance ), -1. ), 1. );
        const auto A = 1. / 3. * cos_lodeT *
                       ( 3. + tan_lodeT * tan_3_lodeT +
                         isqrt3 * sign * ( tan_3_lodeT - 3. * tan_lodeT ) * sin_phi );
        const auto B =
            1. / ( 3. * cos_3_lodeT ) * ( sign * sin_lodeT + isqrt3 * sin_phi * cos_lodeT );
        K = A - B * arg;
    }

    const auto sMC = I1_el / 3 * sin_phi + sqrt( J2_el * K * K + a * a * sin_phi * sin_phi );

    F = sMC - c * ( 1. + hC * lam ) * cos_phi > 0.;
    np = Stensor( real( 0 ) );
}

// >>>>>>>>>>>>>>
// Compute stress
// <<<<<<<<<<<<<<

@ComputeStress {

    using namespace tfel::material::lame;
    const stress lambda = computeLambda( young, nu );
    const stress mu = computeMu( young, nu );
    sig = lambda * trace( eel ) * StrainStensor::Id() + 2. * mu * eel;
}

/// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
/// Implicit system implementation
/// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@Integrator {

    // define some tools
    constexpr auto sqrt3 = Cste< real >::sqrt3;
    constexpr auto isqrt3 = Cste< real >::isqrt3;
    constexpr auto id = Stensor::Id();
    constexpr auto id4 = Stensor4::Id();
    constexpr auto id_x_id = Stensor4::IxI();

    // elastic tensor
    using namespace tfel::material::lame;
    const auto lambda = computeLambda( young, nu );
    const auto mu = computeMu( young, nu );
    const auto De = lambda * id_x_id + 2. * mu * id4;

    // plastic load
    if ( F ) {

        const auto s = deviator( sig );
        const auto I1 = trace( sig );
        const auto J2 = max( ( s | s ) / 2., local_zero_tolerance );
        const auto J3 = real( det( s ) < 0. ? min( det( s ), -local_zero_tolerance )
                                            : max( det( s ), local_zero_tolerance ) );
        const auto arg =
            min( max( -3. * sqrt3 * J3 / ( 2. * J2 * sqrt( J2 ) ), -1. + local_zero_tolerance ),
                 1. - local_zero_tolerance );
        const auto lode = 1. / 3. * asin( arg );
        const auto cos_lode = cos( lode );
        const auto sin_lode = sin( lode );
        const auto cos_3_lode = cos( 3. * lode );
        const auto sin_3_lode = arg;
        const auto tan_3_lode = tan( 3. * lode );

        auto K = 0.;
        auto dK_dlode = 1.;

        if ( abs( lode ) < lodeT ) {

            K = cos_lode - isqrt3 * sin_phi * sin_lode;
            dK_dlode = -sin_lode - isqrt3 * sin_phi * cos_lode;

        } else {

            const auto sign =
                min( max( lode / max( abs( lode ), local_zero_tolerance ), -1. ), 1. );
            const auto A = 1. / 3. * cos_lodeT *
                           ( 3. + tan_lodeT * tan_3_lodeT +
                             isqrt3 * sign * ( tan_3_lodeT - 3. * tan_lodeT ) * sin_phi );
            const auto B =
                1. / ( 3. * cos_3_lodeT ) * ( sign * sin_lodeT + isqrt3 * sin_phi * cos_lodeT );

            K = A - B * sin_3_lode;
            dK_dlode = -3. * B * cos_3_lode;
        }

        auto KG = 0.0; // move into a function to avoid code duplication
        auto dKG_dlode = 1.;
        auto dKG_ddlode = 1.;

        if ( abs( lode ) < lodeT ) {

            KG = cos_lode - isqrt3 * sin_psi * sin_lode;
            dKG_dlode = -sin_lode - isqrt3 * sin_psi * cos_lode;
            dKG_ddlode = -cos_lode + isqrt3 * sin_psi * sin_lode;

        } else {

            const auto sign =
                min( max( lode / max( abs( lode ), local_zero_tolerance ), -1. ), 1. );
            const auto A = 1. / 3. * cos_lodeT *
                           ( 3. + tan_lodeT * tan_3_lodeT +
                             isqrt3 * sign * ( tan_3_lodeT - 3. * tan_lodeT ) * sin_psi );
            const auto B =
                1. / ( 3. * cos_3_lodeT ) * ( sign * sin_lodeT + isqrt3 * sin_psi * cos_lodeT );

            KG = A - B * sin_3_lode;
            dKG_dlode = -3. * B * cos_3_lode;
            dKG_ddlode = 9. * B * sin_3_lode;
        }

        // flow direction
        const auto dev_s_squared =
            computeJ3Derivative( sig ); // replaces dev_s_squared = deviator(square(s));
        const auto dG_dI1 = sin_psi / 3.;
        const auto root =
            max( sqrt( J2 * KG * KG + a_G * a_G * sin_psi * sin_psi ), local_zero_tolerance );
        const auto dG_dJ2 = KG / ( 2. * root ) * ( KG - tan_3_lode * dKG_dlode );
        const auto dG_dJ3 = J2 * KG * tan_3_lode / ( 3. * J3 * root ) * dKG_dlode;
        const auto n = eval( dG_dI1 * id + dG_dJ2 * s + dG_dJ3 * dev_s_squared );
        if ( this->iter > 30 && abs( n | np ) < sqrt( n | n ) * sqrt( np | np ) * 0.99 ) {
            return false;
        }

        // yield function
        const auto rootF =
            max( sqrt( J2 * K * K + a * a * sin_phi * sin_phi ), local_zero_tolerance );
        const auto Fy1 = I1 * sin_phi / 3 + rootF;
        const auto Fy = Fy1 - c * ( 1. + hC * ( lam + dlam ) ) * cos_phi;
        if ( Fy > 1e-4 * De( 0, 0 ) ) {
            return false;
        }

        // yield function derivative for Jacobian
        const auto dF_dI1 = sin_phi / 3.;
        const auto dF_dJ2 = K / ( 2. * rootF ) * ( K - tan_3_lode * dK_dlode );
        const auto dF_dJ3 = J2 * K * tan_3_lode / ( 3. * J3 * rootF ) * dK_dlode;
        const auto nF = eval( dF_dI1 * id + dF_dJ2 * s + dF_dJ3 * dev_s_squared );

        // building dfeel_ddeel
        const auto Pdev = id4 - ( id ^ id ) / 3;

        const auto dG_dlode = KG * J2 / (root)*dKG_dlode;
        const auto dG_ddlode =
            J2 / root *
            ( dKG_dlode * dKG_dlode * ( 1. - J2 * KG * KG / ( root * root ) ) + KG * dKG_ddlode );
        const auto dG_ddlodeJ2 =
            KG / root * dKG_dlode * ( 1. - J2 * KG * KG / ( 2 * root * root ) );
        const auto dG_ddJ2 = -KG * KG * KG * KG / ( 4. * root * root * root ) +
                             dG_dlode * tan_3_lode / ( 2 * J2 * J2 ) -
                             tan_3_lode / ( 2 * J2 ) *
                                 ( 2 * dG_ddlodeJ2 - tan_3_lode / ( 2 * J2 ) * dG_ddlode -
                                   3 / ( 2 * J2 * cos_3_lode * cos_3_lode ) * dG_dlode );
        const auto dG_ddJ3 = -tan_3_lode / ( 3 * J3 * J3 ) * dG_dlode +
                             tan_3_lode / ( 3 * J3 ) *
                                 ( dG_ddlode * tan_3_lode / ( 3 * J3 ) +
                                   dG_dlode * 1. / ( J3 * cos_3_lode * cos_3_lode ) );
        const auto dG_ddJ2J3 = dG_ddlodeJ2 * tan_3_lode / ( 3 * J3 ) -
                               tan_3_lode / ( 2 * J2 ) *
                                   ( dG_ddlode * tan_3_lode / ( 3 * J3 ) +
                                     dG_dlode * 1. / ( J3 * cos_3_lode * cos_3_lode ) );

        // elasticity
        feel = deel - deto + dlam * n;
        dfeel_ddeel =
            id4 + theta * dlam *
                      ( dG_dJ2 * Pdev + dG_dJ3 * computeJ3SecondDerivative( sig ) +
                        dG_ddJ2 * ( s ^ s ) + dG_ddJ3 * ( dev_s_squared ^ dev_s_squared ) +
                        dG_ddJ2J3 * ( ( dev_s_squared ^ s ) + ( s ^ dev_s_squared ) ) ) *
                      De;
        dfeel_ddlam = n;

        // plasticity
        flam = Fy / De( 0, 0 );
        dflam_ddlam = -theta * c * hC * cos_phi / De( 0, 0 );
        dflam_ddeel = theta * ( nF | De ) / De( 0, 0 );
        np = n;

        // elasticity
    } else {

        feel = deel - deto;
        flam = dlam;
    }
}

// >>>>>>>>>>>>>>>>
// Tangent Operator
// <<<<<<<<<<<<<<<<

@TangentOperator {
    using namespace tfel::material::lame;
    const stress lambda = computeLambda( young, nu );
    const stress mu = computeMu( young, nu );
    // elastic case
    if ( ( smt == ELASTIC ) || ( smt == SECANTOPERATOR ) ) {
        computeElasticStiffness< N, Type >::exe( Dt, lambda, mu );
    }
    // plastic case
    else if ( smt == CONSISTENTTANGENTOPERATOR ) {
        StiffnessTensor De;
        Stensor4 Je;
        computeElasticStiffness< N, Type >::exe( De, lambda, mu );
        getPartialJacobianInvert( Je );
        Dt = De * Je;
    }
    // other
    else {
        return false;
    }
}

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Update Auxiliary State Variables
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

@UpdateAuxiliaryStateVars {
    epv += trace( deto - deel );
    du += ( sig | ( deto - deel ) );
    ip = floor( dlam > 0 ? 1 : 0 );
}
